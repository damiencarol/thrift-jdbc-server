/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package driver.io;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CCResultSetMetaDataPart implements org.apache.thrift.TBase<CCResultSetMetaDataPart, CCResultSetMetaDataPart._Fields>, java.io.Serializable, Cloneable, Comparable<CCResultSetMetaDataPart> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CCResultSetMetaDataPart");

  private static final org.apache.thrift.protocol.TField CATALOG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("columnClassName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMN_DISPLAY_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("columnDisplaySize", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COLUMN_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("columnLabel", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("columnName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COLUMN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("columnType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField COLUMN_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("columnTypeName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PRECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("precision", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("scale", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SCHEMA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("schemaName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField AUTO_INCREMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("autoIncrement", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField CASE_SENSITIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("caseSensitive", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField DEFINITELY_WRITABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("definitelyWritable", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField NULLABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("nullable", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField READ_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("readOnly", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField SEARCHABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("searchable", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField SIGNED_FIELD_DESC = new org.apache.thrift.protocol.TField("signed", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField WRITABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("writable", org.apache.thrift.protocol.TType.BOOL, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CCResultSetMetaDataPartStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CCResultSetMetaDataPartTupleSchemeFactory());
  }

  public String catalogName; // required
  public String columnClassName; // required
  public int columnDisplaySize; // required
  public String columnLabel; // required
  public String columnName; // required
  public int columnType; // required
  public String columnTypeName; // required
  public int precision; // required
  public int scale; // required
  public String schemaName; // required
  public String tableName; // required
  public boolean autoIncrement; // required
  public boolean caseSensitive; // required
  public boolean currency; // required
  public boolean definitelyWritable; // required
  public int nullable; // required
  public boolean readOnly; // required
  public boolean searchable; // required
  public boolean signed; // required
  public boolean writable; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CATALOG_NAME((short)1, "catalogName"),
    COLUMN_CLASS_NAME((short)2, "columnClassName"),
    COLUMN_DISPLAY_SIZE((short)3, "columnDisplaySize"),
    COLUMN_LABEL((short)4, "columnLabel"),
    COLUMN_NAME((short)5, "columnName"),
    COLUMN_TYPE((short)6, "columnType"),
    COLUMN_TYPE_NAME((short)7, "columnTypeName"),
    PRECISION((short)8, "precision"),
    SCALE((short)9, "scale"),
    SCHEMA_NAME((short)10, "schemaName"),
    TABLE_NAME((short)11, "tableName"),
    AUTO_INCREMENT((short)12, "autoIncrement"),
    CASE_SENSITIVE((short)13, "caseSensitive"),
    CURRENCY((short)14, "currency"),
    DEFINITELY_WRITABLE((short)15, "definitelyWritable"),
    NULLABLE((short)16, "nullable"),
    READ_ONLY((short)17, "readOnly"),
    SEARCHABLE((short)18, "searchable"),
    SIGNED((short)19, "signed"),
    WRITABLE((short)20, "writable");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CATALOG_NAME
          return CATALOG_NAME;
        case 2: // COLUMN_CLASS_NAME
          return COLUMN_CLASS_NAME;
        case 3: // COLUMN_DISPLAY_SIZE
          return COLUMN_DISPLAY_SIZE;
        case 4: // COLUMN_LABEL
          return COLUMN_LABEL;
        case 5: // COLUMN_NAME
          return COLUMN_NAME;
        case 6: // COLUMN_TYPE
          return COLUMN_TYPE;
        case 7: // COLUMN_TYPE_NAME
          return COLUMN_TYPE_NAME;
        case 8: // PRECISION
          return PRECISION;
        case 9: // SCALE
          return SCALE;
        case 10: // SCHEMA_NAME
          return SCHEMA_NAME;
        case 11: // TABLE_NAME
          return TABLE_NAME;
        case 12: // AUTO_INCREMENT
          return AUTO_INCREMENT;
        case 13: // CASE_SENSITIVE
          return CASE_SENSITIVE;
        case 14: // CURRENCY
          return CURRENCY;
        case 15: // DEFINITELY_WRITABLE
          return DEFINITELY_WRITABLE;
        case 16: // NULLABLE
          return NULLABLE;
        case 17: // READ_ONLY
          return READ_ONLY;
        case 18: // SEARCHABLE
          return SEARCHABLE;
        case 19: // SIGNED
          return SIGNED;
        case 20: // WRITABLE
          return WRITABLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COLUMNDISPLAYSIZE_ISSET_ID = 0;
  private static final int __COLUMNTYPE_ISSET_ID = 1;
  private static final int __PRECISION_ISSET_ID = 2;
  private static final int __SCALE_ISSET_ID = 3;
  private static final int __AUTOINCREMENT_ISSET_ID = 4;
  private static final int __CASESENSITIVE_ISSET_ID = 5;
  private static final int __CURRENCY_ISSET_ID = 6;
  private static final int __DEFINITELYWRITABLE_ISSET_ID = 7;
  private static final int __NULLABLE_ISSET_ID = 8;
  private static final int __READONLY_ISSET_ID = 9;
  private static final int __SEARCHABLE_ISSET_ID = 10;
  private static final int __SIGNED_ISSET_ID = 11;
  private static final int __WRITABLE_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CATALOG_NAME, new org.apache.thrift.meta_data.FieldMetaData("catalogName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("columnClassName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_DISPLAY_SIZE, new org.apache.thrift.meta_data.FieldMetaData("columnDisplaySize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUMN_LABEL, new org.apache.thrift.meta_data.FieldMetaData("columnLabel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("columnName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("columnType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUMN_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("columnTypeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRECISION, new org.apache.thrift.meta_data.FieldMetaData("precision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCALE, new org.apache.thrift.meta_data.FieldMetaData("scale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCHEMA_NAME, new org.apache.thrift.meta_data.FieldMetaData("schemaName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTO_INCREMENT, new org.apache.thrift.meta_data.FieldMetaData("autoIncrement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CASE_SENSITIVE, new org.apache.thrift.meta_data.FieldMetaData("caseSensitive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFINITELY_WRITABLE, new org.apache.thrift.meta_data.FieldMetaData("definitelyWritable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NULLABLE, new org.apache.thrift.meta_data.FieldMetaData("nullable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.READ_ONLY, new org.apache.thrift.meta_data.FieldMetaData("readOnly", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SEARCHABLE, new org.apache.thrift.meta_data.FieldMetaData("searchable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SIGNED, new org.apache.thrift.meta_data.FieldMetaData("signed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WRITABLE, new org.apache.thrift.meta_data.FieldMetaData("writable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CCResultSetMetaDataPart.class, metaDataMap);
  }

  public CCResultSetMetaDataPart() {
  }

  public CCResultSetMetaDataPart(
    String catalogName,
    String columnClassName,
    int columnDisplaySize,
    String columnLabel,
    String columnName,
    int columnType,
    String columnTypeName,
    int precision,
    int scale,
    String schemaName,
    String tableName,
    boolean autoIncrement,
    boolean caseSensitive,
    boolean currency,
    boolean definitelyWritable,
    int nullable,
    boolean readOnly,
    boolean searchable,
    boolean signed,
    boolean writable)
  {
    this();
    this.catalogName = catalogName;
    this.columnClassName = columnClassName;
    this.columnDisplaySize = columnDisplaySize;
    setColumnDisplaySizeIsSet(true);
    this.columnLabel = columnLabel;
    this.columnName = columnName;
    this.columnType = columnType;
    setColumnTypeIsSet(true);
    this.columnTypeName = columnTypeName;
    this.precision = precision;
    setPrecisionIsSet(true);
    this.scale = scale;
    setScaleIsSet(true);
    this.schemaName = schemaName;
    this.tableName = tableName;
    this.autoIncrement = autoIncrement;
    setAutoIncrementIsSet(true);
    this.caseSensitive = caseSensitive;
    setCaseSensitiveIsSet(true);
    this.currency = currency;
    setCurrencyIsSet(true);
    this.definitelyWritable = definitelyWritable;
    setDefinitelyWritableIsSet(true);
    this.nullable = nullable;
    setNullableIsSet(true);
    this.readOnly = readOnly;
    setReadOnlyIsSet(true);
    this.searchable = searchable;
    setSearchableIsSet(true);
    this.signed = signed;
    setSignedIsSet(true);
    this.writable = writable;
    setWritableIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CCResultSetMetaDataPart(CCResultSetMetaDataPart other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCatalogName()) {
      this.catalogName = other.catalogName;
    }
    if (other.isSetColumnClassName()) {
      this.columnClassName = other.columnClassName;
    }
    this.columnDisplaySize = other.columnDisplaySize;
    if (other.isSetColumnLabel()) {
      this.columnLabel = other.columnLabel;
    }
    if (other.isSetColumnName()) {
      this.columnName = other.columnName;
    }
    this.columnType = other.columnType;
    if (other.isSetColumnTypeName()) {
      this.columnTypeName = other.columnTypeName;
    }
    this.precision = other.precision;
    this.scale = other.scale;
    if (other.isSetSchemaName()) {
      this.schemaName = other.schemaName;
    }
    if (other.isSetTableName()) {
      this.tableName = other.tableName;
    }
    this.autoIncrement = other.autoIncrement;
    this.caseSensitive = other.caseSensitive;
    this.currency = other.currency;
    this.definitelyWritable = other.definitelyWritable;
    this.nullable = other.nullable;
    this.readOnly = other.readOnly;
    this.searchable = other.searchable;
    this.signed = other.signed;
    this.writable = other.writable;
  }

  public CCResultSetMetaDataPart deepCopy() {
    return new CCResultSetMetaDataPart(this);
  }

  @Override
  public void clear() {
    this.catalogName = null;
    this.columnClassName = null;
    setColumnDisplaySizeIsSet(false);
    this.columnDisplaySize = 0;
    this.columnLabel = null;
    this.columnName = null;
    setColumnTypeIsSet(false);
    this.columnType = 0;
    this.columnTypeName = null;
    setPrecisionIsSet(false);
    this.precision = 0;
    setScaleIsSet(false);
    this.scale = 0;
    this.schemaName = null;
    this.tableName = null;
    setAutoIncrementIsSet(false);
    this.autoIncrement = false;
    setCaseSensitiveIsSet(false);
    this.caseSensitive = false;
    setCurrencyIsSet(false);
    this.currency = false;
    setDefinitelyWritableIsSet(false);
    this.definitelyWritable = false;
    setNullableIsSet(false);
    this.nullable = 0;
    setReadOnlyIsSet(false);
    this.readOnly = false;
    setSearchableIsSet(false);
    this.searchable = false;
    setSignedIsSet(false);
    this.signed = false;
    setWritableIsSet(false);
    this.writable = false;
  }

  public String getCatalogName() {
    return this.catalogName;
  }

  public CCResultSetMetaDataPart setCatalogName(String catalogName) {
    this.catalogName = catalogName;
    return this;
  }

  public void unsetCatalogName() {
    this.catalogName = null;
  }

  /** Returns true if field catalogName is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalogName() {
    return this.catalogName != null;
  }

  public void setCatalogNameIsSet(boolean value) {
    if (!value) {
      this.catalogName = null;
    }
  }

  public String getColumnClassName() {
    return this.columnClassName;
  }

  public CCResultSetMetaDataPart setColumnClassName(String columnClassName) {
    this.columnClassName = columnClassName;
    return this;
  }

  public void unsetColumnClassName() {
    this.columnClassName = null;
  }

  /** Returns true if field columnClassName is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnClassName() {
    return this.columnClassName != null;
  }

  public void setColumnClassNameIsSet(boolean value) {
    if (!value) {
      this.columnClassName = null;
    }
  }

  public int getColumnDisplaySize() {
    return this.columnDisplaySize;
  }

  public CCResultSetMetaDataPart setColumnDisplaySize(int columnDisplaySize) {
    this.columnDisplaySize = columnDisplaySize;
    setColumnDisplaySizeIsSet(true);
    return this;
  }

  public void unsetColumnDisplaySize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLUMNDISPLAYSIZE_ISSET_ID);
  }

  /** Returns true if field columnDisplaySize is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnDisplaySize() {
    return EncodingUtils.testBit(__isset_bitfield, __COLUMNDISPLAYSIZE_ISSET_ID);
  }

  public void setColumnDisplaySizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLUMNDISPLAYSIZE_ISSET_ID, value);
  }

  public String getColumnLabel() {
    return this.columnLabel;
  }

  public CCResultSetMetaDataPart setColumnLabel(String columnLabel) {
    this.columnLabel = columnLabel;
    return this;
  }

  public void unsetColumnLabel() {
    this.columnLabel = null;
  }

  /** Returns true if field columnLabel is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnLabel() {
    return this.columnLabel != null;
  }

  public void setColumnLabelIsSet(boolean value) {
    if (!value) {
      this.columnLabel = null;
    }
  }

  public String getColumnName() {
    return this.columnName;
  }

  public CCResultSetMetaDataPart setColumnName(String columnName) {
    this.columnName = columnName;
    return this;
  }

  public void unsetColumnName() {
    this.columnName = null;
  }

  /** Returns true if field columnName is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnName() {
    return this.columnName != null;
  }

  public void setColumnNameIsSet(boolean value) {
    if (!value) {
      this.columnName = null;
    }
  }

  public int getColumnType() {
    return this.columnType;
  }

  public CCResultSetMetaDataPart setColumnType(int columnType) {
    this.columnType = columnType;
    setColumnTypeIsSet(true);
    return this;
  }

  public void unsetColumnType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLUMNTYPE_ISSET_ID);
  }

  /** Returns true if field columnType is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnType() {
    return EncodingUtils.testBit(__isset_bitfield, __COLUMNTYPE_ISSET_ID);
  }

  public void setColumnTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLUMNTYPE_ISSET_ID, value);
  }

  public String getColumnTypeName() {
    return this.columnTypeName;
  }

  public CCResultSetMetaDataPart setColumnTypeName(String columnTypeName) {
    this.columnTypeName = columnTypeName;
    return this;
  }

  public void unsetColumnTypeName() {
    this.columnTypeName = null;
  }

  /** Returns true if field columnTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnTypeName() {
    return this.columnTypeName != null;
  }

  public void setColumnTypeNameIsSet(boolean value) {
    if (!value) {
      this.columnTypeName = null;
    }
  }

  public int getPrecision() {
    return this.precision;
  }

  public CCResultSetMetaDataPart setPrecision(int precision) {
    this.precision = precision;
    setPrecisionIsSet(true);
    return this;
  }

  public void unsetPrecision() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRECISION_ISSET_ID);
  }

  /** Returns true if field precision is set (has been assigned a value) and false otherwise */
  public boolean isSetPrecision() {
    return EncodingUtils.testBit(__isset_bitfield, __PRECISION_ISSET_ID);
  }

  public void setPrecisionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRECISION_ISSET_ID, value);
  }

  public int getScale() {
    return this.scale;
  }

  public CCResultSetMetaDataPart setScale(int scale) {
    this.scale = scale;
    setScaleIsSet(true);
    return this;
  }

  public void unsetScale() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCALE_ISSET_ID);
  }

  /** Returns true if field scale is set (has been assigned a value) and false otherwise */
  public boolean isSetScale() {
    return EncodingUtils.testBit(__isset_bitfield, __SCALE_ISSET_ID);
  }

  public void setScaleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCALE_ISSET_ID, value);
  }

  public String getSchemaName() {
    return this.schemaName;
  }

  public CCResultSetMetaDataPart setSchemaName(String schemaName) {
    this.schemaName = schemaName;
    return this;
  }

  public void unsetSchemaName() {
    this.schemaName = null;
  }

  /** Returns true if field schemaName is set (has been assigned a value) and false otherwise */
  public boolean isSetSchemaName() {
    return this.schemaName != null;
  }

  public void setSchemaNameIsSet(boolean value) {
    if (!value) {
      this.schemaName = null;
    }
  }

  public String getTableName() {
    return this.tableName;
  }

  public CCResultSetMetaDataPart setTableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  public void unsetTableName() {
    this.tableName = null;
  }

  /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.tableName != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.tableName = null;
    }
  }

  public boolean isAutoIncrement() {
    return this.autoIncrement;
  }

  public CCResultSetMetaDataPart setAutoIncrement(boolean autoIncrement) {
    this.autoIncrement = autoIncrement;
    setAutoIncrementIsSet(true);
    return this;
  }

  public void unsetAutoIncrement() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUTOINCREMENT_ISSET_ID);
  }

  /** Returns true if field autoIncrement is set (has been assigned a value) and false otherwise */
  public boolean isSetAutoIncrement() {
    return EncodingUtils.testBit(__isset_bitfield, __AUTOINCREMENT_ISSET_ID);
  }

  public void setAutoIncrementIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUTOINCREMENT_ISSET_ID, value);
  }

  public boolean isCaseSensitive() {
    return this.caseSensitive;
  }

  public CCResultSetMetaDataPart setCaseSensitive(boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
    setCaseSensitiveIsSet(true);
    return this;
  }

  public void unsetCaseSensitive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASESENSITIVE_ISSET_ID);
  }

  /** Returns true if field caseSensitive is set (has been assigned a value) and false otherwise */
  public boolean isSetCaseSensitive() {
    return EncodingUtils.testBit(__isset_bitfield, __CASESENSITIVE_ISSET_ID);
  }

  public void setCaseSensitiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASESENSITIVE_ISSET_ID, value);
  }

  public boolean isCurrency() {
    return this.currency;
  }

  public CCResultSetMetaDataPart setCurrency(boolean currency) {
    this.currency = currency;
    setCurrencyIsSet(true);
    return this;
  }

  public void unsetCurrency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENCY_ISSET_ID);
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENCY_ISSET_ID);
  }

  public void setCurrencyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENCY_ISSET_ID, value);
  }

  public boolean isDefinitelyWritable() {
    return this.definitelyWritable;
  }

  public CCResultSetMetaDataPart setDefinitelyWritable(boolean definitelyWritable) {
    this.definitelyWritable = definitelyWritable;
    setDefinitelyWritableIsSet(true);
    return this;
  }

  public void unsetDefinitelyWritable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEFINITELYWRITABLE_ISSET_ID);
  }

  /** Returns true if field definitelyWritable is set (has been assigned a value) and false otherwise */
  public boolean isSetDefinitelyWritable() {
    return EncodingUtils.testBit(__isset_bitfield, __DEFINITELYWRITABLE_ISSET_ID);
  }

  public void setDefinitelyWritableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEFINITELYWRITABLE_ISSET_ID, value);
  }

  public int getNullable() {
    return this.nullable;
  }

  public CCResultSetMetaDataPart setNullable(int nullable) {
    this.nullable = nullable;
    setNullableIsSet(true);
    return this;
  }

  public void unsetNullable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NULLABLE_ISSET_ID);
  }

  /** Returns true if field nullable is set (has been assigned a value) and false otherwise */
  public boolean isSetNullable() {
    return EncodingUtils.testBit(__isset_bitfield, __NULLABLE_ISSET_ID);
  }

  public void setNullableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NULLABLE_ISSET_ID, value);
  }

  public boolean isReadOnly() {
    return this.readOnly;
  }

  public CCResultSetMetaDataPart setReadOnly(boolean readOnly) {
    this.readOnly = readOnly;
    setReadOnlyIsSet(true);
    return this;
  }

  public void unsetReadOnly() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READONLY_ISSET_ID);
  }

  /** Returns true if field readOnly is set (has been assigned a value) and false otherwise */
  public boolean isSetReadOnly() {
    return EncodingUtils.testBit(__isset_bitfield, __READONLY_ISSET_ID);
  }

  public void setReadOnlyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READONLY_ISSET_ID, value);
  }

  public boolean isSearchable() {
    return this.searchable;
  }

  public CCResultSetMetaDataPart setSearchable(boolean searchable) {
    this.searchable = searchable;
    setSearchableIsSet(true);
    return this;
  }

  public void unsetSearchable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEARCHABLE_ISSET_ID);
  }

  /** Returns true if field searchable is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchable() {
    return EncodingUtils.testBit(__isset_bitfield, __SEARCHABLE_ISSET_ID);
  }

  public void setSearchableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEARCHABLE_ISSET_ID, value);
  }

  public boolean isSigned() {
    return this.signed;
  }

  public CCResultSetMetaDataPart setSigned(boolean signed) {
    this.signed = signed;
    setSignedIsSet(true);
    return this;
  }

  public void unsetSigned() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIGNED_ISSET_ID);
  }

  /** Returns true if field signed is set (has been assigned a value) and false otherwise */
  public boolean isSetSigned() {
    return EncodingUtils.testBit(__isset_bitfield, __SIGNED_ISSET_ID);
  }

  public void setSignedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIGNED_ISSET_ID, value);
  }

  public boolean isWritable() {
    return this.writable;
  }

  public CCResultSetMetaDataPart setWritable(boolean writable) {
    this.writable = writable;
    setWritableIsSet(true);
    return this;
  }

  public void unsetWritable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRITABLE_ISSET_ID);
  }

  /** Returns true if field writable is set (has been assigned a value) and false otherwise */
  public boolean isSetWritable() {
    return EncodingUtils.testBit(__isset_bitfield, __WRITABLE_ISSET_ID);
  }

  public void setWritableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRITABLE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CATALOG_NAME:
      if (value == null) {
        unsetCatalogName();
      } else {
        setCatalogName((String)value);
      }
      break;

    case COLUMN_CLASS_NAME:
      if (value == null) {
        unsetColumnClassName();
      } else {
        setColumnClassName((String)value);
      }
      break;

    case COLUMN_DISPLAY_SIZE:
      if (value == null) {
        unsetColumnDisplaySize();
      } else {
        setColumnDisplaySize((Integer)value);
      }
      break;

    case COLUMN_LABEL:
      if (value == null) {
        unsetColumnLabel();
      } else {
        setColumnLabel((String)value);
      }
      break;

    case COLUMN_NAME:
      if (value == null) {
        unsetColumnName();
      } else {
        setColumnName((String)value);
      }
      break;

    case COLUMN_TYPE:
      if (value == null) {
        unsetColumnType();
      } else {
        setColumnType((Integer)value);
      }
      break;

    case COLUMN_TYPE_NAME:
      if (value == null) {
        unsetColumnTypeName();
      } else {
        setColumnTypeName((String)value);
      }
      break;

    case PRECISION:
      if (value == null) {
        unsetPrecision();
      } else {
        setPrecision((Integer)value);
      }
      break;

    case SCALE:
      if (value == null) {
        unsetScale();
      } else {
        setScale((Integer)value);
      }
      break;

    case SCHEMA_NAME:
      if (value == null) {
        unsetSchemaName();
      } else {
        setSchemaName((String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((String)value);
      }
      break;

    case AUTO_INCREMENT:
      if (value == null) {
        unsetAutoIncrement();
      } else {
        setAutoIncrement((Boolean)value);
      }
      break;

    case CASE_SENSITIVE:
      if (value == null) {
        unsetCaseSensitive();
      } else {
        setCaseSensitive((Boolean)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((Boolean)value);
      }
      break;

    case DEFINITELY_WRITABLE:
      if (value == null) {
        unsetDefinitelyWritable();
      } else {
        setDefinitelyWritable((Boolean)value);
      }
      break;

    case NULLABLE:
      if (value == null) {
        unsetNullable();
      } else {
        setNullable((Integer)value);
      }
      break;

    case READ_ONLY:
      if (value == null) {
        unsetReadOnly();
      } else {
        setReadOnly((Boolean)value);
      }
      break;

    case SEARCHABLE:
      if (value == null) {
        unsetSearchable();
      } else {
        setSearchable((Boolean)value);
      }
      break;

    case SIGNED:
      if (value == null) {
        unsetSigned();
      } else {
        setSigned((Boolean)value);
      }
      break;

    case WRITABLE:
      if (value == null) {
        unsetWritable();
      } else {
        setWritable((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CATALOG_NAME:
      return getCatalogName();

    case COLUMN_CLASS_NAME:
      return getColumnClassName();

    case COLUMN_DISPLAY_SIZE:
      return Integer.valueOf(getColumnDisplaySize());

    case COLUMN_LABEL:
      return getColumnLabel();

    case COLUMN_NAME:
      return getColumnName();

    case COLUMN_TYPE:
      return Integer.valueOf(getColumnType());

    case COLUMN_TYPE_NAME:
      return getColumnTypeName();

    case PRECISION:
      return Integer.valueOf(getPrecision());

    case SCALE:
      return Integer.valueOf(getScale());

    case SCHEMA_NAME:
      return getSchemaName();

    case TABLE_NAME:
      return getTableName();

    case AUTO_INCREMENT:
      return Boolean.valueOf(isAutoIncrement());

    case CASE_SENSITIVE:
      return Boolean.valueOf(isCaseSensitive());

    case CURRENCY:
      return Boolean.valueOf(isCurrency());

    case DEFINITELY_WRITABLE:
      return Boolean.valueOf(isDefinitelyWritable());

    case NULLABLE:
      return Integer.valueOf(getNullable());

    case READ_ONLY:
      return Boolean.valueOf(isReadOnly());

    case SEARCHABLE:
      return Boolean.valueOf(isSearchable());

    case SIGNED:
      return Boolean.valueOf(isSigned());

    case WRITABLE:
      return Boolean.valueOf(isWritable());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CATALOG_NAME:
      return isSetCatalogName();
    case COLUMN_CLASS_NAME:
      return isSetColumnClassName();
    case COLUMN_DISPLAY_SIZE:
      return isSetColumnDisplaySize();
    case COLUMN_LABEL:
      return isSetColumnLabel();
    case COLUMN_NAME:
      return isSetColumnName();
    case COLUMN_TYPE:
      return isSetColumnType();
    case COLUMN_TYPE_NAME:
      return isSetColumnTypeName();
    case PRECISION:
      return isSetPrecision();
    case SCALE:
      return isSetScale();
    case SCHEMA_NAME:
      return isSetSchemaName();
    case TABLE_NAME:
      return isSetTableName();
    case AUTO_INCREMENT:
      return isSetAutoIncrement();
    case CASE_SENSITIVE:
      return isSetCaseSensitive();
    case CURRENCY:
      return isSetCurrency();
    case DEFINITELY_WRITABLE:
      return isSetDefinitelyWritable();
    case NULLABLE:
      return isSetNullable();
    case READ_ONLY:
      return isSetReadOnly();
    case SEARCHABLE:
      return isSetSearchable();
    case SIGNED:
      return isSetSigned();
    case WRITABLE:
      return isSetWritable();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CCResultSetMetaDataPart)
      return this.equals((CCResultSetMetaDataPart)that);
    return false;
  }

  public boolean equals(CCResultSetMetaDataPart that) {
    if (that == null)
      return false;

    boolean this_present_catalogName = true && this.isSetCatalogName();
    boolean that_present_catalogName = true && that.isSetCatalogName();
    if (this_present_catalogName || that_present_catalogName) {
      if (!(this_present_catalogName && that_present_catalogName))
        return false;
      if (!this.catalogName.equals(that.catalogName))
        return false;
    }

    boolean this_present_columnClassName = true && this.isSetColumnClassName();
    boolean that_present_columnClassName = true && that.isSetColumnClassName();
    if (this_present_columnClassName || that_present_columnClassName) {
      if (!(this_present_columnClassName && that_present_columnClassName))
        return false;
      if (!this.columnClassName.equals(that.columnClassName))
        return false;
    }

    boolean this_present_columnDisplaySize = true;
    boolean that_present_columnDisplaySize = true;
    if (this_present_columnDisplaySize || that_present_columnDisplaySize) {
      if (!(this_present_columnDisplaySize && that_present_columnDisplaySize))
        return false;
      if (this.columnDisplaySize != that.columnDisplaySize)
        return false;
    }

    boolean this_present_columnLabel = true && this.isSetColumnLabel();
    boolean that_present_columnLabel = true && that.isSetColumnLabel();
    if (this_present_columnLabel || that_present_columnLabel) {
      if (!(this_present_columnLabel && that_present_columnLabel))
        return false;
      if (!this.columnLabel.equals(that.columnLabel))
        return false;
    }

    boolean this_present_columnName = true && this.isSetColumnName();
    boolean that_present_columnName = true && that.isSetColumnName();
    if (this_present_columnName || that_present_columnName) {
      if (!(this_present_columnName && that_present_columnName))
        return false;
      if (!this.columnName.equals(that.columnName))
        return false;
    }

    boolean this_present_columnType = true;
    boolean that_present_columnType = true;
    if (this_present_columnType || that_present_columnType) {
      if (!(this_present_columnType && that_present_columnType))
        return false;
      if (this.columnType != that.columnType)
        return false;
    }

    boolean this_present_columnTypeName = true && this.isSetColumnTypeName();
    boolean that_present_columnTypeName = true && that.isSetColumnTypeName();
    if (this_present_columnTypeName || that_present_columnTypeName) {
      if (!(this_present_columnTypeName && that_present_columnTypeName))
        return false;
      if (!this.columnTypeName.equals(that.columnTypeName))
        return false;
    }

    boolean this_present_precision = true;
    boolean that_present_precision = true;
    if (this_present_precision || that_present_precision) {
      if (!(this_present_precision && that_present_precision))
        return false;
      if (this.precision != that.precision)
        return false;
    }

    boolean this_present_scale = true;
    boolean that_present_scale = true;
    if (this_present_scale || that_present_scale) {
      if (!(this_present_scale && that_present_scale))
        return false;
      if (this.scale != that.scale)
        return false;
    }

    boolean this_present_schemaName = true && this.isSetSchemaName();
    boolean that_present_schemaName = true && that.isSetSchemaName();
    if (this_present_schemaName || that_present_schemaName) {
      if (!(this_present_schemaName && that_present_schemaName))
        return false;
      if (!this.schemaName.equals(that.schemaName))
        return false;
    }

    boolean this_present_tableName = true && this.isSetTableName();
    boolean that_present_tableName = true && that.isSetTableName();
    if (this_present_tableName || that_present_tableName) {
      if (!(this_present_tableName && that_present_tableName))
        return false;
      if (!this.tableName.equals(that.tableName))
        return false;
    }

    boolean this_present_autoIncrement = true;
    boolean that_present_autoIncrement = true;
    if (this_present_autoIncrement || that_present_autoIncrement) {
      if (!(this_present_autoIncrement && that_present_autoIncrement))
        return false;
      if (this.autoIncrement != that.autoIncrement)
        return false;
    }

    boolean this_present_caseSensitive = true;
    boolean that_present_caseSensitive = true;
    if (this_present_caseSensitive || that_present_caseSensitive) {
      if (!(this_present_caseSensitive && that_present_caseSensitive))
        return false;
      if (this.caseSensitive != that.caseSensitive)
        return false;
    }

    boolean this_present_currency = true;
    boolean that_present_currency = true;
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (this.currency != that.currency)
        return false;
    }

    boolean this_present_definitelyWritable = true;
    boolean that_present_definitelyWritable = true;
    if (this_present_definitelyWritable || that_present_definitelyWritable) {
      if (!(this_present_definitelyWritable && that_present_definitelyWritable))
        return false;
      if (this.definitelyWritable != that.definitelyWritable)
        return false;
    }

    boolean this_present_nullable = true;
    boolean that_present_nullable = true;
    if (this_present_nullable || that_present_nullable) {
      if (!(this_present_nullable && that_present_nullable))
        return false;
      if (this.nullable != that.nullable)
        return false;
    }

    boolean this_present_readOnly = true;
    boolean that_present_readOnly = true;
    if (this_present_readOnly || that_present_readOnly) {
      if (!(this_present_readOnly && that_present_readOnly))
        return false;
      if (this.readOnly != that.readOnly)
        return false;
    }

    boolean this_present_searchable = true;
    boolean that_present_searchable = true;
    if (this_present_searchable || that_present_searchable) {
      if (!(this_present_searchable && that_present_searchable))
        return false;
      if (this.searchable != that.searchable)
        return false;
    }

    boolean this_present_signed = true;
    boolean that_present_signed = true;
    if (this_present_signed || that_present_signed) {
      if (!(this_present_signed && that_present_signed))
        return false;
      if (this.signed != that.signed)
        return false;
    }

    boolean this_present_writable = true;
    boolean that_present_writable = true;
    if (this_present_writable || that_present_writable) {
      if (!(this_present_writable && that_present_writable))
        return false;
      if (this.writable != that.writable)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CCResultSetMetaDataPart other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCatalogName()).compareTo(other.isSetCatalogName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalogName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogName, other.catalogName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnClassName()).compareTo(other.isSetColumnClassName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnClassName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnClassName, other.columnClassName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnDisplaySize()).compareTo(other.isSetColumnDisplaySize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnDisplaySize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnDisplaySize, other.columnDisplaySize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnLabel()).compareTo(other.isSetColumnLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnLabel, other.columnLabel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnName()).compareTo(other.isSetColumnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnName, other.columnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnType()).compareTo(other.isSetColumnType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnType, other.columnType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnTypeName()).compareTo(other.isSetColumnTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnTypeName, other.columnTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrecision()).compareTo(other.isSetPrecision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrecision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.precision, other.precision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScale()).compareTo(other.isSetScale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scale, other.scale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchemaName()).compareTo(other.isSetSchemaName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchemaName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemaName, other.schemaName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAutoIncrement()).compareTo(other.isSetAutoIncrement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAutoIncrement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autoIncrement, other.autoIncrement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCaseSensitive()).compareTo(other.isSetCaseSensitive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCaseSensitive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caseSensitive, other.caseSensitive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefinitelyWritable()).compareTo(other.isSetDefinitelyWritable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefinitelyWritable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.definitelyWritable, other.definitelyWritable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNullable()).compareTo(other.isSetNullable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNullable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nullable, other.nullable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadOnly()).compareTo(other.isSetReadOnly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadOnly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readOnly, other.readOnly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchable()).compareTo(other.isSetSearchable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchable, other.searchable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSigned()).compareTo(other.isSetSigned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSigned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signed, other.signed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWritable()).compareTo(other.isSetWritable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWritable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writable, other.writable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CCResultSetMetaDataPart(");
    boolean first = true;

    sb.append("catalogName:");
    if (this.catalogName == null) {
      sb.append("null");
    } else {
      sb.append(this.catalogName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnClassName:");
    if (this.columnClassName == null) {
      sb.append("null");
    } else {
      sb.append(this.columnClassName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnDisplaySize:");
    sb.append(this.columnDisplaySize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnLabel:");
    if (this.columnLabel == null) {
      sb.append("null");
    } else {
      sb.append(this.columnLabel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnName:");
    if (this.columnName == null) {
      sb.append("null");
    } else {
      sb.append(this.columnName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnType:");
    sb.append(this.columnType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnTypeName:");
    if (this.columnTypeName == null) {
      sb.append("null");
    } else {
      sb.append(this.columnTypeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("precision:");
    sb.append(this.precision);
    first = false;
    if (!first) sb.append(", ");
    sb.append("scale:");
    sb.append(this.scale);
    first = false;
    if (!first) sb.append(", ");
    sb.append("schemaName:");
    if (this.schemaName == null) {
      sb.append("null");
    } else {
      sb.append(this.schemaName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tableName:");
    if (this.tableName == null) {
      sb.append("null");
    } else {
      sb.append(this.tableName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("autoIncrement:");
    sb.append(this.autoIncrement);
    first = false;
    if (!first) sb.append(", ");
    sb.append("caseSensitive:");
    sb.append(this.caseSensitive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    sb.append(this.currency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("definitelyWritable:");
    sb.append(this.definitelyWritable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nullable:");
    sb.append(this.nullable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("readOnly:");
    sb.append(this.readOnly);
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchable:");
    sb.append(this.searchable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signed:");
    sb.append(this.signed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("writable:");
    sb.append(this.writable);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CCResultSetMetaDataPartStandardSchemeFactory implements SchemeFactory {
    public CCResultSetMetaDataPartStandardScheme getScheme() {
      return new CCResultSetMetaDataPartStandardScheme();
    }
  }

  private static class CCResultSetMetaDataPartStandardScheme extends StandardScheme<CCResultSetMetaDataPart> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CCResultSetMetaDataPart struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CATALOG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.catalogName = iprot.readString();
              struct.setCatalogNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_CLASS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnClassName = iprot.readString();
              struct.setColumnClassNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMN_DISPLAY_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnDisplaySize = iprot.readI32();
              struct.setColumnDisplaySizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLUMN_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnLabel = iprot.readString();
              struct.setColumnLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnName = iprot.readString();
              struct.setColumnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COLUMN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnType = iprot.readI32();
              struct.setColumnTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COLUMN_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnTypeName = iprot.readString();
              struct.setColumnTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRECISION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.precision = iprot.readI32();
              struct.setPrecisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.scale = iprot.readI32();
              struct.setScaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SCHEMA_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.schemaName = iprot.readString();
              struct.setSchemaNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableName = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // AUTO_INCREMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.autoIncrement = iprot.readBool();
              struct.setAutoIncrementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CASE_SENSITIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.caseSensitive = iprot.readBool();
              struct.setCaseSensitiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.currency = iprot.readBool();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEFINITELY_WRITABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.definitelyWritable = iprot.readBool();
              struct.setDefinitelyWritableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // NULLABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nullable = iprot.readI32();
              struct.setNullableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // READ_ONLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.readOnly = iprot.readBool();
              struct.setReadOnlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SEARCHABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.searchable = iprot.readBool();
              struct.setSearchableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SIGNED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.signed = iprot.readBool();
              struct.setSignedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // WRITABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.writable = iprot.readBool();
              struct.setWritableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CCResultSetMetaDataPart struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.catalogName != null) {
        oprot.writeFieldBegin(CATALOG_NAME_FIELD_DESC);
        oprot.writeString(struct.catalogName);
        oprot.writeFieldEnd();
      }
      if (struct.columnClassName != null) {
        oprot.writeFieldBegin(COLUMN_CLASS_NAME_FIELD_DESC);
        oprot.writeString(struct.columnClassName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COLUMN_DISPLAY_SIZE_FIELD_DESC);
      oprot.writeI32(struct.columnDisplaySize);
      oprot.writeFieldEnd();
      if (struct.columnLabel != null) {
        oprot.writeFieldBegin(COLUMN_LABEL_FIELD_DESC);
        oprot.writeString(struct.columnLabel);
        oprot.writeFieldEnd();
      }
      if (struct.columnName != null) {
        oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
        oprot.writeString(struct.columnName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COLUMN_TYPE_FIELD_DESC);
      oprot.writeI32(struct.columnType);
      oprot.writeFieldEnd();
      if (struct.columnTypeName != null) {
        oprot.writeFieldBegin(COLUMN_TYPE_NAME_FIELD_DESC);
        oprot.writeString(struct.columnTypeName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRECISION_FIELD_DESC);
      oprot.writeI32(struct.precision);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCALE_FIELD_DESC);
      oprot.writeI32(struct.scale);
      oprot.writeFieldEnd();
      if (struct.schemaName != null) {
        oprot.writeFieldBegin(SCHEMA_NAME_FIELD_DESC);
        oprot.writeString(struct.schemaName);
        oprot.writeFieldEnd();
      }
      if (struct.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.tableName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AUTO_INCREMENT_FIELD_DESC);
      oprot.writeBool(struct.autoIncrement);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASE_SENSITIVE_FIELD_DESC);
      oprot.writeBool(struct.caseSensitive);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
      oprot.writeBool(struct.currency);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEFINITELY_WRITABLE_FIELD_DESC);
      oprot.writeBool(struct.definitelyWritable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NULLABLE_FIELD_DESC);
      oprot.writeI32(struct.nullable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(READ_ONLY_FIELD_DESC);
      oprot.writeBool(struct.readOnly);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEARCHABLE_FIELD_DESC);
      oprot.writeBool(struct.searchable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIGNED_FIELD_DESC);
      oprot.writeBool(struct.signed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WRITABLE_FIELD_DESC);
      oprot.writeBool(struct.writable);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CCResultSetMetaDataPartTupleSchemeFactory implements SchemeFactory {
    public CCResultSetMetaDataPartTupleScheme getScheme() {
      return new CCResultSetMetaDataPartTupleScheme();
    }
  }

  private static class CCResultSetMetaDataPartTupleScheme extends TupleScheme<CCResultSetMetaDataPart> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CCResultSetMetaDataPart struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCatalogName()) {
        optionals.set(0);
      }
      if (struct.isSetColumnClassName()) {
        optionals.set(1);
      }
      if (struct.isSetColumnDisplaySize()) {
        optionals.set(2);
      }
      if (struct.isSetColumnLabel()) {
        optionals.set(3);
      }
      if (struct.isSetColumnName()) {
        optionals.set(4);
      }
      if (struct.isSetColumnType()) {
        optionals.set(5);
      }
      if (struct.isSetColumnTypeName()) {
        optionals.set(6);
      }
      if (struct.isSetPrecision()) {
        optionals.set(7);
      }
      if (struct.isSetScale()) {
        optionals.set(8);
      }
      if (struct.isSetSchemaName()) {
        optionals.set(9);
      }
      if (struct.isSetTableName()) {
        optionals.set(10);
      }
      if (struct.isSetAutoIncrement()) {
        optionals.set(11);
      }
      if (struct.isSetCaseSensitive()) {
        optionals.set(12);
      }
      if (struct.isSetCurrency()) {
        optionals.set(13);
      }
      if (struct.isSetDefinitelyWritable()) {
        optionals.set(14);
      }
      if (struct.isSetNullable()) {
        optionals.set(15);
      }
      if (struct.isSetReadOnly()) {
        optionals.set(16);
      }
      if (struct.isSetSearchable()) {
        optionals.set(17);
      }
      if (struct.isSetSigned()) {
        optionals.set(18);
      }
      if (struct.isSetWritable()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetCatalogName()) {
        oprot.writeString(struct.catalogName);
      }
      if (struct.isSetColumnClassName()) {
        oprot.writeString(struct.columnClassName);
      }
      if (struct.isSetColumnDisplaySize()) {
        oprot.writeI32(struct.columnDisplaySize);
      }
      if (struct.isSetColumnLabel()) {
        oprot.writeString(struct.columnLabel);
      }
      if (struct.isSetColumnName()) {
        oprot.writeString(struct.columnName);
      }
      if (struct.isSetColumnType()) {
        oprot.writeI32(struct.columnType);
      }
      if (struct.isSetColumnTypeName()) {
        oprot.writeString(struct.columnTypeName);
      }
      if (struct.isSetPrecision()) {
        oprot.writeI32(struct.precision);
      }
      if (struct.isSetScale()) {
        oprot.writeI32(struct.scale);
      }
      if (struct.isSetSchemaName()) {
        oprot.writeString(struct.schemaName);
      }
      if (struct.isSetTableName()) {
        oprot.writeString(struct.tableName);
      }
      if (struct.isSetAutoIncrement()) {
        oprot.writeBool(struct.autoIncrement);
      }
      if (struct.isSetCaseSensitive()) {
        oprot.writeBool(struct.caseSensitive);
      }
      if (struct.isSetCurrency()) {
        oprot.writeBool(struct.currency);
      }
      if (struct.isSetDefinitelyWritable()) {
        oprot.writeBool(struct.definitelyWritable);
      }
      if (struct.isSetNullable()) {
        oprot.writeI32(struct.nullable);
      }
      if (struct.isSetReadOnly()) {
        oprot.writeBool(struct.readOnly);
      }
      if (struct.isSetSearchable()) {
        oprot.writeBool(struct.searchable);
      }
      if (struct.isSetSigned()) {
        oprot.writeBool(struct.signed);
      }
      if (struct.isSetWritable()) {
        oprot.writeBool(struct.writable);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CCResultSetMetaDataPart struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.catalogName = iprot.readString();
        struct.setCatalogNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.columnClassName = iprot.readString();
        struct.setColumnClassNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.columnDisplaySize = iprot.readI32();
        struct.setColumnDisplaySizeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.columnLabel = iprot.readString();
        struct.setColumnLabelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.columnName = iprot.readString();
        struct.setColumnNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.columnType = iprot.readI32();
        struct.setColumnTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.columnTypeName = iprot.readString();
        struct.setColumnTypeNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.precision = iprot.readI32();
        struct.setPrecisionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.scale = iprot.readI32();
        struct.setScaleIsSet(true);
      }
      if (incoming.get(9)) {
        struct.schemaName = iprot.readString();
        struct.setSchemaNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.tableName = iprot.readString();
        struct.setTableNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.autoIncrement = iprot.readBool();
        struct.setAutoIncrementIsSet(true);
      }
      if (incoming.get(12)) {
        struct.caseSensitive = iprot.readBool();
        struct.setCaseSensitiveIsSet(true);
      }
      if (incoming.get(13)) {
        struct.currency = iprot.readBool();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(14)) {
        struct.definitelyWritable = iprot.readBool();
        struct.setDefinitelyWritableIsSet(true);
      }
      if (incoming.get(15)) {
        struct.nullable = iprot.readI32();
        struct.setNullableIsSet(true);
      }
      if (incoming.get(16)) {
        struct.readOnly = iprot.readBool();
        struct.setReadOnlyIsSet(true);
      }
      if (incoming.get(17)) {
        struct.searchable = iprot.readBool();
        struct.setSearchableIsSet(true);
      }
      if (incoming.get(18)) {
        struct.signed = iprot.readBool();
        struct.setSignedIsSet(true);
      }
      if (incoming.get(19)) {
        struct.writable = iprot.readBool();
        struct.setWritableIsSet(true);
      }
    }
  }

}

