/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package driver.io;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CCStaticMetaData implements org.apache.thrift.TBase<CCStaticMetaData, CCStaticMetaData._Fields>, java.io.Serializable, Cloneable, Comparable<CCStaticMetaData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CCStaticMetaData");

  private static final org.apache.thrift.protocol.TField DATABASE_MAJOR_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("databaseMajorVersion", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DATABASE_MINOR_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("databaseMinorVersion", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DATABASE_PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("databaseProductName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DATABASE_PRODUCT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("databaseProductVersion", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DEFAULT_TRANSACTION_ISOLATION_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultTransactionIsolation", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IDENTIFIER_QUOTE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("identifierQuoteString", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SUPPORTS_CATALOGS_IN_TABLE_DEFINITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("supportsCatalogsInTableDefinitions", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField SUPPORTS_SAVEPOINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("supportsSavepoints", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField SUPPORTS_SCHEMAS_IN_DATA_MANIPULATION_FIELD_DESC = new org.apache.thrift.protocol.TField("supportsSchemasInDataManipulation", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField SUPPORTS_SCHEMAS_IN_TABLE_DEFINITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("supportsSchemasInTableDefinitions", org.apache.thrift.protocol.TType.BOOL, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CCStaticMetaDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CCStaticMetaDataTupleSchemeFactory());
  }

  public int databaseMajorVersion; // required
  public int databaseMinorVersion; // required
  public String databaseProductName; // required
  public String databaseProductVersion; // required
  public int defaultTransactionIsolation; // required
  public String identifierQuoteString; // required
  public boolean supportsCatalogsInTableDefinitions; // required
  public boolean supportsSavepoints; // required
  public boolean supportsSchemasInDataManipulation; // required
  public boolean supportsSchemasInTableDefinitions; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATABASE_MAJOR_VERSION((short)1, "databaseMajorVersion"),
    DATABASE_MINOR_VERSION((short)2, "databaseMinorVersion"),
    DATABASE_PRODUCT_NAME((short)3, "databaseProductName"),
    DATABASE_PRODUCT_VERSION((short)4, "databaseProductVersion"),
    DEFAULT_TRANSACTION_ISOLATION((short)5, "defaultTransactionIsolation"),
    IDENTIFIER_QUOTE_STRING((short)6, "identifierQuoteString"),
    SUPPORTS_CATALOGS_IN_TABLE_DEFINITIONS((short)7, "supportsCatalogsInTableDefinitions"),
    SUPPORTS_SAVEPOINTS((short)8, "supportsSavepoints"),
    SUPPORTS_SCHEMAS_IN_DATA_MANIPULATION((short)9, "supportsSchemasInDataManipulation"),
    SUPPORTS_SCHEMAS_IN_TABLE_DEFINITIONS((short)10, "supportsSchemasInTableDefinitions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATABASE_MAJOR_VERSION
          return DATABASE_MAJOR_VERSION;
        case 2: // DATABASE_MINOR_VERSION
          return DATABASE_MINOR_VERSION;
        case 3: // DATABASE_PRODUCT_NAME
          return DATABASE_PRODUCT_NAME;
        case 4: // DATABASE_PRODUCT_VERSION
          return DATABASE_PRODUCT_VERSION;
        case 5: // DEFAULT_TRANSACTION_ISOLATION
          return DEFAULT_TRANSACTION_ISOLATION;
        case 6: // IDENTIFIER_QUOTE_STRING
          return IDENTIFIER_QUOTE_STRING;
        case 7: // SUPPORTS_CATALOGS_IN_TABLE_DEFINITIONS
          return SUPPORTS_CATALOGS_IN_TABLE_DEFINITIONS;
        case 8: // SUPPORTS_SAVEPOINTS
          return SUPPORTS_SAVEPOINTS;
        case 9: // SUPPORTS_SCHEMAS_IN_DATA_MANIPULATION
          return SUPPORTS_SCHEMAS_IN_DATA_MANIPULATION;
        case 10: // SUPPORTS_SCHEMAS_IN_TABLE_DEFINITIONS
          return SUPPORTS_SCHEMAS_IN_TABLE_DEFINITIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DATABASEMAJORVERSION_ISSET_ID = 0;
  private static final int __DATABASEMINORVERSION_ISSET_ID = 1;
  private static final int __DEFAULTTRANSACTIONISOLATION_ISSET_ID = 2;
  private static final int __SUPPORTSCATALOGSINTABLEDEFINITIONS_ISSET_ID = 3;
  private static final int __SUPPORTSSAVEPOINTS_ISSET_ID = 4;
  private static final int __SUPPORTSSCHEMASINDATAMANIPULATION_ISSET_ID = 5;
  private static final int __SUPPORTSSCHEMASINTABLEDEFINITIONS_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATABASE_MAJOR_VERSION, new org.apache.thrift.meta_data.FieldMetaData("databaseMajorVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATABASE_MINOR_VERSION, new org.apache.thrift.meta_data.FieldMetaData("databaseMinorVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATABASE_PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("databaseProductName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATABASE_PRODUCT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("databaseProductVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFAULT_TRANSACTION_ISOLATION, new org.apache.thrift.meta_data.FieldMetaData("defaultTransactionIsolation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IDENTIFIER_QUOTE_STRING, new org.apache.thrift.meta_data.FieldMetaData("identifierQuoteString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUPPORTS_CATALOGS_IN_TABLE_DEFINITIONS, new org.apache.thrift.meta_data.FieldMetaData("supportsCatalogsInTableDefinitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SUPPORTS_SAVEPOINTS, new org.apache.thrift.meta_data.FieldMetaData("supportsSavepoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SUPPORTS_SCHEMAS_IN_DATA_MANIPULATION, new org.apache.thrift.meta_data.FieldMetaData("supportsSchemasInDataManipulation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SUPPORTS_SCHEMAS_IN_TABLE_DEFINITIONS, new org.apache.thrift.meta_data.FieldMetaData("supportsSchemasInTableDefinitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CCStaticMetaData.class, metaDataMap);
  }

  public CCStaticMetaData() {
  }

  public CCStaticMetaData(
    int databaseMajorVersion,
    int databaseMinorVersion,
    String databaseProductName,
    String databaseProductVersion,
    int defaultTransactionIsolation,
    String identifierQuoteString,
    boolean supportsCatalogsInTableDefinitions,
    boolean supportsSavepoints,
    boolean supportsSchemasInDataManipulation,
    boolean supportsSchemasInTableDefinitions)
  {
    this();
    this.databaseMajorVersion = databaseMajorVersion;
    setDatabaseMajorVersionIsSet(true);
    this.databaseMinorVersion = databaseMinorVersion;
    setDatabaseMinorVersionIsSet(true);
    this.databaseProductName = databaseProductName;
    this.databaseProductVersion = databaseProductVersion;
    this.defaultTransactionIsolation = defaultTransactionIsolation;
    setDefaultTransactionIsolationIsSet(true);
    this.identifierQuoteString = identifierQuoteString;
    this.supportsCatalogsInTableDefinitions = supportsCatalogsInTableDefinitions;
    setSupportsCatalogsInTableDefinitionsIsSet(true);
    this.supportsSavepoints = supportsSavepoints;
    setSupportsSavepointsIsSet(true);
    this.supportsSchemasInDataManipulation = supportsSchemasInDataManipulation;
    setSupportsSchemasInDataManipulationIsSet(true);
    this.supportsSchemasInTableDefinitions = supportsSchemasInTableDefinitions;
    setSupportsSchemasInTableDefinitionsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CCStaticMetaData(CCStaticMetaData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.databaseMajorVersion = other.databaseMajorVersion;
    this.databaseMinorVersion = other.databaseMinorVersion;
    if (other.isSetDatabaseProductName()) {
      this.databaseProductName = other.databaseProductName;
    }
    if (other.isSetDatabaseProductVersion()) {
      this.databaseProductVersion = other.databaseProductVersion;
    }
    this.defaultTransactionIsolation = other.defaultTransactionIsolation;
    if (other.isSetIdentifierQuoteString()) {
      this.identifierQuoteString = other.identifierQuoteString;
    }
    this.supportsCatalogsInTableDefinitions = other.supportsCatalogsInTableDefinitions;
    this.supportsSavepoints = other.supportsSavepoints;
    this.supportsSchemasInDataManipulation = other.supportsSchemasInDataManipulation;
    this.supportsSchemasInTableDefinitions = other.supportsSchemasInTableDefinitions;
  }

  public CCStaticMetaData deepCopy() {
    return new CCStaticMetaData(this);
  }

  @Override
  public void clear() {
    setDatabaseMajorVersionIsSet(false);
    this.databaseMajorVersion = 0;
    setDatabaseMinorVersionIsSet(false);
    this.databaseMinorVersion = 0;
    this.databaseProductName = null;
    this.databaseProductVersion = null;
    setDefaultTransactionIsolationIsSet(false);
    this.defaultTransactionIsolation = 0;
    this.identifierQuoteString = null;
    setSupportsCatalogsInTableDefinitionsIsSet(false);
    this.supportsCatalogsInTableDefinitions = false;
    setSupportsSavepointsIsSet(false);
    this.supportsSavepoints = false;
    setSupportsSchemasInDataManipulationIsSet(false);
    this.supportsSchemasInDataManipulation = false;
    setSupportsSchemasInTableDefinitionsIsSet(false);
    this.supportsSchemasInTableDefinitions = false;
  }

  public int getDatabaseMajorVersion() {
    return this.databaseMajorVersion;
  }

  public CCStaticMetaData setDatabaseMajorVersion(int databaseMajorVersion) {
    this.databaseMajorVersion = databaseMajorVersion;
    setDatabaseMajorVersionIsSet(true);
    return this;
  }

  public void unsetDatabaseMajorVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATABASEMAJORVERSION_ISSET_ID);
  }

  /** Returns true if field databaseMajorVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabaseMajorVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __DATABASEMAJORVERSION_ISSET_ID);
  }

  public void setDatabaseMajorVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATABASEMAJORVERSION_ISSET_ID, value);
  }

  public int getDatabaseMinorVersion() {
    return this.databaseMinorVersion;
  }

  public CCStaticMetaData setDatabaseMinorVersion(int databaseMinorVersion) {
    this.databaseMinorVersion = databaseMinorVersion;
    setDatabaseMinorVersionIsSet(true);
    return this;
  }

  public void unsetDatabaseMinorVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATABASEMINORVERSION_ISSET_ID);
  }

  /** Returns true if field databaseMinorVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabaseMinorVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __DATABASEMINORVERSION_ISSET_ID);
  }

  public void setDatabaseMinorVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATABASEMINORVERSION_ISSET_ID, value);
  }

  public String getDatabaseProductName() {
    return this.databaseProductName;
  }

  public CCStaticMetaData setDatabaseProductName(String databaseProductName) {
    this.databaseProductName = databaseProductName;
    return this;
  }

  public void unsetDatabaseProductName() {
    this.databaseProductName = null;
  }

  /** Returns true if field databaseProductName is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabaseProductName() {
    return this.databaseProductName != null;
  }

  public void setDatabaseProductNameIsSet(boolean value) {
    if (!value) {
      this.databaseProductName = null;
    }
  }

  public String getDatabaseProductVersion() {
    return this.databaseProductVersion;
  }

  public CCStaticMetaData setDatabaseProductVersion(String databaseProductVersion) {
    this.databaseProductVersion = databaseProductVersion;
    return this;
  }

  public void unsetDatabaseProductVersion() {
    this.databaseProductVersion = null;
  }

  /** Returns true if field databaseProductVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabaseProductVersion() {
    return this.databaseProductVersion != null;
  }

  public void setDatabaseProductVersionIsSet(boolean value) {
    if (!value) {
      this.databaseProductVersion = null;
    }
  }

  public int getDefaultTransactionIsolation() {
    return this.defaultTransactionIsolation;
  }

  public CCStaticMetaData setDefaultTransactionIsolation(int defaultTransactionIsolation) {
    this.defaultTransactionIsolation = defaultTransactionIsolation;
    setDefaultTransactionIsolationIsSet(true);
    return this;
  }

  public void unsetDefaultTransactionIsolation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEFAULTTRANSACTIONISOLATION_ISSET_ID);
  }

  /** Returns true if field defaultTransactionIsolation is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultTransactionIsolation() {
    return EncodingUtils.testBit(__isset_bitfield, __DEFAULTTRANSACTIONISOLATION_ISSET_ID);
  }

  public void setDefaultTransactionIsolationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEFAULTTRANSACTIONISOLATION_ISSET_ID, value);
  }

  public String getIdentifierQuoteString() {
    return this.identifierQuoteString;
  }

  public CCStaticMetaData setIdentifierQuoteString(String identifierQuoteString) {
    this.identifierQuoteString = identifierQuoteString;
    return this;
  }

  public void unsetIdentifierQuoteString() {
    this.identifierQuoteString = null;
  }

  /** Returns true if field identifierQuoteString is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifierQuoteString() {
    return this.identifierQuoteString != null;
  }

  public void setIdentifierQuoteStringIsSet(boolean value) {
    if (!value) {
      this.identifierQuoteString = null;
    }
  }

  public boolean isSupportsCatalogsInTableDefinitions() {
    return this.supportsCatalogsInTableDefinitions;
  }

  public CCStaticMetaData setSupportsCatalogsInTableDefinitions(boolean supportsCatalogsInTableDefinitions) {
    this.supportsCatalogsInTableDefinitions = supportsCatalogsInTableDefinitions;
    setSupportsCatalogsInTableDefinitionsIsSet(true);
    return this;
  }

  public void unsetSupportsCatalogsInTableDefinitions() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUPPORTSCATALOGSINTABLEDEFINITIONS_ISSET_ID);
  }

  /** Returns true if field supportsCatalogsInTableDefinitions is set (has been assigned a value) and false otherwise */
  public boolean isSetSupportsCatalogsInTableDefinitions() {
    return EncodingUtils.testBit(__isset_bitfield, __SUPPORTSCATALOGSINTABLEDEFINITIONS_ISSET_ID);
  }

  public void setSupportsCatalogsInTableDefinitionsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUPPORTSCATALOGSINTABLEDEFINITIONS_ISSET_ID, value);
  }

  public boolean isSupportsSavepoints() {
    return this.supportsSavepoints;
  }

  public CCStaticMetaData setSupportsSavepoints(boolean supportsSavepoints) {
    this.supportsSavepoints = supportsSavepoints;
    setSupportsSavepointsIsSet(true);
    return this;
  }

  public void unsetSupportsSavepoints() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUPPORTSSAVEPOINTS_ISSET_ID);
  }

  /** Returns true if field supportsSavepoints is set (has been assigned a value) and false otherwise */
  public boolean isSetSupportsSavepoints() {
    return EncodingUtils.testBit(__isset_bitfield, __SUPPORTSSAVEPOINTS_ISSET_ID);
  }

  public void setSupportsSavepointsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUPPORTSSAVEPOINTS_ISSET_ID, value);
  }

  public boolean isSupportsSchemasInDataManipulation() {
    return this.supportsSchemasInDataManipulation;
  }

  public CCStaticMetaData setSupportsSchemasInDataManipulation(boolean supportsSchemasInDataManipulation) {
    this.supportsSchemasInDataManipulation = supportsSchemasInDataManipulation;
    setSupportsSchemasInDataManipulationIsSet(true);
    return this;
  }

  public void unsetSupportsSchemasInDataManipulation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUPPORTSSCHEMASINDATAMANIPULATION_ISSET_ID);
  }

  /** Returns true if field supportsSchemasInDataManipulation is set (has been assigned a value) and false otherwise */
  public boolean isSetSupportsSchemasInDataManipulation() {
    return EncodingUtils.testBit(__isset_bitfield, __SUPPORTSSCHEMASINDATAMANIPULATION_ISSET_ID);
  }

  public void setSupportsSchemasInDataManipulationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUPPORTSSCHEMASINDATAMANIPULATION_ISSET_ID, value);
  }

  public boolean isSupportsSchemasInTableDefinitions() {
    return this.supportsSchemasInTableDefinitions;
  }

  public CCStaticMetaData setSupportsSchemasInTableDefinitions(boolean supportsSchemasInTableDefinitions) {
    this.supportsSchemasInTableDefinitions = supportsSchemasInTableDefinitions;
    setSupportsSchemasInTableDefinitionsIsSet(true);
    return this;
  }

  public void unsetSupportsSchemasInTableDefinitions() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUPPORTSSCHEMASINTABLEDEFINITIONS_ISSET_ID);
  }

  /** Returns true if field supportsSchemasInTableDefinitions is set (has been assigned a value) and false otherwise */
  public boolean isSetSupportsSchemasInTableDefinitions() {
    return EncodingUtils.testBit(__isset_bitfield, __SUPPORTSSCHEMASINTABLEDEFINITIONS_ISSET_ID);
  }

  public void setSupportsSchemasInTableDefinitionsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUPPORTSSCHEMASINTABLEDEFINITIONS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATABASE_MAJOR_VERSION:
      if (value == null) {
        unsetDatabaseMajorVersion();
      } else {
        setDatabaseMajorVersion((Integer)value);
      }
      break;

    case DATABASE_MINOR_VERSION:
      if (value == null) {
        unsetDatabaseMinorVersion();
      } else {
        setDatabaseMinorVersion((Integer)value);
      }
      break;

    case DATABASE_PRODUCT_NAME:
      if (value == null) {
        unsetDatabaseProductName();
      } else {
        setDatabaseProductName((String)value);
      }
      break;

    case DATABASE_PRODUCT_VERSION:
      if (value == null) {
        unsetDatabaseProductVersion();
      } else {
        setDatabaseProductVersion((String)value);
      }
      break;

    case DEFAULT_TRANSACTION_ISOLATION:
      if (value == null) {
        unsetDefaultTransactionIsolation();
      } else {
        setDefaultTransactionIsolation((Integer)value);
      }
      break;

    case IDENTIFIER_QUOTE_STRING:
      if (value == null) {
        unsetIdentifierQuoteString();
      } else {
        setIdentifierQuoteString((String)value);
      }
      break;

    case SUPPORTS_CATALOGS_IN_TABLE_DEFINITIONS:
      if (value == null) {
        unsetSupportsCatalogsInTableDefinitions();
      } else {
        setSupportsCatalogsInTableDefinitions((Boolean)value);
      }
      break;

    case SUPPORTS_SAVEPOINTS:
      if (value == null) {
        unsetSupportsSavepoints();
      } else {
        setSupportsSavepoints((Boolean)value);
      }
      break;

    case SUPPORTS_SCHEMAS_IN_DATA_MANIPULATION:
      if (value == null) {
        unsetSupportsSchemasInDataManipulation();
      } else {
        setSupportsSchemasInDataManipulation((Boolean)value);
      }
      break;

    case SUPPORTS_SCHEMAS_IN_TABLE_DEFINITIONS:
      if (value == null) {
        unsetSupportsSchemasInTableDefinitions();
      } else {
        setSupportsSchemasInTableDefinitions((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATABASE_MAJOR_VERSION:
      return Integer.valueOf(getDatabaseMajorVersion());

    case DATABASE_MINOR_VERSION:
      return Integer.valueOf(getDatabaseMinorVersion());

    case DATABASE_PRODUCT_NAME:
      return getDatabaseProductName();

    case DATABASE_PRODUCT_VERSION:
      return getDatabaseProductVersion();

    case DEFAULT_TRANSACTION_ISOLATION:
      return Integer.valueOf(getDefaultTransactionIsolation());

    case IDENTIFIER_QUOTE_STRING:
      return getIdentifierQuoteString();

    case SUPPORTS_CATALOGS_IN_TABLE_DEFINITIONS:
      return Boolean.valueOf(isSupportsCatalogsInTableDefinitions());

    case SUPPORTS_SAVEPOINTS:
      return Boolean.valueOf(isSupportsSavepoints());

    case SUPPORTS_SCHEMAS_IN_DATA_MANIPULATION:
      return Boolean.valueOf(isSupportsSchemasInDataManipulation());

    case SUPPORTS_SCHEMAS_IN_TABLE_DEFINITIONS:
      return Boolean.valueOf(isSupportsSchemasInTableDefinitions());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATABASE_MAJOR_VERSION:
      return isSetDatabaseMajorVersion();
    case DATABASE_MINOR_VERSION:
      return isSetDatabaseMinorVersion();
    case DATABASE_PRODUCT_NAME:
      return isSetDatabaseProductName();
    case DATABASE_PRODUCT_VERSION:
      return isSetDatabaseProductVersion();
    case DEFAULT_TRANSACTION_ISOLATION:
      return isSetDefaultTransactionIsolation();
    case IDENTIFIER_QUOTE_STRING:
      return isSetIdentifierQuoteString();
    case SUPPORTS_CATALOGS_IN_TABLE_DEFINITIONS:
      return isSetSupportsCatalogsInTableDefinitions();
    case SUPPORTS_SAVEPOINTS:
      return isSetSupportsSavepoints();
    case SUPPORTS_SCHEMAS_IN_DATA_MANIPULATION:
      return isSetSupportsSchemasInDataManipulation();
    case SUPPORTS_SCHEMAS_IN_TABLE_DEFINITIONS:
      return isSetSupportsSchemasInTableDefinitions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CCStaticMetaData)
      return this.equals((CCStaticMetaData)that);
    return false;
  }

  public boolean equals(CCStaticMetaData that) {
    if (that == null)
      return false;

    boolean this_present_databaseMajorVersion = true;
    boolean that_present_databaseMajorVersion = true;
    if (this_present_databaseMajorVersion || that_present_databaseMajorVersion) {
      if (!(this_present_databaseMajorVersion && that_present_databaseMajorVersion))
        return false;
      if (this.databaseMajorVersion != that.databaseMajorVersion)
        return false;
    }

    boolean this_present_databaseMinorVersion = true;
    boolean that_present_databaseMinorVersion = true;
    if (this_present_databaseMinorVersion || that_present_databaseMinorVersion) {
      if (!(this_present_databaseMinorVersion && that_present_databaseMinorVersion))
        return false;
      if (this.databaseMinorVersion != that.databaseMinorVersion)
        return false;
    }

    boolean this_present_databaseProductName = true && this.isSetDatabaseProductName();
    boolean that_present_databaseProductName = true && that.isSetDatabaseProductName();
    if (this_present_databaseProductName || that_present_databaseProductName) {
      if (!(this_present_databaseProductName && that_present_databaseProductName))
        return false;
      if (!this.databaseProductName.equals(that.databaseProductName))
        return false;
    }

    boolean this_present_databaseProductVersion = true && this.isSetDatabaseProductVersion();
    boolean that_present_databaseProductVersion = true && that.isSetDatabaseProductVersion();
    if (this_present_databaseProductVersion || that_present_databaseProductVersion) {
      if (!(this_present_databaseProductVersion && that_present_databaseProductVersion))
        return false;
      if (!this.databaseProductVersion.equals(that.databaseProductVersion))
        return false;
    }

    boolean this_present_defaultTransactionIsolation = true;
    boolean that_present_defaultTransactionIsolation = true;
    if (this_present_defaultTransactionIsolation || that_present_defaultTransactionIsolation) {
      if (!(this_present_defaultTransactionIsolation && that_present_defaultTransactionIsolation))
        return false;
      if (this.defaultTransactionIsolation != that.defaultTransactionIsolation)
        return false;
    }

    boolean this_present_identifierQuoteString = true && this.isSetIdentifierQuoteString();
    boolean that_present_identifierQuoteString = true && that.isSetIdentifierQuoteString();
    if (this_present_identifierQuoteString || that_present_identifierQuoteString) {
      if (!(this_present_identifierQuoteString && that_present_identifierQuoteString))
        return false;
      if (!this.identifierQuoteString.equals(that.identifierQuoteString))
        return false;
    }

    boolean this_present_supportsCatalogsInTableDefinitions = true;
    boolean that_present_supportsCatalogsInTableDefinitions = true;
    if (this_present_supportsCatalogsInTableDefinitions || that_present_supportsCatalogsInTableDefinitions) {
      if (!(this_present_supportsCatalogsInTableDefinitions && that_present_supportsCatalogsInTableDefinitions))
        return false;
      if (this.supportsCatalogsInTableDefinitions != that.supportsCatalogsInTableDefinitions)
        return false;
    }

    boolean this_present_supportsSavepoints = true;
    boolean that_present_supportsSavepoints = true;
    if (this_present_supportsSavepoints || that_present_supportsSavepoints) {
      if (!(this_present_supportsSavepoints && that_present_supportsSavepoints))
        return false;
      if (this.supportsSavepoints != that.supportsSavepoints)
        return false;
    }

    boolean this_present_supportsSchemasInDataManipulation = true;
    boolean that_present_supportsSchemasInDataManipulation = true;
    if (this_present_supportsSchemasInDataManipulation || that_present_supportsSchemasInDataManipulation) {
      if (!(this_present_supportsSchemasInDataManipulation && that_present_supportsSchemasInDataManipulation))
        return false;
      if (this.supportsSchemasInDataManipulation != that.supportsSchemasInDataManipulation)
        return false;
    }

    boolean this_present_supportsSchemasInTableDefinitions = true;
    boolean that_present_supportsSchemasInTableDefinitions = true;
    if (this_present_supportsSchemasInTableDefinitions || that_present_supportsSchemasInTableDefinitions) {
      if (!(this_present_supportsSchemasInTableDefinitions && that_present_supportsSchemasInTableDefinitions))
        return false;
      if (this.supportsSchemasInTableDefinitions != that.supportsSchemasInTableDefinitions)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CCStaticMetaData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDatabaseMajorVersion()).compareTo(other.isSetDatabaseMajorVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabaseMajorVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.databaseMajorVersion, other.databaseMajorVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatabaseMinorVersion()).compareTo(other.isSetDatabaseMinorVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabaseMinorVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.databaseMinorVersion, other.databaseMinorVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatabaseProductName()).compareTo(other.isSetDatabaseProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabaseProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.databaseProductName, other.databaseProductName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatabaseProductVersion()).compareTo(other.isSetDatabaseProductVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabaseProductVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.databaseProductVersion, other.databaseProductVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultTransactionIsolation()).compareTo(other.isSetDefaultTransactionIsolation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultTransactionIsolation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultTransactionIsolation, other.defaultTransactionIsolation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentifierQuoteString()).compareTo(other.isSetIdentifierQuoteString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifierQuoteString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifierQuoteString, other.identifierQuoteString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupportsCatalogsInTableDefinitions()).compareTo(other.isSetSupportsCatalogsInTableDefinitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupportsCatalogsInTableDefinitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supportsCatalogsInTableDefinitions, other.supportsCatalogsInTableDefinitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupportsSavepoints()).compareTo(other.isSetSupportsSavepoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupportsSavepoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supportsSavepoints, other.supportsSavepoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupportsSchemasInDataManipulation()).compareTo(other.isSetSupportsSchemasInDataManipulation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupportsSchemasInDataManipulation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supportsSchemasInDataManipulation, other.supportsSchemasInDataManipulation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupportsSchemasInTableDefinitions()).compareTo(other.isSetSupportsSchemasInTableDefinitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupportsSchemasInTableDefinitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supportsSchemasInTableDefinitions, other.supportsSchemasInTableDefinitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CCStaticMetaData(");
    boolean first = true;

    sb.append("databaseMajorVersion:");
    sb.append(this.databaseMajorVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("databaseMinorVersion:");
    sb.append(this.databaseMinorVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("databaseProductName:");
    if (this.databaseProductName == null) {
      sb.append("null");
    } else {
      sb.append(this.databaseProductName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("databaseProductVersion:");
    if (this.databaseProductVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.databaseProductVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultTransactionIsolation:");
    sb.append(this.defaultTransactionIsolation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("identifierQuoteString:");
    if (this.identifierQuoteString == null) {
      sb.append("null");
    } else {
      sb.append(this.identifierQuoteString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("supportsCatalogsInTableDefinitions:");
    sb.append(this.supportsCatalogsInTableDefinitions);
    first = false;
    if (!first) sb.append(", ");
    sb.append("supportsSavepoints:");
    sb.append(this.supportsSavepoints);
    first = false;
    if (!first) sb.append(", ");
    sb.append("supportsSchemasInDataManipulation:");
    sb.append(this.supportsSchemasInDataManipulation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("supportsSchemasInTableDefinitions:");
    sb.append(this.supportsSchemasInTableDefinitions);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CCStaticMetaDataStandardSchemeFactory implements SchemeFactory {
    public CCStaticMetaDataStandardScheme getScheme() {
      return new CCStaticMetaDataStandardScheme();
    }
  }

  private static class CCStaticMetaDataStandardScheme extends StandardScheme<CCStaticMetaData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CCStaticMetaData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATABASE_MAJOR_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.databaseMajorVersion = iprot.readI32();
              struct.setDatabaseMajorVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATABASE_MINOR_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.databaseMinorVersion = iprot.readI32();
              struct.setDatabaseMinorVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATABASE_PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.databaseProductName = iprot.readString();
              struct.setDatabaseProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATABASE_PRODUCT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.databaseProductVersion = iprot.readString();
              struct.setDatabaseProductVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEFAULT_TRANSACTION_ISOLATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.defaultTransactionIsolation = iprot.readI32();
              struct.setDefaultTransactionIsolationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IDENTIFIER_QUOTE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identifierQuoteString = iprot.readString();
              struct.setIdentifierQuoteStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SUPPORTS_CATALOGS_IN_TABLE_DEFINITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.supportsCatalogsInTableDefinitions = iprot.readBool();
              struct.setSupportsCatalogsInTableDefinitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SUPPORTS_SAVEPOINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.supportsSavepoints = iprot.readBool();
              struct.setSupportsSavepointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SUPPORTS_SCHEMAS_IN_DATA_MANIPULATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.supportsSchemasInDataManipulation = iprot.readBool();
              struct.setSupportsSchemasInDataManipulationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SUPPORTS_SCHEMAS_IN_TABLE_DEFINITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.supportsSchemasInTableDefinitions = iprot.readBool();
              struct.setSupportsSchemasInTableDefinitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CCStaticMetaData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DATABASE_MAJOR_VERSION_FIELD_DESC);
      oprot.writeI32(struct.databaseMajorVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATABASE_MINOR_VERSION_FIELD_DESC);
      oprot.writeI32(struct.databaseMinorVersion);
      oprot.writeFieldEnd();
      if (struct.databaseProductName != null) {
        oprot.writeFieldBegin(DATABASE_PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.databaseProductName);
        oprot.writeFieldEnd();
      }
      if (struct.databaseProductVersion != null) {
        oprot.writeFieldBegin(DATABASE_PRODUCT_VERSION_FIELD_DESC);
        oprot.writeString(struct.databaseProductVersion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEFAULT_TRANSACTION_ISOLATION_FIELD_DESC);
      oprot.writeI32(struct.defaultTransactionIsolation);
      oprot.writeFieldEnd();
      if (struct.identifierQuoteString != null) {
        oprot.writeFieldBegin(IDENTIFIER_QUOTE_STRING_FIELD_DESC);
        oprot.writeString(struct.identifierQuoteString);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUPPORTS_CATALOGS_IN_TABLE_DEFINITIONS_FIELD_DESC);
      oprot.writeBool(struct.supportsCatalogsInTableDefinitions);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUPPORTS_SAVEPOINTS_FIELD_DESC);
      oprot.writeBool(struct.supportsSavepoints);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUPPORTS_SCHEMAS_IN_DATA_MANIPULATION_FIELD_DESC);
      oprot.writeBool(struct.supportsSchemasInDataManipulation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUPPORTS_SCHEMAS_IN_TABLE_DEFINITIONS_FIELD_DESC);
      oprot.writeBool(struct.supportsSchemasInTableDefinitions);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CCStaticMetaDataTupleSchemeFactory implements SchemeFactory {
    public CCStaticMetaDataTupleScheme getScheme() {
      return new CCStaticMetaDataTupleScheme();
    }
  }

  private static class CCStaticMetaDataTupleScheme extends TupleScheme<CCStaticMetaData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CCStaticMetaData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDatabaseMajorVersion()) {
        optionals.set(0);
      }
      if (struct.isSetDatabaseMinorVersion()) {
        optionals.set(1);
      }
      if (struct.isSetDatabaseProductName()) {
        optionals.set(2);
      }
      if (struct.isSetDatabaseProductVersion()) {
        optionals.set(3);
      }
      if (struct.isSetDefaultTransactionIsolation()) {
        optionals.set(4);
      }
      if (struct.isSetIdentifierQuoteString()) {
        optionals.set(5);
      }
      if (struct.isSetSupportsCatalogsInTableDefinitions()) {
        optionals.set(6);
      }
      if (struct.isSetSupportsSavepoints()) {
        optionals.set(7);
      }
      if (struct.isSetSupportsSchemasInDataManipulation()) {
        optionals.set(8);
      }
      if (struct.isSetSupportsSchemasInTableDefinitions()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetDatabaseMajorVersion()) {
        oprot.writeI32(struct.databaseMajorVersion);
      }
      if (struct.isSetDatabaseMinorVersion()) {
        oprot.writeI32(struct.databaseMinorVersion);
      }
      if (struct.isSetDatabaseProductName()) {
        oprot.writeString(struct.databaseProductName);
      }
      if (struct.isSetDatabaseProductVersion()) {
        oprot.writeString(struct.databaseProductVersion);
      }
      if (struct.isSetDefaultTransactionIsolation()) {
        oprot.writeI32(struct.defaultTransactionIsolation);
      }
      if (struct.isSetIdentifierQuoteString()) {
        oprot.writeString(struct.identifierQuoteString);
      }
      if (struct.isSetSupportsCatalogsInTableDefinitions()) {
        oprot.writeBool(struct.supportsCatalogsInTableDefinitions);
      }
      if (struct.isSetSupportsSavepoints()) {
        oprot.writeBool(struct.supportsSavepoints);
      }
      if (struct.isSetSupportsSchemasInDataManipulation()) {
        oprot.writeBool(struct.supportsSchemasInDataManipulation);
      }
      if (struct.isSetSupportsSchemasInTableDefinitions()) {
        oprot.writeBool(struct.supportsSchemasInTableDefinitions);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CCStaticMetaData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.databaseMajorVersion = iprot.readI32();
        struct.setDatabaseMajorVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.databaseMinorVersion = iprot.readI32();
        struct.setDatabaseMinorVersionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.databaseProductName = iprot.readString();
        struct.setDatabaseProductNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.databaseProductVersion = iprot.readString();
        struct.setDatabaseProductVersionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.defaultTransactionIsolation = iprot.readI32();
        struct.setDefaultTransactionIsolationIsSet(true);
      }
      if (incoming.get(5)) {
        struct.identifierQuoteString = iprot.readString();
        struct.setIdentifierQuoteStringIsSet(true);
      }
      if (incoming.get(6)) {
        struct.supportsCatalogsInTableDefinitions = iprot.readBool();
        struct.setSupportsCatalogsInTableDefinitionsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.supportsSavepoints = iprot.readBool();
        struct.setSupportsSavepointsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.supportsSchemasInDataManipulation = iprot.readBool();
        struct.setSupportsSchemasInDataManipulationIsSet(true);
      }
      if (incoming.get(9)) {
        struct.supportsSchemasInTableDefinitions = iprot.readBool();
        struct.setSupportsSchemasInTableDefinitionsIsSet(true);
      }
    }
  }

}

