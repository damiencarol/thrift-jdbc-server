/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package driver.io;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ConnectionService {

  public interface Iface {

    public CCConnection createConnection(String url, Map<String,String> properties) throws org.apache.thrift.TException;

    public CCStatement createStatement(CCConnection connection) throws org.apache.thrift.TException;

    public CCStaticMetaData connection_getstaticmetadata(CCConnection connection) throws org.apache.thrift.TException;

    public boolean connection_isvalid(CCConnection connection, int timeout) throws org.apache.thrift.TException;

    public void connection_setAutoCommit(CCConnection connection, boolean autoCommit) throws org.apache.thrift.TException;

    public boolean connection_getAutoCommit(CCConnection connection) throws org.apache.thrift.TException;

    public void connection_setTransactionIsolation(CCConnection connection, int level) throws org.apache.thrift.TException;

    public int connection_getTransactionIsolation(CCConnection connection) throws org.apache.thrift.TException;

    public void connection_setReadOnly(CCConnection connection, boolean readOnly) throws org.apache.thrift.TException;

    public boolean connection_getReadOnly(CCConnection connection) throws org.apache.thrift.TException;

    public void connection_setCatalog(CCConnection connection, String catalog) throws CCSQLException, org.apache.thrift.TException;

    public String connection_getCatalog(CCConnection connection) throws CCSQLException, org.apache.thrift.TException;

    public void connection_setSchema(CCConnection connection, String schema) throws CCSQLException, org.apache.thrift.TException;

    public String connection_getSchema(CCConnection connection) throws CCSQLException, org.apache.thrift.TException;

    public String connection_getCatalogSeparator(CCConnection connection) throws org.apache.thrift.TException;

    public String connection_getCatalogTerm(CCConnection connection) throws org.apache.thrift.TException;

    public String connection_getSchemaTerm(CCConnection connection) throws org.apache.thrift.TException;

    public CCResultSet connection_getCatalogs(CCConnection connection) throws org.apache.thrift.TException;

    public CCResultSet connection_getSchemas(CCConnection connection, String catalog, String schemaPattern) throws CCSQLException, org.apache.thrift.TException;

    public CCResultSet connection_getTables(CCConnection connection, String catalog, String schemaPattern, String tableNamePattern, List<String> types) throws org.apache.thrift.TException;

    public CCResultSet connection_getColumns(CCConnection connection, String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws org.apache.thrift.TException;

    public String connection_getSQLKeywords(CCConnection connection) throws org.apache.thrift.TException;

    public CCResultSet connection_getTableTypes(CCConnection connection) throws org.apache.thrift.TException;

    public CCResultSet connection_getTypeInfo(CCConnection connection) throws CCSQLException, org.apache.thrift.TException;

    public void closeConnection(CCConnection connection) throws CCSQLException, org.apache.thrift.TException;

    public void statement_close(CCStatement statement) throws CCSQLException, org.apache.thrift.TException;

    public boolean statement_execute(CCStatement statement, String sql) throws CCSQLException, org.apache.thrift.TException;

    public CCResultSet statement_executeQuery(CCStatement statement, String sql) throws CCSQLException, org.apache.thrift.TException;

    public CCResultSet statement_getResultSet(CCStatement statement) throws CCSQLException, org.apache.thrift.TException;

    public int statement_getUpdateCount(CCStatement statement) throws org.apache.thrift.TException;

    public int statement_getResultSetType(CCStatement statement) throws org.apache.thrift.TException;

    public void statement_cancel(CCStatement statement) throws CCSQLException, org.apache.thrift.TException;

    public statement_getWarnings_return statement_getWarnings(CCStatement statement) throws CCSQLException, org.apache.thrift.TException;

    public void statement_clearWarnings(CCStatement statement) throws CCSQLException, org.apache.thrift.TException;

    public int statement_getMaxRows(CCStatement statement) throws CCSQLException, org.apache.thrift.TException;

    public void statement_setMaxRows(CCStatement statement, int max) throws CCSQLException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createConnection(String url, Map<String,String> properties, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createStatement(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_getstaticmetadata(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_isvalid(CCConnection connection, int timeout, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_setAutoCommit(CCConnection connection, boolean autoCommit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_getAutoCommit(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_setTransactionIsolation(CCConnection connection, int level, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_getTransactionIsolation(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_setReadOnly(CCConnection connection, boolean readOnly, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_getReadOnly(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_setCatalog(CCConnection connection, String catalog, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_getCatalog(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_setSchema(CCConnection connection, String schema, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_getSchema(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_getCatalogSeparator(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_getCatalogTerm(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_getSchemaTerm(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_getCatalogs(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_getSchemas(CCConnection connection, String catalog, String schemaPattern, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_getTables(CCConnection connection, String catalog, String schemaPattern, String tableNamePattern, List<String> types, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_getColumns(CCConnection connection, String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_getSQLKeywords(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_getTableTypes(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connection_getTypeInfo(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void closeConnection(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void statement_close(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void statement_execute(CCStatement statement, String sql, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void statement_executeQuery(CCStatement statement, String sql, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void statement_getResultSet(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void statement_getUpdateCount(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void statement_getResultSetType(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void statement_cancel(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void statement_getWarnings(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void statement_clearWarnings(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void statement_getMaxRows(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void statement_setMaxRows(CCStatement statement, int max, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public CCConnection createConnection(String url, Map<String,String> properties) throws org.apache.thrift.TException
    {
      send_createConnection(url, properties);
      return recv_createConnection();
    }

    public void send_createConnection(String url, Map<String,String> properties) throws org.apache.thrift.TException
    {
      createConnection_args args = new createConnection_args();
      args.setUrl(url);
      args.setProperties(properties);
      sendBase("createConnection", args);
    }

    public CCConnection recv_createConnection() throws org.apache.thrift.TException
    {
      createConnection_result result = new createConnection_result();
      receiveBase(result, "createConnection");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createConnection failed: unknown result");
    }

    public CCStatement createStatement(CCConnection connection) throws org.apache.thrift.TException
    {
      send_createStatement(connection);
      return recv_createStatement();
    }

    public void send_createStatement(CCConnection connection) throws org.apache.thrift.TException
    {
      createStatement_args args = new createStatement_args();
      args.setConnection(connection);
      sendBase("createStatement", args);
    }

    public CCStatement recv_createStatement() throws org.apache.thrift.TException
    {
      createStatement_result result = new createStatement_result();
      receiveBase(result, "createStatement");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createStatement failed: unknown result");
    }

    public CCStaticMetaData connection_getstaticmetadata(CCConnection connection) throws org.apache.thrift.TException
    {
      send_connection_getstaticmetadata(connection);
      return recv_connection_getstaticmetadata();
    }

    public void send_connection_getstaticmetadata(CCConnection connection) throws org.apache.thrift.TException
    {
      connection_getstaticmetadata_args args = new connection_getstaticmetadata_args();
      args.setConnection(connection);
      sendBase("connection_getstaticmetadata", args);
    }

    public CCStaticMetaData recv_connection_getstaticmetadata() throws org.apache.thrift.TException
    {
      connection_getstaticmetadata_result result = new connection_getstaticmetadata_result();
      receiveBase(result, "connection_getstaticmetadata");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connection_getstaticmetadata failed: unknown result");
    }

    public boolean connection_isvalid(CCConnection connection, int timeout) throws org.apache.thrift.TException
    {
      send_connection_isvalid(connection, timeout);
      return recv_connection_isvalid();
    }

    public void send_connection_isvalid(CCConnection connection, int timeout) throws org.apache.thrift.TException
    {
      connection_isvalid_args args = new connection_isvalid_args();
      args.setConnection(connection);
      args.setTimeout(timeout);
      sendBase("connection_isvalid", args);
    }

    public boolean recv_connection_isvalid() throws org.apache.thrift.TException
    {
      connection_isvalid_result result = new connection_isvalid_result();
      receiveBase(result, "connection_isvalid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connection_isvalid failed: unknown result");
    }

    public void connection_setAutoCommit(CCConnection connection, boolean autoCommit) throws org.apache.thrift.TException
    {
      send_connection_setAutoCommit(connection, autoCommit);
      recv_connection_setAutoCommit();
    }

    public void send_connection_setAutoCommit(CCConnection connection, boolean autoCommit) throws org.apache.thrift.TException
    {
      connection_setAutoCommit_args args = new connection_setAutoCommit_args();
      args.setConnection(connection);
      args.setAutoCommit(autoCommit);
      sendBase("connection_setAutoCommit", args);
    }

    public void recv_connection_setAutoCommit() throws org.apache.thrift.TException
    {
      connection_setAutoCommit_result result = new connection_setAutoCommit_result();
      receiveBase(result, "connection_setAutoCommit");
      return;
    }

    public boolean connection_getAutoCommit(CCConnection connection) throws org.apache.thrift.TException
    {
      send_connection_getAutoCommit(connection);
      return recv_connection_getAutoCommit();
    }

    public void send_connection_getAutoCommit(CCConnection connection) throws org.apache.thrift.TException
    {
      connection_getAutoCommit_args args = new connection_getAutoCommit_args();
      args.setConnection(connection);
      sendBase("connection_getAutoCommit", args);
    }

    public boolean recv_connection_getAutoCommit() throws org.apache.thrift.TException
    {
      connection_getAutoCommit_result result = new connection_getAutoCommit_result();
      receiveBase(result, "connection_getAutoCommit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connection_getAutoCommit failed: unknown result");
    }

    public void connection_setTransactionIsolation(CCConnection connection, int level) throws org.apache.thrift.TException
    {
      send_connection_setTransactionIsolation(connection, level);
      recv_connection_setTransactionIsolation();
    }

    public void send_connection_setTransactionIsolation(CCConnection connection, int level) throws org.apache.thrift.TException
    {
      connection_setTransactionIsolation_args args = new connection_setTransactionIsolation_args();
      args.setConnection(connection);
      args.setLevel(level);
      sendBase("connection_setTransactionIsolation", args);
    }

    public void recv_connection_setTransactionIsolation() throws org.apache.thrift.TException
    {
      connection_setTransactionIsolation_result result = new connection_setTransactionIsolation_result();
      receiveBase(result, "connection_setTransactionIsolation");
      return;
    }

    public int connection_getTransactionIsolation(CCConnection connection) throws org.apache.thrift.TException
    {
      send_connection_getTransactionIsolation(connection);
      return recv_connection_getTransactionIsolation();
    }

    public void send_connection_getTransactionIsolation(CCConnection connection) throws org.apache.thrift.TException
    {
      connection_getTransactionIsolation_args args = new connection_getTransactionIsolation_args();
      args.setConnection(connection);
      sendBase("connection_getTransactionIsolation", args);
    }

    public int recv_connection_getTransactionIsolation() throws org.apache.thrift.TException
    {
      connection_getTransactionIsolation_result result = new connection_getTransactionIsolation_result();
      receiveBase(result, "connection_getTransactionIsolation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connection_getTransactionIsolation failed: unknown result");
    }

    public void connection_setReadOnly(CCConnection connection, boolean readOnly) throws org.apache.thrift.TException
    {
      send_connection_setReadOnly(connection, readOnly);
      recv_connection_setReadOnly();
    }

    public void send_connection_setReadOnly(CCConnection connection, boolean readOnly) throws org.apache.thrift.TException
    {
      connection_setReadOnly_args args = new connection_setReadOnly_args();
      args.setConnection(connection);
      args.setReadOnly(readOnly);
      sendBase("connection_setReadOnly", args);
    }

    public void recv_connection_setReadOnly() throws org.apache.thrift.TException
    {
      connection_setReadOnly_result result = new connection_setReadOnly_result();
      receiveBase(result, "connection_setReadOnly");
      return;
    }

    public boolean connection_getReadOnly(CCConnection connection) throws org.apache.thrift.TException
    {
      send_connection_getReadOnly(connection);
      return recv_connection_getReadOnly();
    }

    public void send_connection_getReadOnly(CCConnection connection) throws org.apache.thrift.TException
    {
      connection_getReadOnly_args args = new connection_getReadOnly_args();
      args.setConnection(connection);
      sendBase("connection_getReadOnly", args);
    }

    public boolean recv_connection_getReadOnly() throws org.apache.thrift.TException
    {
      connection_getReadOnly_result result = new connection_getReadOnly_result();
      receiveBase(result, "connection_getReadOnly");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connection_getReadOnly failed: unknown result");
    }

    public void connection_setCatalog(CCConnection connection, String catalog) throws CCSQLException, org.apache.thrift.TException
    {
      send_connection_setCatalog(connection, catalog);
      recv_connection_setCatalog();
    }

    public void send_connection_setCatalog(CCConnection connection, String catalog) throws org.apache.thrift.TException
    {
      connection_setCatalog_args args = new connection_setCatalog_args();
      args.setConnection(connection);
      args.setCatalog(catalog);
      sendBase("connection_setCatalog", args);
    }

    public void recv_connection_setCatalog() throws CCSQLException, org.apache.thrift.TException
    {
      connection_setCatalog_result result = new connection_setCatalog_result();
      receiveBase(result, "connection_setCatalog");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public String connection_getCatalog(CCConnection connection) throws CCSQLException, org.apache.thrift.TException
    {
      send_connection_getCatalog(connection);
      return recv_connection_getCatalog();
    }

    public void send_connection_getCatalog(CCConnection connection) throws org.apache.thrift.TException
    {
      connection_getCatalog_args args = new connection_getCatalog_args();
      args.setConnection(connection);
      sendBase("connection_getCatalog", args);
    }

    public String recv_connection_getCatalog() throws CCSQLException, org.apache.thrift.TException
    {
      connection_getCatalog_result result = new connection_getCatalog_result();
      receiveBase(result, "connection_getCatalog");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connection_getCatalog failed: unknown result");
    }

    public void connection_setSchema(CCConnection connection, String schema) throws CCSQLException, org.apache.thrift.TException
    {
      send_connection_setSchema(connection, schema);
      recv_connection_setSchema();
    }

    public void send_connection_setSchema(CCConnection connection, String schema) throws org.apache.thrift.TException
    {
      connection_setSchema_args args = new connection_setSchema_args();
      args.setConnection(connection);
      args.setSchema(schema);
      sendBase("connection_setSchema", args);
    }

    public void recv_connection_setSchema() throws CCSQLException, org.apache.thrift.TException
    {
      connection_setSchema_result result = new connection_setSchema_result();
      receiveBase(result, "connection_setSchema");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public String connection_getSchema(CCConnection connection) throws CCSQLException, org.apache.thrift.TException
    {
      send_connection_getSchema(connection);
      return recv_connection_getSchema();
    }

    public void send_connection_getSchema(CCConnection connection) throws org.apache.thrift.TException
    {
      connection_getSchema_args args = new connection_getSchema_args();
      args.setConnection(connection);
      sendBase("connection_getSchema", args);
    }

    public String recv_connection_getSchema() throws CCSQLException, org.apache.thrift.TException
    {
      connection_getSchema_result result = new connection_getSchema_result();
      receiveBase(result, "connection_getSchema");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connection_getSchema failed: unknown result");
    }

    public String connection_getCatalogSeparator(CCConnection connection) throws org.apache.thrift.TException
    {
      send_connection_getCatalogSeparator(connection);
      return recv_connection_getCatalogSeparator();
    }

    public void send_connection_getCatalogSeparator(CCConnection connection) throws org.apache.thrift.TException
    {
      connection_getCatalogSeparator_args args = new connection_getCatalogSeparator_args();
      args.setConnection(connection);
      sendBase("connection_getCatalogSeparator", args);
    }

    public String recv_connection_getCatalogSeparator() throws org.apache.thrift.TException
    {
      connection_getCatalogSeparator_result result = new connection_getCatalogSeparator_result();
      receiveBase(result, "connection_getCatalogSeparator");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connection_getCatalogSeparator failed: unknown result");
    }

    public String connection_getCatalogTerm(CCConnection connection) throws org.apache.thrift.TException
    {
      send_connection_getCatalogTerm(connection);
      return recv_connection_getCatalogTerm();
    }

    public void send_connection_getCatalogTerm(CCConnection connection) throws org.apache.thrift.TException
    {
      connection_getCatalogTerm_args args = new connection_getCatalogTerm_args();
      args.setConnection(connection);
      sendBase("connection_getCatalogTerm", args);
    }

    public String recv_connection_getCatalogTerm() throws org.apache.thrift.TException
    {
      connection_getCatalogTerm_result result = new connection_getCatalogTerm_result();
      receiveBase(result, "connection_getCatalogTerm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connection_getCatalogTerm failed: unknown result");
    }

    public String connection_getSchemaTerm(CCConnection connection) throws org.apache.thrift.TException
    {
      send_connection_getSchemaTerm(connection);
      return recv_connection_getSchemaTerm();
    }

    public void send_connection_getSchemaTerm(CCConnection connection) throws org.apache.thrift.TException
    {
      connection_getSchemaTerm_args args = new connection_getSchemaTerm_args();
      args.setConnection(connection);
      sendBase("connection_getSchemaTerm", args);
    }

    public String recv_connection_getSchemaTerm() throws org.apache.thrift.TException
    {
      connection_getSchemaTerm_result result = new connection_getSchemaTerm_result();
      receiveBase(result, "connection_getSchemaTerm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connection_getSchemaTerm failed: unknown result");
    }

    public CCResultSet connection_getCatalogs(CCConnection connection) throws org.apache.thrift.TException
    {
      send_connection_getCatalogs(connection);
      return recv_connection_getCatalogs();
    }

    public void send_connection_getCatalogs(CCConnection connection) throws org.apache.thrift.TException
    {
      connection_getCatalogs_args args = new connection_getCatalogs_args();
      args.setConnection(connection);
      sendBase("connection_getCatalogs", args);
    }

    public CCResultSet recv_connection_getCatalogs() throws org.apache.thrift.TException
    {
      connection_getCatalogs_result result = new connection_getCatalogs_result();
      receiveBase(result, "connection_getCatalogs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connection_getCatalogs failed: unknown result");
    }

    public CCResultSet connection_getSchemas(CCConnection connection, String catalog, String schemaPattern) throws CCSQLException, org.apache.thrift.TException
    {
      send_connection_getSchemas(connection, catalog, schemaPattern);
      return recv_connection_getSchemas();
    }

    public void send_connection_getSchemas(CCConnection connection, String catalog, String schemaPattern) throws org.apache.thrift.TException
    {
      connection_getSchemas_args args = new connection_getSchemas_args();
      args.setConnection(connection);
      args.setCatalog(catalog);
      args.setSchemaPattern(schemaPattern);
      sendBase("connection_getSchemas", args);
    }

    public CCResultSet recv_connection_getSchemas() throws CCSQLException, org.apache.thrift.TException
    {
      connection_getSchemas_result result = new connection_getSchemas_result();
      receiveBase(result, "connection_getSchemas");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connection_getSchemas failed: unknown result");
    }

    public CCResultSet connection_getTables(CCConnection connection, String catalog, String schemaPattern, String tableNamePattern, List<String> types) throws org.apache.thrift.TException
    {
      send_connection_getTables(connection, catalog, schemaPattern, tableNamePattern, types);
      return recv_connection_getTables();
    }

    public void send_connection_getTables(CCConnection connection, String catalog, String schemaPattern, String tableNamePattern, List<String> types) throws org.apache.thrift.TException
    {
      connection_getTables_args args = new connection_getTables_args();
      args.setConnection(connection);
      args.setCatalog(catalog);
      args.setSchemaPattern(schemaPattern);
      args.setTableNamePattern(tableNamePattern);
      args.setTypes(types);
      sendBase("connection_getTables", args);
    }

    public CCResultSet recv_connection_getTables() throws org.apache.thrift.TException
    {
      connection_getTables_result result = new connection_getTables_result();
      receiveBase(result, "connection_getTables");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connection_getTables failed: unknown result");
    }

    public CCResultSet connection_getColumns(CCConnection connection, String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws org.apache.thrift.TException
    {
      send_connection_getColumns(connection, catalog, schemaPattern, tableNamePattern, columnNamePattern);
      return recv_connection_getColumns();
    }

    public void send_connection_getColumns(CCConnection connection, String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws org.apache.thrift.TException
    {
      connection_getColumns_args args = new connection_getColumns_args();
      args.setConnection(connection);
      args.setCatalog(catalog);
      args.setSchemaPattern(schemaPattern);
      args.setTableNamePattern(tableNamePattern);
      args.setColumnNamePattern(columnNamePattern);
      sendBase("connection_getColumns", args);
    }

    public CCResultSet recv_connection_getColumns() throws org.apache.thrift.TException
    {
      connection_getColumns_result result = new connection_getColumns_result();
      receiveBase(result, "connection_getColumns");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connection_getColumns failed: unknown result");
    }

    public String connection_getSQLKeywords(CCConnection connection) throws org.apache.thrift.TException
    {
      send_connection_getSQLKeywords(connection);
      return recv_connection_getSQLKeywords();
    }

    public void send_connection_getSQLKeywords(CCConnection connection) throws org.apache.thrift.TException
    {
      connection_getSQLKeywords_args args = new connection_getSQLKeywords_args();
      args.setConnection(connection);
      sendBase("connection_getSQLKeywords", args);
    }

    public String recv_connection_getSQLKeywords() throws org.apache.thrift.TException
    {
      connection_getSQLKeywords_result result = new connection_getSQLKeywords_result();
      receiveBase(result, "connection_getSQLKeywords");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connection_getSQLKeywords failed: unknown result");
    }

    public CCResultSet connection_getTableTypes(CCConnection connection) throws org.apache.thrift.TException
    {
      send_connection_getTableTypes(connection);
      return recv_connection_getTableTypes();
    }

    public void send_connection_getTableTypes(CCConnection connection) throws org.apache.thrift.TException
    {
      connection_getTableTypes_args args = new connection_getTableTypes_args();
      args.setConnection(connection);
      sendBase("connection_getTableTypes", args);
    }

    public CCResultSet recv_connection_getTableTypes() throws org.apache.thrift.TException
    {
      connection_getTableTypes_result result = new connection_getTableTypes_result();
      receiveBase(result, "connection_getTableTypes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connection_getTableTypes failed: unknown result");
    }

    public CCResultSet connection_getTypeInfo(CCConnection connection) throws CCSQLException, org.apache.thrift.TException
    {
      send_connection_getTypeInfo(connection);
      return recv_connection_getTypeInfo();
    }

    public void send_connection_getTypeInfo(CCConnection connection) throws org.apache.thrift.TException
    {
      connection_getTypeInfo_args args = new connection_getTypeInfo_args();
      args.setConnection(connection);
      sendBase("connection_getTypeInfo", args);
    }

    public CCResultSet recv_connection_getTypeInfo() throws CCSQLException, org.apache.thrift.TException
    {
      connection_getTypeInfo_result result = new connection_getTypeInfo_result();
      receiveBase(result, "connection_getTypeInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connection_getTypeInfo failed: unknown result");
    }

    public void closeConnection(CCConnection connection) throws CCSQLException, org.apache.thrift.TException
    {
      send_closeConnection(connection);
      recv_closeConnection();
    }

    public void send_closeConnection(CCConnection connection) throws org.apache.thrift.TException
    {
      closeConnection_args args = new closeConnection_args();
      args.setConnection(connection);
      sendBase("closeConnection", args);
    }

    public void recv_closeConnection() throws CCSQLException, org.apache.thrift.TException
    {
      closeConnection_result result = new closeConnection_result();
      receiveBase(result, "closeConnection");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void statement_close(CCStatement statement) throws CCSQLException, org.apache.thrift.TException
    {
      send_statement_close(statement);
      recv_statement_close();
    }

    public void send_statement_close(CCStatement statement) throws org.apache.thrift.TException
    {
      statement_close_args args = new statement_close_args();
      args.setStatement(statement);
      sendBase("statement_close", args);
    }

    public void recv_statement_close() throws CCSQLException, org.apache.thrift.TException
    {
      statement_close_result result = new statement_close_result();
      receiveBase(result, "statement_close");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public boolean statement_execute(CCStatement statement, String sql) throws CCSQLException, org.apache.thrift.TException
    {
      send_statement_execute(statement, sql);
      return recv_statement_execute();
    }

    public void send_statement_execute(CCStatement statement, String sql) throws org.apache.thrift.TException
    {
      statement_execute_args args = new statement_execute_args();
      args.setStatement(statement);
      args.setSql(sql);
      sendBase("statement_execute", args);
    }

    public boolean recv_statement_execute() throws CCSQLException, org.apache.thrift.TException
    {
      statement_execute_result result = new statement_execute_result();
      receiveBase(result, "statement_execute");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "statement_execute failed: unknown result");
    }

    public CCResultSet statement_executeQuery(CCStatement statement, String sql) throws CCSQLException, org.apache.thrift.TException
    {
      send_statement_executeQuery(statement, sql);
      return recv_statement_executeQuery();
    }

    public void send_statement_executeQuery(CCStatement statement, String sql) throws org.apache.thrift.TException
    {
      statement_executeQuery_args args = new statement_executeQuery_args();
      args.setStatement(statement);
      args.setSql(sql);
      sendBase("statement_executeQuery", args);
    }

    public CCResultSet recv_statement_executeQuery() throws CCSQLException, org.apache.thrift.TException
    {
      statement_executeQuery_result result = new statement_executeQuery_result();
      receiveBase(result, "statement_executeQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "statement_executeQuery failed: unknown result");
    }

    public CCResultSet statement_getResultSet(CCStatement statement) throws CCSQLException, org.apache.thrift.TException
    {
      send_statement_getResultSet(statement);
      return recv_statement_getResultSet();
    }

    public void send_statement_getResultSet(CCStatement statement) throws org.apache.thrift.TException
    {
      statement_getResultSet_args args = new statement_getResultSet_args();
      args.setStatement(statement);
      sendBase("statement_getResultSet", args);
    }

    public CCResultSet recv_statement_getResultSet() throws CCSQLException, org.apache.thrift.TException
    {
      statement_getResultSet_result result = new statement_getResultSet_result();
      receiveBase(result, "statement_getResultSet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "statement_getResultSet failed: unknown result");
    }

    public int statement_getUpdateCount(CCStatement statement) throws org.apache.thrift.TException
    {
      send_statement_getUpdateCount(statement);
      return recv_statement_getUpdateCount();
    }

    public void send_statement_getUpdateCount(CCStatement statement) throws org.apache.thrift.TException
    {
      statement_getUpdateCount_args args = new statement_getUpdateCount_args();
      args.setStatement(statement);
      sendBase("statement_getUpdateCount", args);
    }

    public int recv_statement_getUpdateCount() throws org.apache.thrift.TException
    {
      statement_getUpdateCount_result result = new statement_getUpdateCount_result();
      receiveBase(result, "statement_getUpdateCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "statement_getUpdateCount failed: unknown result");
    }

    public int statement_getResultSetType(CCStatement statement) throws org.apache.thrift.TException
    {
      send_statement_getResultSetType(statement);
      return recv_statement_getResultSetType();
    }

    public void send_statement_getResultSetType(CCStatement statement) throws org.apache.thrift.TException
    {
      statement_getResultSetType_args args = new statement_getResultSetType_args();
      args.setStatement(statement);
      sendBase("statement_getResultSetType", args);
    }

    public int recv_statement_getResultSetType() throws org.apache.thrift.TException
    {
      statement_getResultSetType_result result = new statement_getResultSetType_result();
      receiveBase(result, "statement_getResultSetType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "statement_getResultSetType failed: unknown result");
    }

    public void statement_cancel(CCStatement statement) throws CCSQLException, org.apache.thrift.TException
    {
      send_statement_cancel(statement);
      recv_statement_cancel();
    }

    public void send_statement_cancel(CCStatement statement) throws org.apache.thrift.TException
    {
      statement_cancel_args args = new statement_cancel_args();
      args.setStatement(statement);
      sendBase("statement_cancel", args);
    }

    public void recv_statement_cancel() throws CCSQLException, org.apache.thrift.TException
    {
      statement_cancel_result result = new statement_cancel_result();
      receiveBase(result, "statement_cancel");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public statement_getWarnings_return statement_getWarnings(CCStatement statement) throws CCSQLException, org.apache.thrift.TException
    {
      send_statement_getWarnings(statement);
      return recv_statement_getWarnings();
    }

    public void send_statement_getWarnings(CCStatement statement) throws org.apache.thrift.TException
    {
      statement_getWarnings_args args = new statement_getWarnings_args();
      args.setStatement(statement);
      sendBase("statement_getWarnings", args);
    }

    public statement_getWarnings_return recv_statement_getWarnings() throws CCSQLException, org.apache.thrift.TException
    {
      statement_getWarnings_result result = new statement_getWarnings_result();
      receiveBase(result, "statement_getWarnings");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "statement_getWarnings failed: unknown result");
    }

    public void statement_clearWarnings(CCStatement statement) throws CCSQLException, org.apache.thrift.TException
    {
      send_statement_clearWarnings(statement);
      recv_statement_clearWarnings();
    }

    public void send_statement_clearWarnings(CCStatement statement) throws org.apache.thrift.TException
    {
      statement_clearWarnings_args args = new statement_clearWarnings_args();
      args.setStatement(statement);
      sendBase("statement_clearWarnings", args);
    }

    public void recv_statement_clearWarnings() throws CCSQLException, org.apache.thrift.TException
    {
      statement_clearWarnings_result result = new statement_clearWarnings_result();
      receiveBase(result, "statement_clearWarnings");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public int statement_getMaxRows(CCStatement statement) throws CCSQLException, org.apache.thrift.TException
    {
      send_statement_getMaxRows(statement);
      return recv_statement_getMaxRows();
    }

    public void send_statement_getMaxRows(CCStatement statement) throws org.apache.thrift.TException
    {
      statement_getMaxRows_args args = new statement_getMaxRows_args();
      args.setStatement(statement);
      sendBase("statement_getMaxRows", args);
    }

    public int recv_statement_getMaxRows() throws CCSQLException, org.apache.thrift.TException
    {
      statement_getMaxRows_result result = new statement_getMaxRows_result();
      receiveBase(result, "statement_getMaxRows");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "statement_getMaxRows failed: unknown result");
    }

    public void statement_setMaxRows(CCStatement statement, int max) throws CCSQLException, org.apache.thrift.TException
    {
      send_statement_setMaxRows(statement, max);
      recv_statement_setMaxRows();
    }

    public void send_statement_setMaxRows(CCStatement statement, int max) throws org.apache.thrift.TException
    {
      statement_setMaxRows_args args = new statement_setMaxRows_args();
      args.setStatement(statement);
      args.setMax(max);
      sendBase("statement_setMaxRows", args);
    }

    public void recv_statement_setMaxRows() throws CCSQLException, org.apache.thrift.TException
    {
      statement_setMaxRows_result result = new statement_setMaxRows_result();
      receiveBase(result, "statement_setMaxRows");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createConnection(String url, Map<String,String> properties, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createConnection_call method_call = new createConnection_call(url, properties, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createConnection_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String url;
      private Map<String,String> properties;
      public createConnection_call(String url, Map<String,String> properties, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.url = url;
        this.properties = properties;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createConnection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createConnection_args args = new createConnection_args();
        args.setUrl(url);
        args.setProperties(properties);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CCConnection getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createConnection();
      }
    }

    public void createStatement(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createStatement_call method_call = new createStatement_call(connection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createStatement_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      public createStatement_call(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createStatement", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createStatement_args args = new createStatement_args();
        args.setConnection(connection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CCStatement getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createStatement();
      }
    }

    public void connection_getstaticmetadata(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_getstaticmetadata_call method_call = new connection_getstaticmetadata_call(connection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_getstaticmetadata_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      public connection_getstaticmetadata_call(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_getstaticmetadata", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_getstaticmetadata_args args = new connection_getstaticmetadata_args();
        args.setConnection(connection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CCStaticMetaData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connection_getstaticmetadata();
      }
    }

    public void connection_isvalid(CCConnection connection, int timeout, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_isvalid_call method_call = new connection_isvalid_call(connection, timeout, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_isvalid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      private int timeout;
      public connection_isvalid_call(CCConnection connection, int timeout, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
        this.timeout = timeout;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_isvalid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_isvalid_args args = new connection_isvalid_args();
        args.setConnection(connection);
        args.setTimeout(timeout);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connection_isvalid();
      }
    }

    public void connection_setAutoCommit(CCConnection connection, boolean autoCommit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_setAutoCommit_call method_call = new connection_setAutoCommit_call(connection, autoCommit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_setAutoCommit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      private boolean autoCommit;
      public connection_setAutoCommit_call(CCConnection connection, boolean autoCommit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
        this.autoCommit = autoCommit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_setAutoCommit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_setAutoCommit_args args = new connection_setAutoCommit_args();
        args.setConnection(connection);
        args.setAutoCommit(autoCommit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_connection_setAutoCommit();
      }
    }

    public void connection_getAutoCommit(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_getAutoCommit_call method_call = new connection_getAutoCommit_call(connection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_getAutoCommit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      public connection_getAutoCommit_call(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_getAutoCommit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_getAutoCommit_args args = new connection_getAutoCommit_args();
        args.setConnection(connection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connection_getAutoCommit();
      }
    }

    public void connection_setTransactionIsolation(CCConnection connection, int level, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_setTransactionIsolation_call method_call = new connection_setTransactionIsolation_call(connection, level, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_setTransactionIsolation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      private int level;
      public connection_setTransactionIsolation_call(CCConnection connection, int level, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
        this.level = level;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_setTransactionIsolation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_setTransactionIsolation_args args = new connection_setTransactionIsolation_args();
        args.setConnection(connection);
        args.setLevel(level);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_connection_setTransactionIsolation();
      }
    }

    public void connection_getTransactionIsolation(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_getTransactionIsolation_call method_call = new connection_getTransactionIsolation_call(connection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_getTransactionIsolation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      public connection_getTransactionIsolation_call(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_getTransactionIsolation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_getTransactionIsolation_args args = new connection_getTransactionIsolation_args();
        args.setConnection(connection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connection_getTransactionIsolation();
      }
    }

    public void connection_setReadOnly(CCConnection connection, boolean readOnly, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_setReadOnly_call method_call = new connection_setReadOnly_call(connection, readOnly, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_setReadOnly_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      private boolean readOnly;
      public connection_setReadOnly_call(CCConnection connection, boolean readOnly, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
        this.readOnly = readOnly;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_setReadOnly", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_setReadOnly_args args = new connection_setReadOnly_args();
        args.setConnection(connection);
        args.setReadOnly(readOnly);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_connection_setReadOnly();
      }
    }

    public void connection_getReadOnly(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_getReadOnly_call method_call = new connection_getReadOnly_call(connection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_getReadOnly_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      public connection_getReadOnly_call(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_getReadOnly", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_getReadOnly_args args = new connection_getReadOnly_args();
        args.setConnection(connection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connection_getReadOnly();
      }
    }

    public void connection_setCatalog(CCConnection connection, String catalog, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_setCatalog_call method_call = new connection_setCatalog_call(connection, catalog, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_setCatalog_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      private String catalog;
      public connection_setCatalog_call(CCConnection connection, String catalog, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
        this.catalog = catalog;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_setCatalog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_setCatalog_args args = new connection_setCatalog_args();
        args.setConnection(connection);
        args.setCatalog(catalog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws CCSQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_connection_setCatalog();
      }
    }

    public void connection_getCatalog(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_getCatalog_call method_call = new connection_getCatalog_call(connection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_getCatalog_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      public connection_getCatalog_call(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_getCatalog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_getCatalog_args args = new connection_getCatalog_args();
        args.setConnection(connection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws CCSQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connection_getCatalog();
      }
    }

    public void connection_setSchema(CCConnection connection, String schema, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_setSchema_call method_call = new connection_setSchema_call(connection, schema, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_setSchema_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      private String schema;
      public connection_setSchema_call(CCConnection connection, String schema, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
        this.schema = schema;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_setSchema", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_setSchema_args args = new connection_setSchema_args();
        args.setConnection(connection);
        args.setSchema(schema);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws CCSQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_connection_setSchema();
      }
    }

    public void connection_getSchema(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_getSchema_call method_call = new connection_getSchema_call(connection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_getSchema_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      public connection_getSchema_call(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_getSchema", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_getSchema_args args = new connection_getSchema_args();
        args.setConnection(connection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws CCSQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connection_getSchema();
      }
    }

    public void connection_getCatalogSeparator(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_getCatalogSeparator_call method_call = new connection_getCatalogSeparator_call(connection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_getCatalogSeparator_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      public connection_getCatalogSeparator_call(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_getCatalogSeparator", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_getCatalogSeparator_args args = new connection_getCatalogSeparator_args();
        args.setConnection(connection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connection_getCatalogSeparator();
      }
    }

    public void connection_getCatalogTerm(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_getCatalogTerm_call method_call = new connection_getCatalogTerm_call(connection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_getCatalogTerm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      public connection_getCatalogTerm_call(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_getCatalogTerm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_getCatalogTerm_args args = new connection_getCatalogTerm_args();
        args.setConnection(connection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connection_getCatalogTerm();
      }
    }

    public void connection_getSchemaTerm(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_getSchemaTerm_call method_call = new connection_getSchemaTerm_call(connection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_getSchemaTerm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      public connection_getSchemaTerm_call(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_getSchemaTerm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_getSchemaTerm_args args = new connection_getSchemaTerm_args();
        args.setConnection(connection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connection_getSchemaTerm();
      }
    }

    public void connection_getCatalogs(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_getCatalogs_call method_call = new connection_getCatalogs_call(connection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_getCatalogs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      public connection_getCatalogs_call(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_getCatalogs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_getCatalogs_args args = new connection_getCatalogs_args();
        args.setConnection(connection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CCResultSet getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connection_getCatalogs();
      }
    }

    public void connection_getSchemas(CCConnection connection, String catalog, String schemaPattern, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_getSchemas_call method_call = new connection_getSchemas_call(connection, catalog, schemaPattern, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_getSchemas_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      private String catalog;
      private String schemaPattern;
      public connection_getSchemas_call(CCConnection connection, String catalog, String schemaPattern, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
        this.catalog = catalog;
        this.schemaPattern = schemaPattern;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_getSchemas", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_getSchemas_args args = new connection_getSchemas_args();
        args.setConnection(connection);
        args.setCatalog(catalog);
        args.setSchemaPattern(schemaPattern);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CCResultSet getResult() throws CCSQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connection_getSchemas();
      }
    }

    public void connection_getTables(CCConnection connection, String catalog, String schemaPattern, String tableNamePattern, List<String> types, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_getTables_call method_call = new connection_getTables_call(connection, catalog, schemaPattern, tableNamePattern, types, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_getTables_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      private String catalog;
      private String schemaPattern;
      private String tableNamePattern;
      private List<String> types;
      public connection_getTables_call(CCConnection connection, String catalog, String schemaPattern, String tableNamePattern, List<String> types, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
        this.catalog = catalog;
        this.schemaPattern = schemaPattern;
        this.tableNamePattern = tableNamePattern;
        this.types = types;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_getTables", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_getTables_args args = new connection_getTables_args();
        args.setConnection(connection);
        args.setCatalog(catalog);
        args.setSchemaPattern(schemaPattern);
        args.setTableNamePattern(tableNamePattern);
        args.setTypes(types);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CCResultSet getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connection_getTables();
      }
    }

    public void connection_getColumns(CCConnection connection, String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_getColumns_call method_call = new connection_getColumns_call(connection, catalog, schemaPattern, tableNamePattern, columnNamePattern, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_getColumns_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      private String catalog;
      private String schemaPattern;
      private String tableNamePattern;
      private String columnNamePattern;
      public connection_getColumns_call(CCConnection connection, String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
        this.catalog = catalog;
        this.schemaPattern = schemaPattern;
        this.tableNamePattern = tableNamePattern;
        this.columnNamePattern = columnNamePattern;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_getColumns", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_getColumns_args args = new connection_getColumns_args();
        args.setConnection(connection);
        args.setCatalog(catalog);
        args.setSchemaPattern(schemaPattern);
        args.setTableNamePattern(tableNamePattern);
        args.setColumnNamePattern(columnNamePattern);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CCResultSet getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connection_getColumns();
      }
    }

    public void connection_getSQLKeywords(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_getSQLKeywords_call method_call = new connection_getSQLKeywords_call(connection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_getSQLKeywords_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      public connection_getSQLKeywords_call(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_getSQLKeywords", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_getSQLKeywords_args args = new connection_getSQLKeywords_args();
        args.setConnection(connection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connection_getSQLKeywords();
      }
    }

    public void connection_getTableTypes(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_getTableTypes_call method_call = new connection_getTableTypes_call(connection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_getTableTypes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      public connection_getTableTypes_call(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_getTableTypes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_getTableTypes_args args = new connection_getTableTypes_args();
        args.setConnection(connection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CCResultSet getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connection_getTableTypes();
      }
    }

    public void connection_getTypeInfo(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connection_getTypeInfo_call method_call = new connection_getTypeInfo_call(connection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connection_getTypeInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      public connection_getTypeInfo_call(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connection_getTypeInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connection_getTypeInfo_args args = new connection_getTypeInfo_args();
        args.setConnection(connection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CCResultSet getResult() throws CCSQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connection_getTypeInfo();
      }
    }

    public void closeConnection(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      closeConnection_call method_call = new closeConnection_call(connection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeConnection_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCConnection connection;
      public closeConnection_call(CCConnection connection, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connection = connection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("closeConnection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        closeConnection_args args = new closeConnection_args();
        args.setConnection(connection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws CCSQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_closeConnection();
      }
    }

    public void statement_close(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      statement_close_call method_call = new statement_close_call(statement, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statement_close_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCStatement statement;
      public statement_close_call(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.statement = statement;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statement_close", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statement_close_args args = new statement_close_args();
        args.setStatement(statement);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws CCSQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_statement_close();
      }
    }

    public void statement_execute(CCStatement statement, String sql, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      statement_execute_call method_call = new statement_execute_call(statement, sql, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statement_execute_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCStatement statement;
      private String sql;
      public statement_execute_call(CCStatement statement, String sql, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.statement = statement;
        this.sql = sql;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statement_execute", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statement_execute_args args = new statement_execute_args();
        args.setStatement(statement);
        args.setSql(sql);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws CCSQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_statement_execute();
      }
    }

    public void statement_executeQuery(CCStatement statement, String sql, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      statement_executeQuery_call method_call = new statement_executeQuery_call(statement, sql, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statement_executeQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCStatement statement;
      private String sql;
      public statement_executeQuery_call(CCStatement statement, String sql, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.statement = statement;
        this.sql = sql;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statement_executeQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statement_executeQuery_args args = new statement_executeQuery_args();
        args.setStatement(statement);
        args.setSql(sql);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CCResultSet getResult() throws CCSQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_statement_executeQuery();
      }
    }

    public void statement_getResultSet(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      statement_getResultSet_call method_call = new statement_getResultSet_call(statement, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statement_getResultSet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCStatement statement;
      public statement_getResultSet_call(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.statement = statement;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statement_getResultSet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statement_getResultSet_args args = new statement_getResultSet_args();
        args.setStatement(statement);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CCResultSet getResult() throws CCSQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_statement_getResultSet();
      }
    }

    public void statement_getUpdateCount(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      statement_getUpdateCount_call method_call = new statement_getUpdateCount_call(statement, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statement_getUpdateCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCStatement statement;
      public statement_getUpdateCount_call(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.statement = statement;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statement_getUpdateCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statement_getUpdateCount_args args = new statement_getUpdateCount_args();
        args.setStatement(statement);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_statement_getUpdateCount();
      }
    }

    public void statement_getResultSetType(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      statement_getResultSetType_call method_call = new statement_getResultSetType_call(statement, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statement_getResultSetType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCStatement statement;
      public statement_getResultSetType_call(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.statement = statement;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statement_getResultSetType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statement_getResultSetType_args args = new statement_getResultSetType_args();
        args.setStatement(statement);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_statement_getResultSetType();
      }
    }

    public void statement_cancel(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      statement_cancel_call method_call = new statement_cancel_call(statement, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statement_cancel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCStatement statement;
      public statement_cancel_call(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.statement = statement;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statement_cancel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statement_cancel_args args = new statement_cancel_args();
        args.setStatement(statement);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws CCSQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_statement_cancel();
      }
    }

    public void statement_getWarnings(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      statement_getWarnings_call method_call = new statement_getWarnings_call(statement, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statement_getWarnings_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCStatement statement;
      public statement_getWarnings_call(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.statement = statement;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statement_getWarnings", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statement_getWarnings_args args = new statement_getWarnings_args();
        args.setStatement(statement);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public statement_getWarnings_return getResult() throws CCSQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_statement_getWarnings();
      }
    }

    public void statement_clearWarnings(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      statement_clearWarnings_call method_call = new statement_clearWarnings_call(statement, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statement_clearWarnings_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCStatement statement;
      public statement_clearWarnings_call(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.statement = statement;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statement_clearWarnings", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statement_clearWarnings_args args = new statement_clearWarnings_args();
        args.setStatement(statement);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws CCSQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_statement_clearWarnings();
      }
    }

    public void statement_getMaxRows(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      statement_getMaxRows_call method_call = new statement_getMaxRows_call(statement, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statement_getMaxRows_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCStatement statement;
      public statement_getMaxRows_call(CCStatement statement, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.statement = statement;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statement_getMaxRows", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statement_getMaxRows_args args = new statement_getMaxRows_args();
        args.setStatement(statement);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws CCSQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_statement_getMaxRows();
      }
    }

    public void statement_setMaxRows(CCStatement statement, int max, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      statement_setMaxRows_call method_call = new statement_setMaxRows_call(statement, max, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statement_setMaxRows_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CCStatement statement;
      private int max;
      public statement_setMaxRows_call(CCStatement statement, int max, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.statement = statement;
        this.max = max;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statement_setMaxRows", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statement_setMaxRows_args args = new statement_setMaxRows_args();
        args.setStatement(statement);
        args.setMax(max);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws CCSQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_statement_setMaxRows();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createConnection", new createConnection());
      processMap.put("createStatement", new createStatement());
      processMap.put("connection_getstaticmetadata", new connection_getstaticmetadata());
      processMap.put("connection_isvalid", new connection_isvalid());
      processMap.put("connection_setAutoCommit", new connection_setAutoCommit());
      processMap.put("connection_getAutoCommit", new connection_getAutoCommit());
      processMap.put("connection_setTransactionIsolation", new connection_setTransactionIsolation());
      processMap.put("connection_getTransactionIsolation", new connection_getTransactionIsolation());
      processMap.put("connection_setReadOnly", new connection_setReadOnly());
      processMap.put("connection_getReadOnly", new connection_getReadOnly());
      processMap.put("connection_setCatalog", new connection_setCatalog());
      processMap.put("connection_getCatalog", new connection_getCatalog());
      processMap.put("connection_setSchema", new connection_setSchema());
      processMap.put("connection_getSchema", new connection_getSchema());
      processMap.put("connection_getCatalogSeparator", new connection_getCatalogSeparator());
      processMap.put("connection_getCatalogTerm", new connection_getCatalogTerm());
      processMap.put("connection_getSchemaTerm", new connection_getSchemaTerm());
      processMap.put("connection_getCatalogs", new connection_getCatalogs());
      processMap.put("connection_getSchemas", new connection_getSchemas());
      processMap.put("connection_getTables", new connection_getTables());
      processMap.put("connection_getColumns", new connection_getColumns());
      processMap.put("connection_getSQLKeywords", new connection_getSQLKeywords());
      processMap.put("connection_getTableTypes", new connection_getTableTypes());
      processMap.put("connection_getTypeInfo", new connection_getTypeInfo());
      processMap.put("closeConnection", new closeConnection());
      processMap.put("statement_close", new statement_close());
      processMap.put("statement_execute", new statement_execute());
      processMap.put("statement_executeQuery", new statement_executeQuery());
      processMap.put("statement_getResultSet", new statement_getResultSet());
      processMap.put("statement_getUpdateCount", new statement_getUpdateCount());
      processMap.put("statement_getResultSetType", new statement_getResultSetType());
      processMap.put("statement_cancel", new statement_cancel());
      processMap.put("statement_getWarnings", new statement_getWarnings());
      processMap.put("statement_clearWarnings", new statement_clearWarnings());
      processMap.put("statement_getMaxRows", new statement_getMaxRows());
      processMap.put("statement_setMaxRows", new statement_setMaxRows());
      return processMap;
    }

    public static class createConnection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createConnection_args> {
      public createConnection() {
        super("createConnection");
      }

      public createConnection_args getEmptyArgsInstance() {
        return new createConnection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createConnection_result getResult(I iface, createConnection_args args) throws org.apache.thrift.TException {
        createConnection_result result = new createConnection_result();
        result.success = iface.createConnection(args.url, args.properties);
        return result;
      }
    }

    public static class createStatement<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createStatement_args> {
      public createStatement() {
        super("createStatement");
      }

      public createStatement_args getEmptyArgsInstance() {
        return new createStatement_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createStatement_result getResult(I iface, createStatement_args args) throws org.apache.thrift.TException {
        createStatement_result result = new createStatement_result();
        result.success = iface.createStatement(args.connection);
        return result;
      }
    }

    public static class connection_getstaticmetadata<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_getstaticmetadata_args> {
      public connection_getstaticmetadata() {
        super("connection_getstaticmetadata");
      }

      public connection_getstaticmetadata_args getEmptyArgsInstance() {
        return new connection_getstaticmetadata_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_getstaticmetadata_result getResult(I iface, connection_getstaticmetadata_args args) throws org.apache.thrift.TException {
        connection_getstaticmetadata_result result = new connection_getstaticmetadata_result();
        result.success = iface.connection_getstaticmetadata(args.connection);
        return result;
      }
    }

    public static class connection_isvalid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_isvalid_args> {
      public connection_isvalid() {
        super("connection_isvalid");
      }

      public connection_isvalid_args getEmptyArgsInstance() {
        return new connection_isvalid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_isvalid_result getResult(I iface, connection_isvalid_args args) throws org.apache.thrift.TException {
        connection_isvalid_result result = new connection_isvalid_result();
        result.success = iface.connection_isvalid(args.connection, args.timeout);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class connection_setAutoCommit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_setAutoCommit_args> {
      public connection_setAutoCommit() {
        super("connection_setAutoCommit");
      }

      public connection_setAutoCommit_args getEmptyArgsInstance() {
        return new connection_setAutoCommit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_setAutoCommit_result getResult(I iface, connection_setAutoCommit_args args) throws org.apache.thrift.TException {
        connection_setAutoCommit_result result = new connection_setAutoCommit_result();
        iface.connection_setAutoCommit(args.connection, args.autoCommit);
        return result;
      }
    }

    public static class connection_getAutoCommit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_getAutoCommit_args> {
      public connection_getAutoCommit() {
        super("connection_getAutoCommit");
      }

      public connection_getAutoCommit_args getEmptyArgsInstance() {
        return new connection_getAutoCommit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_getAutoCommit_result getResult(I iface, connection_getAutoCommit_args args) throws org.apache.thrift.TException {
        connection_getAutoCommit_result result = new connection_getAutoCommit_result();
        result.success = iface.connection_getAutoCommit(args.connection);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class connection_setTransactionIsolation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_setTransactionIsolation_args> {
      public connection_setTransactionIsolation() {
        super("connection_setTransactionIsolation");
      }

      public connection_setTransactionIsolation_args getEmptyArgsInstance() {
        return new connection_setTransactionIsolation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_setTransactionIsolation_result getResult(I iface, connection_setTransactionIsolation_args args) throws org.apache.thrift.TException {
        connection_setTransactionIsolation_result result = new connection_setTransactionIsolation_result();
        iface.connection_setTransactionIsolation(args.connection, args.level);
        return result;
      }
    }

    public static class connection_getTransactionIsolation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_getTransactionIsolation_args> {
      public connection_getTransactionIsolation() {
        super("connection_getTransactionIsolation");
      }

      public connection_getTransactionIsolation_args getEmptyArgsInstance() {
        return new connection_getTransactionIsolation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_getTransactionIsolation_result getResult(I iface, connection_getTransactionIsolation_args args) throws org.apache.thrift.TException {
        connection_getTransactionIsolation_result result = new connection_getTransactionIsolation_result();
        result.success = iface.connection_getTransactionIsolation(args.connection);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class connection_setReadOnly<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_setReadOnly_args> {
      public connection_setReadOnly() {
        super("connection_setReadOnly");
      }

      public connection_setReadOnly_args getEmptyArgsInstance() {
        return new connection_setReadOnly_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_setReadOnly_result getResult(I iface, connection_setReadOnly_args args) throws org.apache.thrift.TException {
        connection_setReadOnly_result result = new connection_setReadOnly_result();
        iface.connection_setReadOnly(args.connection, args.readOnly);
        return result;
      }
    }

    public static class connection_getReadOnly<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_getReadOnly_args> {
      public connection_getReadOnly() {
        super("connection_getReadOnly");
      }

      public connection_getReadOnly_args getEmptyArgsInstance() {
        return new connection_getReadOnly_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_getReadOnly_result getResult(I iface, connection_getReadOnly_args args) throws org.apache.thrift.TException {
        connection_getReadOnly_result result = new connection_getReadOnly_result();
        result.success = iface.connection_getReadOnly(args.connection);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class connection_setCatalog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_setCatalog_args> {
      public connection_setCatalog() {
        super("connection_setCatalog");
      }

      public connection_setCatalog_args getEmptyArgsInstance() {
        return new connection_setCatalog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_setCatalog_result getResult(I iface, connection_setCatalog_args args) throws org.apache.thrift.TException {
        connection_setCatalog_result result = new connection_setCatalog_result();
        try {
          iface.connection_setCatalog(args.connection, args.catalog);
        } catch (CCSQLException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class connection_getCatalog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_getCatalog_args> {
      public connection_getCatalog() {
        super("connection_getCatalog");
      }

      public connection_getCatalog_args getEmptyArgsInstance() {
        return new connection_getCatalog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_getCatalog_result getResult(I iface, connection_getCatalog_args args) throws org.apache.thrift.TException {
        connection_getCatalog_result result = new connection_getCatalog_result();
        try {
          result.success = iface.connection_getCatalog(args.connection);
        } catch (CCSQLException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class connection_setSchema<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_setSchema_args> {
      public connection_setSchema() {
        super("connection_setSchema");
      }

      public connection_setSchema_args getEmptyArgsInstance() {
        return new connection_setSchema_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_setSchema_result getResult(I iface, connection_setSchema_args args) throws org.apache.thrift.TException {
        connection_setSchema_result result = new connection_setSchema_result();
        try {
          iface.connection_setSchema(args.connection, args.schema);
        } catch (CCSQLException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class connection_getSchema<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_getSchema_args> {
      public connection_getSchema() {
        super("connection_getSchema");
      }

      public connection_getSchema_args getEmptyArgsInstance() {
        return new connection_getSchema_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_getSchema_result getResult(I iface, connection_getSchema_args args) throws org.apache.thrift.TException {
        connection_getSchema_result result = new connection_getSchema_result();
        try {
          result.success = iface.connection_getSchema(args.connection);
        } catch (CCSQLException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class connection_getCatalogSeparator<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_getCatalogSeparator_args> {
      public connection_getCatalogSeparator() {
        super("connection_getCatalogSeparator");
      }

      public connection_getCatalogSeparator_args getEmptyArgsInstance() {
        return new connection_getCatalogSeparator_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_getCatalogSeparator_result getResult(I iface, connection_getCatalogSeparator_args args) throws org.apache.thrift.TException {
        connection_getCatalogSeparator_result result = new connection_getCatalogSeparator_result();
        result.success = iface.connection_getCatalogSeparator(args.connection);
        return result;
      }
    }

    public static class connection_getCatalogTerm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_getCatalogTerm_args> {
      public connection_getCatalogTerm() {
        super("connection_getCatalogTerm");
      }

      public connection_getCatalogTerm_args getEmptyArgsInstance() {
        return new connection_getCatalogTerm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_getCatalogTerm_result getResult(I iface, connection_getCatalogTerm_args args) throws org.apache.thrift.TException {
        connection_getCatalogTerm_result result = new connection_getCatalogTerm_result();
        result.success = iface.connection_getCatalogTerm(args.connection);
        return result;
      }
    }

    public static class connection_getSchemaTerm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_getSchemaTerm_args> {
      public connection_getSchemaTerm() {
        super("connection_getSchemaTerm");
      }

      public connection_getSchemaTerm_args getEmptyArgsInstance() {
        return new connection_getSchemaTerm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_getSchemaTerm_result getResult(I iface, connection_getSchemaTerm_args args) throws org.apache.thrift.TException {
        connection_getSchemaTerm_result result = new connection_getSchemaTerm_result();
        result.success = iface.connection_getSchemaTerm(args.connection);
        return result;
      }
    }

    public static class connection_getCatalogs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_getCatalogs_args> {
      public connection_getCatalogs() {
        super("connection_getCatalogs");
      }

      public connection_getCatalogs_args getEmptyArgsInstance() {
        return new connection_getCatalogs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_getCatalogs_result getResult(I iface, connection_getCatalogs_args args) throws org.apache.thrift.TException {
        connection_getCatalogs_result result = new connection_getCatalogs_result();
        result.success = iface.connection_getCatalogs(args.connection);
        return result;
      }
    }

    public static class connection_getSchemas<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_getSchemas_args> {
      public connection_getSchemas() {
        super("connection_getSchemas");
      }

      public connection_getSchemas_args getEmptyArgsInstance() {
        return new connection_getSchemas_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_getSchemas_result getResult(I iface, connection_getSchemas_args args) throws org.apache.thrift.TException {
        connection_getSchemas_result result = new connection_getSchemas_result();
        try {
          result.success = iface.connection_getSchemas(args.connection, args.catalog, args.schemaPattern);
        } catch (CCSQLException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class connection_getTables<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_getTables_args> {
      public connection_getTables() {
        super("connection_getTables");
      }

      public connection_getTables_args getEmptyArgsInstance() {
        return new connection_getTables_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_getTables_result getResult(I iface, connection_getTables_args args) throws org.apache.thrift.TException {
        connection_getTables_result result = new connection_getTables_result();
        result.success = iface.connection_getTables(args.connection, args.catalog, args.schemaPattern, args.tableNamePattern, args.types);
        return result;
      }
    }

    public static class connection_getColumns<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_getColumns_args> {
      public connection_getColumns() {
        super("connection_getColumns");
      }

      public connection_getColumns_args getEmptyArgsInstance() {
        return new connection_getColumns_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_getColumns_result getResult(I iface, connection_getColumns_args args) throws org.apache.thrift.TException {
        connection_getColumns_result result = new connection_getColumns_result();
        result.success = iface.connection_getColumns(args.connection, args.catalog, args.schemaPattern, args.tableNamePattern, args.columnNamePattern);
        return result;
      }
    }

    public static class connection_getSQLKeywords<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_getSQLKeywords_args> {
      public connection_getSQLKeywords() {
        super("connection_getSQLKeywords");
      }

      public connection_getSQLKeywords_args getEmptyArgsInstance() {
        return new connection_getSQLKeywords_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_getSQLKeywords_result getResult(I iface, connection_getSQLKeywords_args args) throws org.apache.thrift.TException {
        connection_getSQLKeywords_result result = new connection_getSQLKeywords_result();
        result.success = iface.connection_getSQLKeywords(args.connection);
        return result;
      }
    }

    public static class connection_getTableTypes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_getTableTypes_args> {
      public connection_getTableTypes() {
        super("connection_getTableTypes");
      }

      public connection_getTableTypes_args getEmptyArgsInstance() {
        return new connection_getTableTypes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_getTableTypes_result getResult(I iface, connection_getTableTypes_args args) throws org.apache.thrift.TException {
        connection_getTableTypes_result result = new connection_getTableTypes_result();
        result.success = iface.connection_getTableTypes(args.connection);
        return result;
      }
    }

    public static class connection_getTypeInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connection_getTypeInfo_args> {
      public connection_getTypeInfo() {
        super("connection_getTypeInfo");
      }

      public connection_getTypeInfo_args getEmptyArgsInstance() {
        return new connection_getTypeInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connection_getTypeInfo_result getResult(I iface, connection_getTypeInfo_args args) throws org.apache.thrift.TException {
        connection_getTypeInfo_result result = new connection_getTypeInfo_result();
        try {
          result.success = iface.connection_getTypeInfo(args.connection);
        } catch (CCSQLException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class closeConnection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeConnection_args> {
      public closeConnection() {
        super("closeConnection");
      }

      public closeConnection_args getEmptyArgsInstance() {
        return new closeConnection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public closeConnection_result getResult(I iface, closeConnection_args args) throws org.apache.thrift.TException {
        closeConnection_result result = new closeConnection_result();
        try {
          iface.closeConnection(args.connection);
        } catch (CCSQLException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class statement_close<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statement_close_args> {
      public statement_close() {
        super("statement_close");
      }

      public statement_close_args getEmptyArgsInstance() {
        return new statement_close_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statement_close_result getResult(I iface, statement_close_args args) throws org.apache.thrift.TException {
        statement_close_result result = new statement_close_result();
        try {
          iface.statement_close(args.statement);
        } catch (CCSQLException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class statement_execute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statement_execute_args> {
      public statement_execute() {
        super("statement_execute");
      }

      public statement_execute_args getEmptyArgsInstance() {
        return new statement_execute_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statement_execute_result getResult(I iface, statement_execute_args args) throws org.apache.thrift.TException {
        statement_execute_result result = new statement_execute_result();
        try {
          result.success = iface.statement_execute(args.statement, args.sql);
          result.setSuccessIsSet(true);
        } catch (CCSQLException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class statement_executeQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statement_executeQuery_args> {
      public statement_executeQuery() {
        super("statement_executeQuery");
      }

      public statement_executeQuery_args getEmptyArgsInstance() {
        return new statement_executeQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statement_executeQuery_result getResult(I iface, statement_executeQuery_args args) throws org.apache.thrift.TException {
        statement_executeQuery_result result = new statement_executeQuery_result();
        try {
          result.success = iface.statement_executeQuery(args.statement, args.sql);
        } catch (CCSQLException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class statement_getResultSet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statement_getResultSet_args> {
      public statement_getResultSet() {
        super("statement_getResultSet");
      }

      public statement_getResultSet_args getEmptyArgsInstance() {
        return new statement_getResultSet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statement_getResultSet_result getResult(I iface, statement_getResultSet_args args) throws org.apache.thrift.TException {
        statement_getResultSet_result result = new statement_getResultSet_result();
        try {
          result.success = iface.statement_getResultSet(args.statement);
        } catch (CCSQLException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class statement_getUpdateCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statement_getUpdateCount_args> {
      public statement_getUpdateCount() {
        super("statement_getUpdateCount");
      }

      public statement_getUpdateCount_args getEmptyArgsInstance() {
        return new statement_getUpdateCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statement_getUpdateCount_result getResult(I iface, statement_getUpdateCount_args args) throws org.apache.thrift.TException {
        statement_getUpdateCount_result result = new statement_getUpdateCount_result();
        result.success = iface.statement_getUpdateCount(args.statement);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class statement_getResultSetType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statement_getResultSetType_args> {
      public statement_getResultSetType() {
        super("statement_getResultSetType");
      }

      public statement_getResultSetType_args getEmptyArgsInstance() {
        return new statement_getResultSetType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statement_getResultSetType_result getResult(I iface, statement_getResultSetType_args args) throws org.apache.thrift.TException {
        statement_getResultSetType_result result = new statement_getResultSetType_result();
        result.success = iface.statement_getResultSetType(args.statement);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class statement_cancel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statement_cancel_args> {
      public statement_cancel() {
        super("statement_cancel");
      }

      public statement_cancel_args getEmptyArgsInstance() {
        return new statement_cancel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statement_cancel_result getResult(I iface, statement_cancel_args args) throws org.apache.thrift.TException {
        statement_cancel_result result = new statement_cancel_result();
        try {
          iface.statement_cancel(args.statement);
        } catch (CCSQLException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class statement_getWarnings<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statement_getWarnings_args> {
      public statement_getWarnings() {
        super("statement_getWarnings");
      }

      public statement_getWarnings_args getEmptyArgsInstance() {
        return new statement_getWarnings_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statement_getWarnings_result getResult(I iface, statement_getWarnings_args args) throws org.apache.thrift.TException {
        statement_getWarnings_result result = new statement_getWarnings_result();
        try {
          result.success = iface.statement_getWarnings(args.statement);
        } catch (CCSQLException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class statement_clearWarnings<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statement_clearWarnings_args> {
      public statement_clearWarnings() {
        super("statement_clearWarnings");
      }

      public statement_clearWarnings_args getEmptyArgsInstance() {
        return new statement_clearWarnings_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statement_clearWarnings_result getResult(I iface, statement_clearWarnings_args args) throws org.apache.thrift.TException {
        statement_clearWarnings_result result = new statement_clearWarnings_result();
        try {
          iface.statement_clearWarnings(args.statement);
        } catch (CCSQLException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class statement_getMaxRows<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statement_getMaxRows_args> {
      public statement_getMaxRows() {
        super("statement_getMaxRows");
      }

      public statement_getMaxRows_args getEmptyArgsInstance() {
        return new statement_getMaxRows_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statement_getMaxRows_result getResult(I iface, statement_getMaxRows_args args) throws org.apache.thrift.TException {
        statement_getMaxRows_result result = new statement_getMaxRows_result();
        try {
          result.success = iface.statement_getMaxRows(args.statement);
          result.setSuccessIsSet(true);
        } catch (CCSQLException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class statement_setMaxRows<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statement_setMaxRows_args> {
      public statement_setMaxRows() {
        super("statement_setMaxRows");
      }

      public statement_setMaxRows_args getEmptyArgsInstance() {
        return new statement_setMaxRows_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statement_setMaxRows_result getResult(I iface, statement_setMaxRows_args args) throws org.apache.thrift.TException {
        statement_setMaxRows_result result = new statement_setMaxRows_result();
        try {
          iface.statement_setMaxRows(args.statement, args.max);
        } catch (CCSQLException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createConnection", new createConnection());
      processMap.put("createStatement", new createStatement());
      processMap.put("connection_getstaticmetadata", new connection_getstaticmetadata());
      processMap.put("connection_isvalid", new connection_isvalid());
      processMap.put("connection_setAutoCommit", new connection_setAutoCommit());
      processMap.put("connection_getAutoCommit", new connection_getAutoCommit());
      processMap.put("connection_setTransactionIsolation", new connection_setTransactionIsolation());
      processMap.put("connection_getTransactionIsolation", new connection_getTransactionIsolation());
      processMap.put("connection_setReadOnly", new connection_setReadOnly());
      processMap.put("connection_getReadOnly", new connection_getReadOnly());
      processMap.put("connection_setCatalog", new connection_setCatalog());
      processMap.put("connection_getCatalog", new connection_getCatalog());
      processMap.put("connection_setSchema", new connection_setSchema());
      processMap.put("connection_getSchema", new connection_getSchema());
      processMap.put("connection_getCatalogSeparator", new connection_getCatalogSeparator());
      processMap.put("connection_getCatalogTerm", new connection_getCatalogTerm());
      processMap.put("connection_getSchemaTerm", new connection_getSchemaTerm());
      processMap.put("connection_getCatalogs", new connection_getCatalogs());
      processMap.put("connection_getSchemas", new connection_getSchemas());
      processMap.put("connection_getTables", new connection_getTables());
      processMap.put("connection_getColumns", new connection_getColumns());
      processMap.put("connection_getSQLKeywords", new connection_getSQLKeywords());
      processMap.put("connection_getTableTypes", new connection_getTableTypes());
      processMap.put("connection_getTypeInfo", new connection_getTypeInfo());
      processMap.put("closeConnection", new closeConnection());
      processMap.put("statement_close", new statement_close());
      processMap.put("statement_execute", new statement_execute());
      processMap.put("statement_executeQuery", new statement_executeQuery());
      processMap.put("statement_getResultSet", new statement_getResultSet());
      processMap.put("statement_getUpdateCount", new statement_getUpdateCount());
      processMap.put("statement_getResultSetType", new statement_getResultSetType());
      processMap.put("statement_cancel", new statement_cancel());
      processMap.put("statement_getWarnings", new statement_getWarnings());
      processMap.put("statement_clearWarnings", new statement_clearWarnings());
      processMap.put("statement_getMaxRows", new statement_getMaxRows());
      processMap.put("statement_setMaxRows", new statement_setMaxRows());
      return processMap;
    }

    public static class createConnection<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createConnection_args, CCConnection> {
      public createConnection() {
        super("createConnection");
      }

      public createConnection_args getEmptyArgsInstance() {
        return new createConnection_args();
      }

      public AsyncMethodCallback<CCConnection> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CCConnection>() { 
          public void onComplete(CCConnection o) {
            createConnection_result result = new createConnection_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createConnection_result result = new createConnection_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createConnection_args args, org.apache.thrift.async.AsyncMethodCallback<CCConnection> resultHandler) throws TException {
        iface.createConnection(args.url, args.properties,resultHandler);
      }
    }

    public static class createStatement<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createStatement_args, CCStatement> {
      public createStatement() {
        super("createStatement");
      }

      public createStatement_args getEmptyArgsInstance() {
        return new createStatement_args();
      }

      public AsyncMethodCallback<CCStatement> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CCStatement>() { 
          public void onComplete(CCStatement o) {
            createStatement_result result = new createStatement_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createStatement_result result = new createStatement_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createStatement_args args, org.apache.thrift.async.AsyncMethodCallback<CCStatement> resultHandler) throws TException {
        iface.createStatement(args.connection,resultHandler);
      }
    }

    public static class connection_getstaticmetadata<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_getstaticmetadata_args, CCStaticMetaData> {
      public connection_getstaticmetadata() {
        super("connection_getstaticmetadata");
      }

      public connection_getstaticmetadata_args getEmptyArgsInstance() {
        return new connection_getstaticmetadata_args();
      }

      public AsyncMethodCallback<CCStaticMetaData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CCStaticMetaData>() { 
          public void onComplete(CCStaticMetaData o) {
            connection_getstaticmetadata_result result = new connection_getstaticmetadata_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_getstaticmetadata_result result = new connection_getstaticmetadata_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_getstaticmetadata_args args, org.apache.thrift.async.AsyncMethodCallback<CCStaticMetaData> resultHandler) throws TException {
        iface.connection_getstaticmetadata(args.connection,resultHandler);
      }
    }

    public static class connection_isvalid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_isvalid_args, Boolean> {
      public connection_isvalid() {
        super("connection_isvalid");
      }

      public connection_isvalid_args getEmptyArgsInstance() {
        return new connection_isvalid_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            connection_isvalid_result result = new connection_isvalid_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_isvalid_result result = new connection_isvalid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_isvalid_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.connection_isvalid(args.connection, args.timeout,resultHandler);
      }
    }

    public static class connection_setAutoCommit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_setAutoCommit_args, Void> {
      public connection_setAutoCommit() {
        super("connection_setAutoCommit");
      }

      public connection_setAutoCommit_args getEmptyArgsInstance() {
        return new connection_setAutoCommit_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            connection_setAutoCommit_result result = new connection_setAutoCommit_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_setAutoCommit_result result = new connection_setAutoCommit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_setAutoCommit_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.connection_setAutoCommit(args.connection, args.autoCommit,resultHandler);
      }
    }

    public static class connection_getAutoCommit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_getAutoCommit_args, Boolean> {
      public connection_getAutoCommit() {
        super("connection_getAutoCommit");
      }

      public connection_getAutoCommit_args getEmptyArgsInstance() {
        return new connection_getAutoCommit_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            connection_getAutoCommit_result result = new connection_getAutoCommit_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_getAutoCommit_result result = new connection_getAutoCommit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_getAutoCommit_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.connection_getAutoCommit(args.connection,resultHandler);
      }
    }

    public static class connection_setTransactionIsolation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_setTransactionIsolation_args, Void> {
      public connection_setTransactionIsolation() {
        super("connection_setTransactionIsolation");
      }

      public connection_setTransactionIsolation_args getEmptyArgsInstance() {
        return new connection_setTransactionIsolation_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            connection_setTransactionIsolation_result result = new connection_setTransactionIsolation_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_setTransactionIsolation_result result = new connection_setTransactionIsolation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_setTransactionIsolation_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.connection_setTransactionIsolation(args.connection, args.level,resultHandler);
      }
    }

    public static class connection_getTransactionIsolation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_getTransactionIsolation_args, Integer> {
      public connection_getTransactionIsolation() {
        super("connection_getTransactionIsolation");
      }

      public connection_getTransactionIsolation_args getEmptyArgsInstance() {
        return new connection_getTransactionIsolation_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            connection_getTransactionIsolation_result result = new connection_getTransactionIsolation_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_getTransactionIsolation_result result = new connection_getTransactionIsolation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_getTransactionIsolation_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.connection_getTransactionIsolation(args.connection,resultHandler);
      }
    }

    public static class connection_setReadOnly<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_setReadOnly_args, Void> {
      public connection_setReadOnly() {
        super("connection_setReadOnly");
      }

      public connection_setReadOnly_args getEmptyArgsInstance() {
        return new connection_setReadOnly_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            connection_setReadOnly_result result = new connection_setReadOnly_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_setReadOnly_result result = new connection_setReadOnly_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_setReadOnly_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.connection_setReadOnly(args.connection, args.readOnly,resultHandler);
      }
    }

    public static class connection_getReadOnly<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_getReadOnly_args, Boolean> {
      public connection_getReadOnly() {
        super("connection_getReadOnly");
      }

      public connection_getReadOnly_args getEmptyArgsInstance() {
        return new connection_getReadOnly_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            connection_getReadOnly_result result = new connection_getReadOnly_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_getReadOnly_result result = new connection_getReadOnly_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_getReadOnly_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.connection_getReadOnly(args.connection,resultHandler);
      }
    }

    public static class connection_setCatalog<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_setCatalog_args, Void> {
      public connection_setCatalog() {
        super("connection_setCatalog");
      }

      public connection_setCatalog_args getEmptyArgsInstance() {
        return new connection_setCatalog_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            connection_setCatalog_result result = new connection_setCatalog_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_setCatalog_result result = new connection_setCatalog_result();
            if (e instanceof CCSQLException) {
                        result.ouch = (CCSQLException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_setCatalog_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.connection_setCatalog(args.connection, args.catalog,resultHandler);
      }
    }

    public static class connection_getCatalog<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_getCatalog_args, String> {
      public connection_getCatalog() {
        super("connection_getCatalog");
      }

      public connection_getCatalog_args getEmptyArgsInstance() {
        return new connection_getCatalog_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            connection_getCatalog_result result = new connection_getCatalog_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_getCatalog_result result = new connection_getCatalog_result();
            if (e instanceof CCSQLException) {
                        result.ouch = (CCSQLException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_getCatalog_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.connection_getCatalog(args.connection,resultHandler);
      }
    }

    public static class connection_setSchema<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_setSchema_args, Void> {
      public connection_setSchema() {
        super("connection_setSchema");
      }

      public connection_setSchema_args getEmptyArgsInstance() {
        return new connection_setSchema_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            connection_setSchema_result result = new connection_setSchema_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_setSchema_result result = new connection_setSchema_result();
            if (e instanceof CCSQLException) {
                        result.ouch = (CCSQLException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_setSchema_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.connection_setSchema(args.connection, args.schema,resultHandler);
      }
    }

    public static class connection_getSchema<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_getSchema_args, String> {
      public connection_getSchema() {
        super("connection_getSchema");
      }

      public connection_getSchema_args getEmptyArgsInstance() {
        return new connection_getSchema_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            connection_getSchema_result result = new connection_getSchema_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_getSchema_result result = new connection_getSchema_result();
            if (e instanceof CCSQLException) {
                        result.ouch = (CCSQLException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_getSchema_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.connection_getSchema(args.connection,resultHandler);
      }
    }

    public static class connection_getCatalogSeparator<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_getCatalogSeparator_args, String> {
      public connection_getCatalogSeparator() {
        super("connection_getCatalogSeparator");
      }

      public connection_getCatalogSeparator_args getEmptyArgsInstance() {
        return new connection_getCatalogSeparator_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            connection_getCatalogSeparator_result result = new connection_getCatalogSeparator_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_getCatalogSeparator_result result = new connection_getCatalogSeparator_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_getCatalogSeparator_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.connection_getCatalogSeparator(args.connection,resultHandler);
      }
    }

    public static class connection_getCatalogTerm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_getCatalogTerm_args, String> {
      public connection_getCatalogTerm() {
        super("connection_getCatalogTerm");
      }

      public connection_getCatalogTerm_args getEmptyArgsInstance() {
        return new connection_getCatalogTerm_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            connection_getCatalogTerm_result result = new connection_getCatalogTerm_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_getCatalogTerm_result result = new connection_getCatalogTerm_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_getCatalogTerm_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.connection_getCatalogTerm(args.connection,resultHandler);
      }
    }

    public static class connection_getSchemaTerm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_getSchemaTerm_args, String> {
      public connection_getSchemaTerm() {
        super("connection_getSchemaTerm");
      }

      public connection_getSchemaTerm_args getEmptyArgsInstance() {
        return new connection_getSchemaTerm_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            connection_getSchemaTerm_result result = new connection_getSchemaTerm_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_getSchemaTerm_result result = new connection_getSchemaTerm_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_getSchemaTerm_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.connection_getSchemaTerm(args.connection,resultHandler);
      }
    }

    public static class connection_getCatalogs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_getCatalogs_args, CCResultSet> {
      public connection_getCatalogs() {
        super("connection_getCatalogs");
      }

      public connection_getCatalogs_args getEmptyArgsInstance() {
        return new connection_getCatalogs_args();
      }

      public AsyncMethodCallback<CCResultSet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CCResultSet>() { 
          public void onComplete(CCResultSet o) {
            connection_getCatalogs_result result = new connection_getCatalogs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_getCatalogs_result result = new connection_getCatalogs_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_getCatalogs_args args, org.apache.thrift.async.AsyncMethodCallback<CCResultSet> resultHandler) throws TException {
        iface.connection_getCatalogs(args.connection,resultHandler);
      }
    }

    public static class connection_getSchemas<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_getSchemas_args, CCResultSet> {
      public connection_getSchemas() {
        super("connection_getSchemas");
      }

      public connection_getSchemas_args getEmptyArgsInstance() {
        return new connection_getSchemas_args();
      }

      public AsyncMethodCallback<CCResultSet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CCResultSet>() { 
          public void onComplete(CCResultSet o) {
            connection_getSchemas_result result = new connection_getSchemas_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_getSchemas_result result = new connection_getSchemas_result();
            if (e instanceof CCSQLException) {
                        result.ouch = (CCSQLException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_getSchemas_args args, org.apache.thrift.async.AsyncMethodCallback<CCResultSet> resultHandler) throws TException {
        iface.connection_getSchemas(args.connection, args.catalog, args.schemaPattern,resultHandler);
      }
    }

    public static class connection_getTables<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_getTables_args, CCResultSet> {
      public connection_getTables() {
        super("connection_getTables");
      }

      public connection_getTables_args getEmptyArgsInstance() {
        return new connection_getTables_args();
      }

      public AsyncMethodCallback<CCResultSet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CCResultSet>() { 
          public void onComplete(CCResultSet o) {
            connection_getTables_result result = new connection_getTables_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_getTables_result result = new connection_getTables_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_getTables_args args, org.apache.thrift.async.AsyncMethodCallback<CCResultSet> resultHandler) throws TException {
        iface.connection_getTables(args.connection, args.catalog, args.schemaPattern, args.tableNamePattern, args.types,resultHandler);
      }
    }

    public static class connection_getColumns<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_getColumns_args, CCResultSet> {
      public connection_getColumns() {
        super("connection_getColumns");
      }

      public connection_getColumns_args getEmptyArgsInstance() {
        return new connection_getColumns_args();
      }

      public AsyncMethodCallback<CCResultSet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CCResultSet>() { 
          public void onComplete(CCResultSet o) {
            connection_getColumns_result result = new connection_getColumns_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_getColumns_result result = new connection_getColumns_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_getColumns_args args, org.apache.thrift.async.AsyncMethodCallback<CCResultSet> resultHandler) throws TException {
        iface.connection_getColumns(args.connection, args.catalog, args.schemaPattern, args.tableNamePattern, args.columnNamePattern,resultHandler);
      }
    }

    public static class connection_getSQLKeywords<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_getSQLKeywords_args, String> {
      public connection_getSQLKeywords() {
        super("connection_getSQLKeywords");
      }

      public connection_getSQLKeywords_args getEmptyArgsInstance() {
        return new connection_getSQLKeywords_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            connection_getSQLKeywords_result result = new connection_getSQLKeywords_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_getSQLKeywords_result result = new connection_getSQLKeywords_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_getSQLKeywords_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.connection_getSQLKeywords(args.connection,resultHandler);
      }
    }

    public static class connection_getTableTypes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_getTableTypes_args, CCResultSet> {
      public connection_getTableTypes() {
        super("connection_getTableTypes");
      }

      public connection_getTableTypes_args getEmptyArgsInstance() {
        return new connection_getTableTypes_args();
      }

      public AsyncMethodCallback<CCResultSet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CCResultSet>() { 
          public void onComplete(CCResultSet o) {
            connection_getTableTypes_result result = new connection_getTableTypes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_getTableTypes_result result = new connection_getTableTypes_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_getTableTypes_args args, org.apache.thrift.async.AsyncMethodCallback<CCResultSet> resultHandler) throws TException {
        iface.connection_getTableTypes(args.connection,resultHandler);
      }
    }

    public static class connection_getTypeInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connection_getTypeInfo_args, CCResultSet> {
      public connection_getTypeInfo() {
        super("connection_getTypeInfo");
      }

      public connection_getTypeInfo_args getEmptyArgsInstance() {
        return new connection_getTypeInfo_args();
      }

      public AsyncMethodCallback<CCResultSet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CCResultSet>() { 
          public void onComplete(CCResultSet o) {
            connection_getTypeInfo_result result = new connection_getTypeInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connection_getTypeInfo_result result = new connection_getTypeInfo_result();
            if (e instanceof CCSQLException) {
                        result.ouch = (CCSQLException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connection_getTypeInfo_args args, org.apache.thrift.async.AsyncMethodCallback<CCResultSet> resultHandler) throws TException {
        iface.connection_getTypeInfo(args.connection,resultHandler);
      }
    }

    public static class closeConnection<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, closeConnection_args, Void> {
      public closeConnection() {
        super("closeConnection");
      }

      public closeConnection_args getEmptyArgsInstance() {
        return new closeConnection_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            closeConnection_result result = new closeConnection_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            closeConnection_result result = new closeConnection_result();
            if (e instanceof CCSQLException) {
                        result.ouch = (CCSQLException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, closeConnection_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.closeConnection(args.connection,resultHandler);
      }
    }

    public static class statement_close<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statement_close_args, Void> {
      public statement_close() {
        super("statement_close");
      }

      public statement_close_args getEmptyArgsInstance() {
        return new statement_close_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            statement_close_result result = new statement_close_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statement_close_result result = new statement_close_result();
            if (e instanceof CCSQLException) {
                        result.ouch = (CCSQLException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statement_close_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.statement_close(args.statement,resultHandler);
      }
    }

    public static class statement_execute<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statement_execute_args, Boolean> {
      public statement_execute() {
        super("statement_execute");
      }

      public statement_execute_args getEmptyArgsInstance() {
        return new statement_execute_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            statement_execute_result result = new statement_execute_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statement_execute_result result = new statement_execute_result();
            if (e instanceof CCSQLException) {
                        result.ouch = (CCSQLException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statement_execute_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.statement_execute(args.statement, args.sql,resultHandler);
      }
    }

    public static class statement_executeQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statement_executeQuery_args, CCResultSet> {
      public statement_executeQuery() {
        super("statement_executeQuery");
      }

      public statement_executeQuery_args getEmptyArgsInstance() {
        return new statement_executeQuery_args();
      }

      public AsyncMethodCallback<CCResultSet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CCResultSet>() { 
          public void onComplete(CCResultSet o) {
            statement_executeQuery_result result = new statement_executeQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statement_executeQuery_result result = new statement_executeQuery_result();
            if (e instanceof CCSQLException) {
                        result.ouch = (CCSQLException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statement_executeQuery_args args, org.apache.thrift.async.AsyncMethodCallback<CCResultSet> resultHandler) throws TException {
        iface.statement_executeQuery(args.statement, args.sql,resultHandler);
      }
    }

    public static class statement_getResultSet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statement_getResultSet_args, CCResultSet> {
      public statement_getResultSet() {
        super("statement_getResultSet");
      }

      public statement_getResultSet_args getEmptyArgsInstance() {
        return new statement_getResultSet_args();
      }

      public AsyncMethodCallback<CCResultSet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CCResultSet>() { 
          public void onComplete(CCResultSet o) {
            statement_getResultSet_result result = new statement_getResultSet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statement_getResultSet_result result = new statement_getResultSet_result();
            if (e instanceof CCSQLException) {
                        result.ouch = (CCSQLException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statement_getResultSet_args args, org.apache.thrift.async.AsyncMethodCallback<CCResultSet> resultHandler) throws TException {
        iface.statement_getResultSet(args.statement,resultHandler);
      }
    }

    public static class statement_getUpdateCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statement_getUpdateCount_args, Integer> {
      public statement_getUpdateCount() {
        super("statement_getUpdateCount");
      }

      public statement_getUpdateCount_args getEmptyArgsInstance() {
        return new statement_getUpdateCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            statement_getUpdateCount_result result = new statement_getUpdateCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statement_getUpdateCount_result result = new statement_getUpdateCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statement_getUpdateCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.statement_getUpdateCount(args.statement,resultHandler);
      }
    }

    public static class statement_getResultSetType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statement_getResultSetType_args, Integer> {
      public statement_getResultSetType() {
        super("statement_getResultSetType");
      }

      public statement_getResultSetType_args getEmptyArgsInstance() {
        return new statement_getResultSetType_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            statement_getResultSetType_result result = new statement_getResultSetType_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statement_getResultSetType_result result = new statement_getResultSetType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statement_getResultSetType_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.statement_getResultSetType(args.statement,resultHandler);
      }
    }

    public static class statement_cancel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statement_cancel_args, Void> {
      public statement_cancel() {
        super("statement_cancel");
      }

      public statement_cancel_args getEmptyArgsInstance() {
        return new statement_cancel_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            statement_cancel_result result = new statement_cancel_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statement_cancel_result result = new statement_cancel_result();
            if (e instanceof CCSQLException) {
                        result.ouch = (CCSQLException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statement_cancel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.statement_cancel(args.statement,resultHandler);
      }
    }

    public static class statement_getWarnings<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statement_getWarnings_args, statement_getWarnings_return> {
      public statement_getWarnings() {
        super("statement_getWarnings");
      }

      public statement_getWarnings_args getEmptyArgsInstance() {
        return new statement_getWarnings_args();
      }

      public AsyncMethodCallback<statement_getWarnings_return> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<statement_getWarnings_return>() { 
          public void onComplete(statement_getWarnings_return o) {
            statement_getWarnings_result result = new statement_getWarnings_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statement_getWarnings_result result = new statement_getWarnings_result();
            if (e instanceof CCSQLException) {
                        result.ouch = (CCSQLException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statement_getWarnings_args args, org.apache.thrift.async.AsyncMethodCallback<statement_getWarnings_return> resultHandler) throws TException {
        iface.statement_getWarnings(args.statement,resultHandler);
      }
    }

    public static class statement_clearWarnings<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statement_clearWarnings_args, Void> {
      public statement_clearWarnings() {
        super("statement_clearWarnings");
      }

      public statement_clearWarnings_args getEmptyArgsInstance() {
        return new statement_clearWarnings_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            statement_clearWarnings_result result = new statement_clearWarnings_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statement_clearWarnings_result result = new statement_clearWarnings_result();
            if (e instanceof CCSQLException) {
                        result.ouch = (CCSQLException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statement_clearWarnings_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.statement_clearWarnings(args.statement,resultHandler);
      }
    }

    public static class statement_getMaxRows<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statement_getMaxRows_args, Integer> {
      public statement_getMaxRows() {
        super("statement_getMaxRows");
      }

      public statement_getMaxRows_args getEmptyArgsInstance() {
        return new statement_getMaxRows_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            statement_getMaxRows_result result = new statement_getMaxRows_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statement_getMaxRows_result result = new statement_getMaxRows_result();
            if (e instanceof CCSQLException) {
                        result.ouch = (CCSQLException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statement_getMaxRows_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.statement_getMaxRows(args.statement,resultHandler);
      }
    }

    public static class statement_setMaxRows<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statement_setMaxRows_args, Void> {
      public statement_setMaxRows() {
        super("statement_setMaxRows");
      }

      public statement_setMaxRows_args getEmptyArgsInstance() {
        return new statement_setMaxRows_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            statement_setMaxRows_result result = new statement_setMaxRows_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statement_setMaxRows_result result = new statement_setMaxRows_result();
            if (e instanceof CCSQLException) {
                        result.ouch = (CCSQLException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statement_setMaxRows_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.statement_setMaxRows(args.statement, args.max,resultHandler);
      }
    }

  }

  public static class createConnection_args implements org.apache.thrift.TBase<createConnection_args, createConnection_args._Fields>, java.io.Serializable, Cloneable, Comparable<createConnection_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createConnection_args");

    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createConnection_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createConnection_argsTupleSchemeFactory());
    }

    public String url; // required
    public Map<String,String> properties; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      URL((short)1, "url"),
      PROPERTIES((short)2, "properties");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // URL
            return URL;
          case 2: // PROPERTIES
            return PROPERTIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createConnection_args.class, metaDataMap);
    }

    public createConnection_args() {
    }

    public createConnection_args(
      String url,
      Map<String,String> properties)
    {
      this();
      this.url = url;
      this.properties = properties;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createConnection_args(createConnection_args other) {
      if (other.isSetUrl()) {
        this.url = other.url;
      }
      if (other.isSetProperties()) {
        Map<String,String> __this__properties = new HashMap<String,String>(other.properties);
        this.properties = __this__properties;
      }
    }

    public createConnection_args deepCopy() {
      return new createConnection_args(this);
    }

    @Override
    public void clear() {
      this.url = null;
      this.properties = null;
    }

    public String getUrl() {
      return this.url;
    }

    public createConnection_args setUrl(String url) {
      this.url = url;
      return this;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    public int getPropertiesSize() {
      return (this.properties == null) ? 0 : this.properties.size();
    }

    public void putToProperties(String key, String val) {
      if (this.properties == null) {
        this.properties = new HashMap<String,String>();
      }
      this.properties.put(key, val);
    }

    public Map<String,String> getProperties() {
      return this.properties;
    }

    public createConnection_args setProperties(Map<String,String> properties) {
      this.properties = properties;
      return this;
    }

    public void unsetProperties() {
      this.properties = null;
    }

    /** Returns true if field properties is set (has been assigned a value) and false otherwise */
    public boolean isSetProperties() {
      return this.properties != null;
    }

    public void setPropertiesIsSet(boolean value) {
      if (!value) {
        this.properties = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          setUrl((String)value);
        }
        break;

      case PROPERTIES:
        if (value == null) {
          unsetProperties();
        } else {
          setProperties((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case URL:
        return getUrl();

      case PROPERTIES:
        return getProperties();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case URL:
        return isSetUrl();
      case PROPERTIES:
        return isSetProperties();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createConnection_args)
        return this.equals((createConnection_args)that);
      return false;
    }

    public boolean equals(createConnection_args that) {
      if (that == null)
        return false;

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      boolean this_present_properties = true && this.isSetProperties();
      boolean that_present_properties = true && that.isSetProperties();
      if (this_present_properties || that_present_properties) {
        if (!(this_present_properties && that_present_properties))
          return false;
        if (!this.properties.equals(that.properties))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createConnection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperties()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createConnection_args(");
      boolean first = true;

      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createConnection_argsStandardSchemeFactory implements SchemeFactory {
      public createConnection_argsStandardScheme getScheme() {
        return new createConnection_argsStandardScheme();
      }
    }

    private static class createConnection_argsStandardScheme extends StandardScheme<createConnection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createConnection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTIES
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin();
                  struct.properties = new HashMap<String,String>(2*_map32.size);
                  for (int _i33 = 0; _i33 < _map32.size; ++_i33)
                  {
                    String _key34;
                    String _val35;
                    _key34 = iprot.readString();
                    _val35 = iprot.readString();
                    struct.properties.put(_key34, _val35);
                  }
                  iprot.readMapEnd();
                }
                struct.setPropertiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createConnection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        if (struct.properties != null) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
            for (Map.Entry<String, String> _iter36 : struct.properties.entrySet())
            {
              oprot.writeString(_iter36.getKey());
              oprot.writeString(_iter36.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createConnection_argsTupleSchemeFactory implements SchemeFactory {
      public createConnection_argsTupleScheme getScheme() {
        return new createConnection_argsTupleScheme();
      }
    }

    private static class createConnection_argsTupleScheme extends TupleScheme<createConnection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createConnection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUrl()) {
          optionals.set(0);
        }
        if (struct.isSetProperties()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUrl()) {
          oprot.writeString(struct.url);
        }
        if (struct.isSetProperties()) {
          {
            oprot.writeI32(struct.properties.size());
            for (Map.Entry<String, String> _iter37 : struct.properties.entrySet())
            {
              oprot.writeString(_iter37.getKey());
              oprot.writeString(_iter37.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createConnection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.url = iprot.readString();
          struct.setUrlIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map38 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.properties = new HashMap<String,String>(2*_map38.size);
            for (int _i39 = 0; _i39 < _map38.size; ++_i39)
            {
              String _key40;
              String _val41;
              _key40 = iprot.readString();
              _val41 = iprot.readString();
              struct.properties.put(_key40, _val41);
            }
          }
          struct.setPropertiesIsSet(true);
        }
      }
    }

  }

  public static class createConnection_result implements org.apache.thrift.TBase<createConnection_result, createConnection_result._Fields>, java.io.Serializable, Cloneable, Comparable<createConnection_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createConnection_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createConnection_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createConnection_resultTupleSchemeFactory());
    }

    public CCConnection success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createConnection_result.class, metaDataMap);
    }

    public createConnection_result() {
    }

    public createConnection_result(
      CCConnection success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createConnection_result(createConnection_result other) {
      if (other.isSetSuccess()) {
        this.success = new CCConnection(other.success);
      }
    }

    public createConnection_result deepCopy() {
      return new createConnection_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CCConnection getSuccess() {
      return this.success;
    }

    public createConnection_result setSuccess(CCConnection success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CCConnection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createConnection_result)
        return this.equals((createConnection_result)that);
      return false;
    }

    public boolean equals(createConnection_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createConnection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createConnection_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createConnection_resultStandardSchemeFactory implements SchemeFactory {
      public createConnection_resultStandardScheme getScheme() {
        return new createConnection_resultStandardScheme();
      }
    }

    private static class createConnection_resultStandardScheme extends StandardScheme<createConnection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createConnection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CCConnection();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createConnection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createConnection_resultTupleSchemeFactory implements SchemeFactory {
      public createConnection_resultTupleScheme getScheme() {
        return new createConnection_resultTupleScheme();
      }
    }

    private static class createConnection_resultTupleScheme extends TupleScheme<createConnection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createConnection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createConnection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CCConnection();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createStatement_args implements org.apache.thrift.TBase<createStatement_args, createStatement_args._Fields>, java.io.Serializable, Cloneable, Comparable<createStatement_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createStatement_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createStatement_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createStatement_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createStatement_args.class, metaDataMap);
    }

    public createStatement_args() {
    }

    public createStatement_args(
      CCConnection connection)
    {
      this();
      this.connection = connection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createStatement_args(createStatement_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
    }

    public createStatement_args deepCopy() {
      return new createStatement_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public createStatement_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createStatement_args)
        return this.equals((createStatement_args)that);
      return false;
    }

    public boolean equals(createStatement_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createStatement_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createStatement_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createStatement_argsStandardSchemeFactory implements SchemeFactory {
      public createStatement_argsStandardScheme getScheme() {
        return new createStatement_argsStandardScheme();
      }
    }

    private static class createStatement_argsStandardScheme extends StandardScheme<createStatement_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createStatement_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createStatement_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createStatement_argsTupleSchemeFactory implements SchemeFactory {
      public createStatement_argsTupleScheme getScheme() {
        return new createStatement_argsTupleScheme();
      }
    }

    private static class createStatement_argsTupleScheme extends TupleScheme<createStatement_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createStatement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createStatement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
      }
    }

  }

  public static class createStatement_result implements org.apache.thrift.TBase<createStatement_result, createStatement_result._Fields>, java.io.Serializable, Cloneable, Comparable<createStatement_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createStatement_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createStatement_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createStatement_resultTupleSchemeFactory());
    }

    public CCStatement success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCStatement.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createStatement_result.class, metaDataMap);
    }

    public createStatement_result() {
    }

    public createStatement_result(
      CCStatement success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createStatement_result(createStatement_result other) {
      if (other.isSetSuccess()) {
        this.success = new CCStatement(other.success);
      }
    }

    public createStatement_result deepCopy() {
      return new createStatement_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CCStatement getSuccess() {
      return this.success;
    }

    public createStatement_result setSuccess(CCStatement success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CCStatement)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createStatement_result)
        return this.equals((createStatement_result)that);
      return false;
    }

    public boolean equals(createStatement_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createStatement_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createStatement_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createStatement_resultStandardSchemeFactory implements SchemeFactory {
      public createStatement_resultStandardScheme getScheme() {
        return new createStatement_resultStandardScheme();
      }
    }

    private static class createStatement_resultStandardScheme extends StandardScheme<createStatement_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createStatement_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CCStatement();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createStatement_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createStatement_resultTupleSchemeFactory implements SchemeFactory {
      public createStatement_resultTupleScheme getScheme() {
        return new createStatement_resultTupleScheme();
      }
    }

    private static class createStatement_resultTupleScheme extends TupleScheme<createStatement_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createStatement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createStatement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CCStatement();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class connection_getstaticmetadata_args implements org.apache.thrift.TBase<connection_getstaticmetadata_args, connection_getstaticmetadata_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getstaticmetadata_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getstaticmetadata_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getstaticmetadata_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getstaticmetadata_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getstaticmetadata_args.class, metaDataMap);
    }

    public connection_getstaticmetadata_args() {
    }

    public connection_getstaticmetadata_args(
      CCConnection connection)
    {
      this();
      this.connection = connection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getstaticmetadata_args(connection_getstaticmetadata_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
    }

    public connection_getstaticmetadata_args deepCopy() {
      return new connection_getstaticmetadata_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_getstaticmetadata_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getstaticmetadata_args)
        return this.equals((connection_getstaticmetadata_args)that);
      return false;
    }

    public boolean equals(connection_getstaticmetadata_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getstaticmetadata_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getstaticmetadata_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getstaticmetadata_argsStandardSchemeFactory implements SchemeFactory {
      public connection_getstaticmetadata_argsStandardScheme getScheme() {
        return new connection_getstaticmetadata_argsStandardScheme();
      }
    }

    private static class connection_getstaticmetadata_argsStandardScheme extends StandardScheme<connection_getstaticmetadata_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getstaticmetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getstaticmetadata_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getstaticmetadata_argsTupleSchemeFactory implements SchemeFactory {
      public connection_getstaticmetadata_argsTupleScheme getScheme() {
        return new connection_getstaticmetadata_argsTupleScheme();
      }
    }

    private static class connection_getstaticmetadata_argsTupleScheme extends TupleScheme<connection_getstaticmetadata_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getstaticmetadata_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getstaticmetadata_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
      }
    }

  }

  public static class connection_getstaticmetadata_result implements org.apache.thrift.TBase<connection_getstaticmetadata_result, connection_getstaticmetadata_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getstaticmetadata_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getstaticmetadata_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getstaticmetadata_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getstaticmetadata_resultTupleSchemeFactory());
    }

    public CCStaticMetaData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCStaticMetaData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getstaticmetadata_result.class, metaDataMap);
    }

    public connection_getstaticmetadata_result() {
    }

    public connection_getstaticmetadata_result(
      CCStaticMetaData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getstaticmetadata_result(connection_getstaticmetadata_result other) {
      if (other.isSetSuccess()) {
        this.success = new CCStaticMetaData(other.success);
      }
    }

    public connection_getstaticmetadata_result deepCopy() {
      return new connection_getstaticmetadata_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CCStaticMetaData getSuccess() {
      return this.success;
    }

    public connection_getstaticmetadata_result setSuccess(CCStaticMetaData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CCStaticMetaData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getstaticmetadata_result)
        return this.equals((connection_getstaticmetadata_result)that);
      return false;
    }

    public boolean equals(connection_getstaticmetadata_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getstaticmetadata_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getstaticmetadata_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getstaticmetadata_resultStandardSchemeFactory implements SchemeFactory {
      public connection_getstaticmetadata_resultStandardScheme getScheme() {
        return new connection_getstaticmetadata_resultStandardScheme();
      }
    }

    private static class connection_getstaticmetadata_resultStandardScheme extends StandardScheme<connection_getstaticmetadata_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getstaticmetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CCStaticMetaData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getstaticmetadata_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getstaticmetadata_resultTupleSchemeFactory implements SchemeFactory {
      public connection_getstaticmetadata_resultTupleScheme getScheme() {
        return new connection_getstaticmetadata_resultTupleScheme();
      }
    }

    private static class connection_getstaticmetadata_resultTupleScheme extends TupleScheme<connection_getstaticmetadata_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getstaticmetadata_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getstaticmetadata_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CCStaticMetaData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class connection_isvalid_args implements org.apache.thrift.TBase<connection_isvalid_args, connection_isvalid_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_isvalid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_isvalid_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_isvalid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_isvalid_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required
    public int timeout; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection"),
      TIMEOUT((short)2, "timeout");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          case 2: // TIMEOUT
            return TIMEOUT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMEOUT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_isvalid_args.class, metaDataMap);
    }

    public connection_isvalid_args() {
    }

    public connection_isvalid_args(
      CCConnection connection,
      int timeout)
    {
      this();
      this.connection = connection;
      this.timeout = timeout;
      setTimeoutIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_isvalid_args(connection_isvalid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
      this.timeout = other.timeout;
    }

    public connection_isvalid_args deepCopy() {
      return new connection_isvalid_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
      setTimeoutIsSet(false);
      this.timeout = 0;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_isvalid_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public int getTimeout() {
      return this.timeout;
    }

    public connection_isvalid_args setTimeout(int timeout) {
      this.timeout = timeout;
      setTimeoutIsSet(true);
      return this;
    }

    public void unsetTimeout() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
    }

    /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeout() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
    }

    public void setTimeoutIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      case TIMEOUT:
        if (value == null) {
          unsetTimeout();
        } else {
          setTimeout((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      case TIMEOUT:
        return Integer.valueOf(getTimeout());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      case TIMEOUT:
        return isSetTimeout();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_isvalid_args)
        return this.equals((connection_isvalid_args)that);
      return false;
    }

    public boolean equals(connection_isvalid_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      boolean this_present_timeout = true;
      boolean that_present_timeout = true;
      if (this_present_timeout || that_present_timeout) {
        if (!(this_present_timeout && that_present_timeout))
          return false;
        if (this.timeout != that.timeout)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_isvalid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeout()).compareTo(other.isSetTimeout());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeout()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, other.timeout);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_isvalid_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeout:");
      sb.append(this.timeout);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_isvalid_argsStandardSchemeFactory implements SchemeFactory {
      public connection_isvalid_argsStandardScheme getScheme() {
        return new connection_isvalid_argsStandardScheme();
      }
    }

    private static class connection_isvalid_argsStandardScheme extends StandardScheme<connection_isvalid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_isvalid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIMEOUT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeout = iprot.readI32();
                struct.setTimeoutIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_isvalid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
        oprot.writeI32(struct.timeout);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_isvalid_argsTupleSchemeFactory implements SchemeFactory {
      public connection_isvalid_argsTupleScheme getScheme() {
        return new connection_isvalid_argsTupleScheme();
      }
    }

    private static class connection_isvalid_argsTupleScheme extends TupleScheme<connection_isvalid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_isvalid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        if (struct.isSetTimeout()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
        if (struct.isSetTimeout()) {
          oprot.writeI32(struct.timeout);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_isvalid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeout = iprot.readI32();
          struct.setTimeoutIsSet(true);
        }
      }
    }

  }

  public static class connection_isvalid_result implements org.apache.thrift.TBase<connection_isvalid_result, connection_isvalid_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_isvalid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_isvalid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_isvalid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_isvalid_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_isvalid_result.class, metaDataMap);
    }

    public connection_isvalid_result() {
    }

    public connection_isvalid_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_isvalid_result(connection_isvalid_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public connection_isvalid_result deepCopy() {
      return new connection_isvalid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public connection_isvalid_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_isvalid_result)
        return this.equals((connection_isvalid_result)that);
      return false;
    }

    public boolean equals(connection_isvalid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_isvalid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_isvalid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_isvalid_resultStandardSchemeFactory implements SchemeFactory {
      public connection_isvalid_resultStandardScheme getScheme() {
        return new connection_isvalid_resultStandardScheme();
      }
    }

    private static class connection_isvalid_resultStandardScheme extends StandardScheme<connection_isvalid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_isvalid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_isvalid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_isvalid_resultTupleSchemeFactory implements SchemeFactory {
      public connection_isvalid_resultTupleScheme getScheme() {
        return new connection_isvalid_resultTupleScheme();
      }
    }

    private static class connection_isvalid_resultTupleScheme extends TupleScheme<connection_isvalid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_isvalid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_isvalid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class connection_setAutoCommit_args implements org.apache.thrift.TBase<connection_setAutoCommit_args, connection_setAutoCommit_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_setAutoCommit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_setAutoCommit_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTO_COMMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("autoCommit", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_setAutoCommit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_setAutoCommit_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required
    public boolean autoCommit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection"),
      AUTO_COMMIT((short)2, "autoCommit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          case 2: // AUTO_COMMIT
            return AUTO_COMMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AUTOCOMMIT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      tmpMap.put(_Fields.AUTO_COMMIT, new org.apache.thrift.meta_data.FieldMetaData("autoCommit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_setAutoCommit_args.class, metaDataMap);
    }

    public connection_setAutoCommit_args() {
    }

    public connection_setAutoCommit_args(
      CCConnection connection,
      boolean autoCommit)
    {
      this();
      this.connection = connection;
      this.autoCommit = autoCommit;
      setAutoCommitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_setAutoCommit_args(connection_setAutoCommit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
      this.autoCommit = other.autoCommit;
    }

    public connection_setAutoCommit_args deepCopy() {
      return new connection_setAutoCommit_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
      setAutoCommitIsSet(false);
      this.autoCommit = false;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_setAutoCommit_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public boolean isAutoCommit() {
      return this.autoCommit;
    }

    public connection_setAutoCommit_args setAutoCommit(boolean autoCommit) {
      this.autoCommit = autoCommit;
      setAutoCommitIsSet(true);
      return this;
    }

    public void unsetAutoCommit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUTOCOMMIT_ISSET_ID);
    }

    /** Returns true if field autoCommit is set (has been assigned a value) and false otherwise */
    public boolean isSetAutoCommit() {
      return EncodingUtils.testBit(__isset_bitfield, __AUTOCOMMIT_ISSET_ID);
    }

    public void setAutoCommitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUTOCOMMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      case AUTO_COMMIT:
        if (value == null) {
          unsetAutoCommit();
        } else {
          setAutoCommit((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      case AUTO_COMMIT:
        return Boolean.valueOf(isAutoCommit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      case AUTO_COMMIT:
        return isSetAutoCommit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_setAutoCommit_args)
        return this.equals((connection_setAutoCommit_args)that);
      return false;
    }

    public boolean equals(connection_setAutoCommit_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      boolean this_present_autoCommit = true;
      boolean that_present_autoCommit = true;
      if (this_present_autoCommit || that_present_autoCommit) {
        if (!(this_present_autoCommit && that_present_autoCommit))
          return false;
        if (this.autoCommit != that.autoCommit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_setAutoCommit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAutoCommit()).compareTo(other.isSetAutoCommit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAutoCommit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autoCommit, other.autoCommit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_setAutoCommit_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("autoCommit:");
      sb.append(this.autoCommit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_setAutoCommit_argsStandardSchemeFactory implements SchemeFactory {
      public connection_setAutoCommit_argsStandardScheme getScheme() {
        return new connection_setAutoCommit_argsStandardScheme();
      }
    }

    private static class connection_setAutoCommit_argsStandardScheme extends StandardScheme<connection_setAutoCommit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_setAutoCommit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTO_COMMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.autoCommit = iprot.readBool();
                struct.setAutoCommitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_setAutoCommit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AUTO_COMMIT_FIELD_DESC);
        oprot.writeBool(struct.autoCommit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_setAutoCommit_argsTupleSchemeFactory implements SchemeFactory {
      public connection_setAutoCommit_argsTupleScheme getScheme() {
        return new connection_setAutoCommit_argsTupleScheme();
      }
    }

    private static class connection_setAutoCommit_argsTupleScheme extends TupleScheme<connection_setAutoCommit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_setAutoCommit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        if (struct.isSetAutoCommit()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
        if (struct.isSetAutoCommit()) {
          oprot.writeBool(struct.autoCommit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_setAutoCommit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.autoCommit = iprot.readBool();
          struct.setAutoCommitIsSet(true);
        }
      }
    }

  }

  public static class connection_setAutoCommit_result implements org.apache.thrift.TBase<connection_setAutoCommit_result, connection_setAutoCommit_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_setAutoCommit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_setAutoCommit_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_setAutoCommit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_setAutoCommit_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_setAutoCommit_result.class, metaDataMap);
    }

    public connection_setAutoCommit_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_setAutoCommit_result(connection_setAutoCommit_result other) {
    }

    public connection_setAutoCommit_result deepCopy() {
      return new connection_setAutoCommit_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_setAutoCommit_result)
        return this.equals((connection_setAutoCommit_result)that);
      return false;
    }

    public boolean equals(connection_setAutoCommit_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_setAutoCommit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_setAutoCommit_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_setAutoCommit_resultStandardSchemeFactory implements SchemeFactory {
      public connection_setAutoCommit_resultStandardScheme getScheme() {
        return new connection_setAutoCommit_resultStandardScheme();
      }
    }

    private static class connection_setAutoCommit_resultStandardScheme extends StandardScheme<connection_setAutoCommit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_setAutoCommit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_setAutoCommit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_setAutoCommit_resultTupleSchemeFactory implements SchemeFactory {
      public connection_setAutoCommit_resultTupleScheme getScheme() {
        return new connection_setAutoCommit_resultTupleScheme();
      }
    }

    private static class connection_setAutoCommit_resultTupleScheme extends TupleScheme<connection_setAutoCommit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_setAutoCommit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_setAutoCommit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class connection_getAutoCommit_args implements org.apache.thrift.TBase<connection_getAutoCommit_args, connection_getAutoCommit_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getAutoCommit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getAutoCommit_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getAutoCommit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getAutoCommit_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getAutoCommit_args.class, metaDataMap);
    }

    public connection_getAutoCommit_args() {
    }

    public connection_getAutoCommit_args(
      CCConnection connection)
    {
      this();
      this.connection = connection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getAutoCommit_args(connection_getAutoCommit_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
    }

    public connection_getAutoCommit_args deepCopy() {
      return new connection_getAutoCommit_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_getAutoCommit_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getAutoCommit_args)
        return this.equals((connection_getAutoCommit_args)that);
      return false;
    }

    public boolean equals(connection_getAutoCommit_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getAutoCommit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getAutoCommit_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getAutoCommit_argsStandardSchemeFactory implements SchemeFactory {
      public connection_getAutoCommit_argsStandardScheme getScheme() {
        return new connection_getAutoCommit_argsStandardScheme();
      }
    }

    private static class connection_getAutoCommit_argsStandardScheme extends StandardScheme<connection_getAutoCommit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getAutoCommit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getAutoCommit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getAutoCommit_argsTupleSchemeFactory implements SchemeFactory {
      public connection_getAutoCommit_argsTupleScheme getScheme() {
        return new connection_getAutoCommit_argsTupleScheme();
      }
    }

    private static class connection_getAutoCommit_argsTupleScheme extends TupleScheme<connection_getAutoCommit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getAutoCommit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getAutoCommit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
      }
    }

  }

  public static class connection_getAutoCommit_result implements org.apache.thrift.TBase<connection_getAutoCommit_result, connection_getAutoCommit_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getAutoCommit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getAutoCommit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getAutoCommit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getAutoCommit_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getAutoCommit_result.class, metaDataMap);
    }

    public connection_getAutoCommit_result() {
    }

    public connection_getAutoCommit_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getAutoCommit_result(connection_getAutoCommit_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public connection_getAutoCommit_result deepCopy() {
      return new connection_getAutoCommit_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public connection_getAutoCommit_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getAutoCommit_result)
        return this.equals((connection_getAutoCommit_result)that);
      return false;
    }

    public boolean equals(connection_getAutoCommit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getAutoCommit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getAutoCommit_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getAutoCommit_resultStandardSchemeFactory implements SchemeFactory {
      public connection_getAutoCommit_resultStandardScheme getScheme() {
        return new connection_getAutoCommit_resultStandardScheme();
      }
    }

    private static class connection_getAutoCommit_resultStandardScheme extends StandardScheme<connection_getAutoCommit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getAutoCommit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getAutoCommit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getAutoCommit_resultTupleSchemeFactory implements SchemeFactory {
      public connection_getAutoCommit_resultTupleScheme getScheme() {
        return new connection_getAutoCommit_resultTupleScheme();
      }
    }

    private static class connection_getAutoCommit_resultTupleScheme extends TupleScheme<connection_getAutoCommit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getAutoCommit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getAutoCommit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class connection_setTransactionIsolation_args implements org.apache.thrift.TBase<connection_setTransactionIsolation_args, connection_setTransactionIsolation_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_setTransactionIsolation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_setTransactionIsolation_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_setTransactionIsolation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_setTransactionIsolation_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required
    public int level; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection"),
      LEVEL((short)2, "level");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          case 2: // LEVEL
            return LEVEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LEVEL_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_setTransactionIsolation_args.class, metaDataMap);
    }

    public connection_setTransactionIsolation_args() {
    }

    public connection_setTransactionIsolation_args(
      CCConnection connection,
      int level)
    {
      this();
      this.connection = connection;
      this.level = level;
      setLevelIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_setTransactionIsolation_args(connection_setTransactionIsolation_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
      this.level = other.level;
    }

    public connection_setTransactionIsolation_args deepCopy() {
      return new connection_setTransactionIsolation_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
      setLevelIsSet(false);
      this.level = 0;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_setTransactionIsolation_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public int getLevel() {
      return this.level;
    }

    public connection_setTransactionIsolation_args setLevel(int level) {
      this.level = level;
      setLevelIsSet(true);
      return this;
    }

    public void unsetLevel() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
    }

    /** Returns true if field level is set (has been assigned a value) and false otherwise */
    public boolean isSetLevel() {
      return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
    }

    public void setLevelIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      case LEVEL:
        if (value == null) {
          unsetLevel();
        } else {
          setLevel((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      case LEVEL:
        return Integer.valueOf(getLevel());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      case LEVEL:
        return isSetLevel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_setTransactionIsolation_args)
        return this.equals((connection_setTransactionIsolation_args)that);
      return false;
    }

    public boolean equals(connection_setTransactionIsolation_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      boolean this_present_level = true;
      boolean that_present_level = true;
      if (this_present_level || that_present_level) {
        if (!(this_present_level && that_present_level))
          return false;
        if (this.level != that.level)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_setTransactionIsolation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_setTransactionIsolation_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("level:");
      sb.append(this.level);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_setTransactionIsolation_argsStandardSchemeFactory implements SchemeFactory {
      public connection_setTransactionIsolation_argsStandardScheme getScheme() {
        return new connection_setTransactionIsolation_argsStandardScheme();
      }
    }

    private static class connection_setTransactionIsolation_argsStandardScheme extends StandardScheme<connection_setTransactionIsolation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_setTransactionIsolation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.level = iprot.readI32();
                struct.setLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_setTransactionIsolation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LEVEL_FIELD_DESC);
        oprot.writeI32(struct.level);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_setTransactionIsolation_argsTupleSchemeFactory implements SchemeFactory {
      public connection_setTransactionIsolation_argsTupleScheme getScheme() {
        return new connection_setTransactionIsolation_argsTupleScheme();
      }
    }

    private static class connection_setTransactionIsolation_argsTupleScheme extends TupleScheme<connection_setTransactionIsolation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_setTransactionIsolation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        if (struct.isSetLevel()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
        if (struct.isSetLevel()) {
          oprot.writeI32(struct.level);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_setTransactionIsolation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.level = iprot.readI32();
          struct.setLevelIsSet(true);
        }
      }
    }

  }

  public static class connection_setTransactionIsolation_result implements org.apache.thrift.TBase<connection_setTransactionIsolation_result, connection_setTransactionIsolation_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_setTransactionIsolation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_setTransactionIsolation_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_setTransactionIsolation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_setTransactionIsolation_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_setTransactionIsolation_result.class, metaDataMap);
    }

    public connection_setTransactionIsolation_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_setTransactionIsolation_result(connection_setTransactionIsolation_result other) {
    }

    public connection_setTransactionIsolation_result deepCopy() {
      return new connection_setTransactionIsolation_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_setTransactionIsolation_result)
        return this.equals((connection_setTransactionIsolation_result)that);
      return false;
    }

    public boolean equals(connection_setTransactionIsolation_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_setTransactionIsolation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_setTransactionIsolation_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_setTransactionIsolation_resultStandardSchemeFactory implements SchemeFactory {
      public connection_setTransactionIsolation_resultStandardScheme getScheme() {
        return new connection_setTransactionIsolation_resultStandardScheme();
      }
    }

    private static class connection_setTransactionIsolation_resultStandardScheme extends StandardScheme<connection_setTransactionIsolation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_setTransactionIsolation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_setTransactionIsolation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_setTransactionIsolation_resultTupleSchemeFactory implements SchemeFactory {
      public connection_setTransactionIsolation_resultTupleScheme getScheme() {
        return new connection_setTransactionIsolation_resultTupleScheme();
      }
    }

    private static class connection_setTransactionIsolation_resultTupleScheme extends TupleScheme<connection_setTransactionIsolation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_setTransactionIsolation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_setTransactionIsolation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class connection_getTransactionIsolation_args implements org.apache.thrift.TBase<connection_getTransactionIsolation_args, connection_getTransactionIsolation_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getTransactionIsolation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getTransactionIsolation_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getTransactionIsolation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getTransactionIsolation_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getTransactionIsolation_args.class, metaDataMap);
    }

    public connection_getTransactionIsolation_args() {
    }

    public connection_getTransactionIsolation_args(
      CCConnection connection)
    {
      this();
      this.connection = connection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getTransactionIsolation_args(connection_getTransactionIsolation_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
    }

    public connection_getTransactionIsolation_args deepCopy() {
      return new connection_getTransactionIsolation_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_getTransactionIsolation_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getTransactionIsolation_args)
        return this.equals((connection_getTransactionIsolation_args)that);
      return false;
    }

    public boolean equals(connection_getTransactionIsolation_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getTransactionIsolation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getTransactionIsolation_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getTransactionIsolation_argsStandardSchemeFactory implements SchemeFactory {
      public connection_getTransactionIsolation_argsStandardScheme getScheme() {
        return new connection_getTransactionIsolation_argsStandardScheme();
      }
    }

    private static class connection_getTransactionIsolation_argsStandardScheme extends StandardScheme<connection_getTransactionIsolation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getTransactionIsolation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getTransactionIsolation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getTransactionIsolation_argsTupleSchemeFactory implements SchemeFactory {
      public connection_getTransactionIsolation_argsTupleScheme getScheme() {
        return new connection_getTransactionIsolation_argsTupleScheme();
      }
    }

    private static class connection_getTransactionIsolation_argsTupleScheme extends TupleScheme<connection_getTransactionIsolation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getTransactionIsolation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getTransactionIsolation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
      }
    }

  }

  public static class connection_getTransactionIsolation_result implements org.apache.thrift.TBase<connection_getTransactionIsolation_result, connection_getTransactionIsolation_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getTransactionIsolation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getTransactionIsolation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getTransactionIsolation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getTransactionIsolation_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getTransactionIsolation_result.class, metaDataMap);
    }

    public connection_getTransactionIsolation_result() {
    }

    public connection_getTransactionIsolation_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getTransactionIsolation_result(connection_getTransactionIsolation_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public connection_getTransactionIsolation_result deepCopy() {
      return new connection_getTransactionIsolation_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public connection_getTransactionIsolation_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getTransactionIsolation_result)
        return this.equals((connection_getTransactionIsolation_result)that);
      return false;
    }

    public boolean equals(connection_getTransactionIsolation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getTransactionIsolation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getTransactionIsolation_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getTransactionIsolation_resultStandardSchemeFactory implements SchemeFactory {
      public connection_getTransactionIsolation_resultStandardScheme getScheme() {
        return new connection_getTransactionIsolation_resultStandardScheme();
      }
    }

    private static class connection_getTransactionIsolation_resultStandardScheme extends StandardScheme<connection_getTransactionIsolation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getTransactionIsolation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getTransactionIsolation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getTransactionIsolation_resultTupleSchemeFactory implements SchemeFactory {
      public connection_getTransactionIsolation_resultTupleScheme getScheme() {
        return new connection_getTransactionIsolation_resultTupleScheme();
      }
    }

    private static class connection_getTransactionIsolation_resultTupleScheme extends TupleScheme<connection_getTransactionIsolation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getTransactionIsolation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getTransactionIsolation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class connection_setReadOnly_args implements org.apache.thrift.TBase<connection_setReadOnly_args, connection_setReadOnly_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_setReadOnly_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_setReadOnly_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField READ_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("readOnly", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_setReadOnly_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_setReadOnly_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required
    public boolean readOnly; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection"),
      READ_ONLY((short)2, "readOnly");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          case 2: // READ_ONLY
            return READ_ONLY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __READONLY_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      tmpMap.put(_Fields.READ_ONLY, new org.apache.thrift.meta_data.FieldMetaData("readOnly", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_setReadOnly_args.class, metaDataMap);
    }

    public connection_setReadOnly_args() {
    }

    public connection_setReadOnly_args(
      CCConnection connection,
      boolean readOnly)
    {
      this();
      this.connection = connection;
      this.readOnly = readOnly;
      setReadOnlyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_setReadOnly_args(connection_setReadOnly_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
      this.readOnly = other.readOnly;
    }

    public connection_setReadOnly_args deepCopy() {
      return new connection_setReadOnly_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
      setReadOnlyIsSet(false);
      this.readOnly = false;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_setReadOnly_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public boolean isReadOnly() {
      return this.readOnly;
    }

    public connection_setReadOnly_args setReadOnly(boolean readOnly) {
      this.readOnly = readOnly;
      setReadOnlyIsSet(true);
      return this;
    }

    public void unsetReadOnly() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READONLY_ISSET_ID);
    }

    /** Returns true if field readOnly is set (has been assigned a value) and false otherwise */
    public boolean isSetReadOnly() {
      return EncodingUtils.testBit(__isset_bitfield, __READONLY_ISSET_ID);
    }

    public void setReadOnlyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READONLY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      case READ_ONLY:
        if (value == null) {
          unsetReadOnly();
        } else {
          setReadOnly((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      case READ_ONLY:
        return Boolean.valueOf(isReadOnly());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      case READ_ONLY:
        return isSetReadOnly();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_setReadOnly_args)
        return this.equals((connection_setReadOnly_args)that);
      return false;
    }

    public boolean equals(connection_setReadOnly_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      boolean this_present_readOnly = true;
      boolean that_present_readOnly = true;
      if (this_present_readOnly || that_present_readOnly) {
        if (!(this_present_readOnly && that_present_readOnly))
          return false;
        if (this.readOnly != that.readOnly)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_setReadOnly_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReadOnly()).compareTo(other.isSetReadOnly());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReadOnly()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readOnly, other.readOnly);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_setReadOnly_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("readOnly:");
      sb.append(this.readOnly);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_setReadOnly_argsStandardSchemeFactory implements SchemeFactory {
      public connection_setReadOnly_argsStandardScheme getScheme() {
        return new connection_setReadOnly_argsStandardScheme();
      }
    }

    private static class connection_setReadOnly_argsStandardScheme extends StandardScheme<connection_setReadOnly_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_setReadOnly_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // READ_ONLY
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.readOnly = iprot.readBool();
                struct.setReadOnlyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_setReadOnly_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(READ_ONLY_FIELD_DESC);
        oprot.writeBool(struct.readOnly);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_setReadOnly_argsTupleSchemeFactory implements SchemeFactory {
      public connection_setReadOnly_argsTupleScheme getScheme() {
        return new connection_setReadOnly_argsTupleScheme();
      }
    }

    private static class connection_setReadOnly_argsTupleScheme extends TupleScheme<connection_setReadOnly_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_setReadOnly_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        if (struct.isSetReadOnly()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
        if (struct.isSetReadOnly()) {
          oprot.writeBool(struct.readOnly);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_setReadOnly_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.readOnly = iprot.readBool();
          struct.setReadOnlyIsSet(true);
        }
      }
    }

  }

  public static class connection_setReadOnly_result implements org.apache.thrift.TBase<connection_setReadOnly_result, connection_setReadOnly_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_setReadOnly_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_setReadOnly_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_setReadOnly_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_setReadOnly_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_setReadOnly_result.class, metaDataMap);
    }

    public connection_setReadOnly_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_setReadOnly_result(connection_setReadOnly_result other) {
    }

    public connection_setReadOnly_result deepCopy() {
      return new connection_setReadOnly_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_setReadOnly_result)
        return this.equals((connection_setReadOnly_result)that);
      return false;
    }

    public boolean equals(connection_setReadOnly_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_setReadOnly_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_setReadOnly_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_setReadOnly_resultStandardSchemeFactory implements SchemeFactory {
      public connection_setReadOnly_resultStandardScheme getScheme() {
        return new connection_setReadOnly_resultStandardScheme();
      }
    }

    private static class connection_setReadOnly_resultStandardScheme extends StandardScheme<connection_setReadOnly_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_setReadOnly_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_setReadOnly_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_setReadOnly_resultTupleSchemeFactory implements SchemeFactory {
      public connection_setReadOnly_resultTupleScheme getScheme() {
        return new connection_setReadOnly_resultTupleScheme();
      }
    }

    private static class connection_setReadOnly_resultTupleScheme extends TupleScheme<connection_setReadOnly_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_setReadOnly_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_setReadOnly_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class connection_getReadOnly_args implements org.apache.thrift.TBase<connection_getReadOnly_args, connection_getReadOnly_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getReadOnly_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getReadOnly_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getReadOnly_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getReadOnly_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getReadOnly_args.class, metaDataMap);
    }

    public connection_getReadOnly_args() {
    }

    public connection_getReadOnly_args(
      CCConnection connection)
    {
      this();
      this.connection = connection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getReadOnly_args(connection_getReadOnly_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
    }

    public connection_getReadOnly_args deepCopy() {
      return new connection_getReadOnly_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_getReadOnly_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getReadOnly_args)
        return this.equals((connection_getReadOnly_args)that);
      return false;
    }

    public boolean equals(connection_getReadOnly_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getReadOnly_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getReadOnly_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getReadOnly_argsStandardSchemeFactory implements SchemeFactory {
      public connection_getReadOnly_argsStandardScheme getScheme() {
        return new connection_getReadOnly_argsStandardScheme();
      }
    }

    private static class connection_getReadOnly_argsStandardScheme extends StandardScheme<connection_getReadOnly_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getReadOnly_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getReadOnly_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getReadOnly_argsTupleSchemeFactory implements SchemeFactory {
      public connection_getReadOnly_argsTupleScheme getScheme() {
        return new connection_getReadOnly_argsTupleScheme();
      }
    }

    private static class connection_getReadOnly_argsTupleScheme extends TupleScheme<connection_getReadOnly_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getReadOnly_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getReadOnly_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
      }
    }

  }

  public static class connection_getReadOnly_result implements org.apache.thrift.TBase<connection_getReadOnly_result, connection_getReadOnly_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getReadOnly_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getReadOnly_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getReadOnly_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getReadOnly_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getReadOnly_result.class, metaDataMap);
    }

    public connection_getReadOnly_result() {
    }

    public connection_getReadOnly_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getReadOnly_result(connection_getReadOnly_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public connection_getReadOnly_result deepCopy() {
      return new connection_getReadOnly_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public connection_getReadOnly_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getReadOnly_result)
        return this.equals((connection_getReadOnly_result)that);
      return false;
    }

    public boolean equals(connection_getReadOnly_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getReadOnly_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getReadOnly_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getReadOnly_resultStandardSchemeFactory implements SchemeFactory {
      public connection_getReadOnly_resultStandardScheme getScheme() {
        return new connection_getReadOnly_resultStandardScheme();
      }
    }

    private static class connection_getReadOnly_resultStandardScheme extends StandardScheme<connection_getReadOnly_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getReadOnly_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getReadOnly_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getReadOnly_resultTupleSchemeFactory implements SchemeFactory {
      public connection_getReadOnly_resultTupleScheme getScheme() {
        return new connection_getReadOnly_resultTupleScheme();
      }
    }

    private static class connection_getReadOnly_resultTupleScheme extends TupleScheme<connection_getReadOnly_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getReadOnly_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getReadOnly_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class connection_setCatalog_args implements org.apache.thrift.TBase<connection_setCatalog_args, connection_setCatalog_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_setCatalog_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_setCatalog_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_setCatalog_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_setCatalog_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required
    public String catalog; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection"),
      CATALOG((short)2, "catalog");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          case 2: // CATALOG
            return CATALOG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      tmpMap.put(_Fields.CATALOG, new org.apache.thrift.meta_data.FieldMetaData("catalog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_setCatalog_args.class, metaDataMap);
    }

    public connection_setCatalog_args() {
    }

    public connection_setCatalog_args(
      CCConnection connection,
      String catalog)
    {
      this();
      this.connection = connection;
      this.catalog = catalog;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_setCatalog_args(connection_setCatalog_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
      if (other.isSetCatalog()) {
        this.catalog = other.catalog;
      }
    }

    public connection_setCatalog_args deepCopy() {
      return new connection_setCatalog_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
      this.catalog = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_setCatalog_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public String getCatalog() {
      return this.catalog;
    }

    public connection_setCatalog_args setCatalog(String catalog) {
      this.catalog = catalog;
      return this;
    }

    public void unsetCatalog() {
      this.catalog = null;
    }

    /** Returns true if field catalog is set (has been assigned a value) and false otherwise */
    public boolean isSetCatalog() {
      return this.catalog != null;
    }

    public void setCatalogIsSet(boolean value) {
      if (!value) {
        this.catalog = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      case CATALOG:
        if (value == null) {
          unsetCatalog();
        } else {
          setCatalog((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      case CATALOG:
        return getCatalog();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      case CATALOG:
        return isSetCatalog();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_setCatalog_args)
        return this.equals((connection_setCatalog_args)that);
      return false;
    }

    public boolean equals(connection_setCatalog_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      boolean this_present_catalog = true && this.isSetCatalog();
      boolean that_present_catalog = true && that.isSetCatalog();
      if (this_present_catalog || that_present_catalog) {
        if (!(this_present_catalog && that_present_catalog))
          return false;
        if (!this.catalog.equals(that.catalog))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_setCatalog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCatalog()).compareTo(other.isSetCatalog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCatalog()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog, other.catalog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_setCatalog_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("catalog:");
      if (this.catalog == null) {
        sb.append("null");
      } else {
        sb.append(this.catalog);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_setCatalog_argsStandardSchemeFactory implements SchemeFactory {
      public connection_setCatalog_argsStandardScheme getScheme() {
        return new connection_setCatalog_argsStandardScheme();
      }
    }

    private static class connection_setCatalog_argsStandardScheme extends StandardScheme<connection_setCatalog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_setCatalog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATALOG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.catalog = iprot.readString();
                struct.setCatalogIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_setCatalog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.catalog != null) {
          oprot.writeFieldBegin(CATALOG_FIELD_DESC);
          oprot.writeString(struct.catalog);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_setCatalog_argsTupleSchemeFactory implements SchemeFactory {
      public connection_setCatalog_argsTupleScheme getScheme() {
        return new connection_setCatalog_argsTupleScheme();
      }
    }

    private static class connection_setCatalog_argsTupleScheme extends TupleScheme<connection_setCatalog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_setCatalog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        if (struct.isSetCatalog()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
        if (struct.isSetCatalog()) {
          oprot.writeString(struct.catalog);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_setCatalog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.catalog = iprot.readString();
          struct.setCatalogIsSet(true);
        }
      }
    }

  }

  public static class connection_setCatalog_result implements org.apache.thrift.TBase<connection_setCatalog_result, connection_setCatalog_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_setCatalog_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_setCatalog_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_setCatalog_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_setCatalog_resultTupleSchemeFactory());
    }

    public CCSQLException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_setCatalog_result.class, metaDataMap);
    }

    public connection_setCatalog_result() {
    }

    public connection_setCatalog_result(
      CCSQLException ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_setCatalog_result(connection_setCatalog_result other) {
      if (other.isSetOuch()) {
        this.ouch = new CCSQLException(other.ouch);
      }
    }

    public connection_setCatalog_result deepCopy() {
      return new connection_setCatalog_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public CCSQLException getOuch() {
      return this.ouch;
    }

    public connection_setCatalog_result setOuch(CCSQLException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((CCSQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_setCatalog_result)
        return this.equals((connection_setCatalog_result)that);
      return false;
    }

    public boolean equals(connection_setCatalog_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_setCatalog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_setCatalog_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_setCatalog_resultStandardSchemeFactory implements SchemeFactory {
      public connection_setCatalog_resultStandardScheme getScheme() {
        return new connection_setCatalog_resultStandardScheme();
      }
    }

    private static class connection_setCatalog_resultStandardScheme extends StandardScheme<connection_setCatalog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_setCatalog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new CCSQLException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_setCatalog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_setCatalog_resultTupleSchemeFactory implements SchemeFactory {
      public connection_setCatalog_resultTupleScheme getScheme() {
        return new connection_setCatalog_resultTupleScheme();
      }
    }

    private static class connection_setCatalog_resultTupleScheme extends TupleScheme<connection_setCatalog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_setCatalog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_setCatalog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new CCSQLException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class connection_getCatalog_args implements org.apache.thrift.TBase<connection_getCatalog_args, connection_getCatalog_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getCatalog_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getCatalog_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getCatalog_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getCatalog_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getCatalog_args.class, metaDataMap);
    }

    public connection_getCatalog_args() {
    }

    public connection_getCatalog_args(
      CCConnection connection)
    {
      this();
      this.connection = connection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getCatalog_args(connection_getCatalog_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
    }

    public connection_getCatalog_args deepCopy() {
      return new connection_getCatalog_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_getCatalog_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getCatalog_args)
        return this.equals((connection_getCatalog_args)that);
      return false;
    }

    public boolean equals(connection_getCatalog_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getCatalog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getCatalog_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getCatalog_argsStandardSchemeFactory implements SchemeFactory {
      public connection_getCatalog_argsStandardScheme getScheme() {
        return new connection_getCatalog_argsStandardScheme();
      }
    }

    private static class connection_getCatalog_argsStandardScheme extends StandardScheme<connection_getCatalog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getCatalog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getCatalog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getCatalog_argsTupleSchemeFactory implements SchemeFactory {
      public connection_getCatalog_argsTupleScheme getScheme() {
        return new connection_getCatalog_argsTupleScheme();
      }
    }

    private static class connection_getCatalog_argsTupleScheme extends TupleScheme<connection_getCatalog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getCatalog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getCatalog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
      }
    }

  }

  public static class connection_getCatalog_result implements org.apache.thrift.TBase<connection_getCatalog_result, connection_getCatalog_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getCatalog_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getCatalog_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getCatalog_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getCatalog_resultTupleSchemeFactory());
    }

    public String success; // required
    public CCSQLException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getCatalog_result.class, metaDataMap);
    }

    public connection_getCatalog_result() {
    }

    public connection_getCatalog_result(
      String success,
      CCSQLException ouch)
    {
      this();
      this.success = success;
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getCatalog_result(connection_getCatalog_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetOuch()) {
        this.ouch = new CCSQLException(other.ouch);
      }
    }

    public connection_getCatalog_result deepCopy() {
      return new connection_getCatalog_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public connection_getCatalog_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CCSQLException getOuch() {
      return this.ouch;
    }

    public connection_getCatalog_result setOuch(CCSQLException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((CCSQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getCatalog_result)
        return this.equals((connection_getCatalog_result)that);
      return false;
    }

    public boolean equals(connection_getCatalog_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getCatalog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getCatalog_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getCatalog_resultStandardSchemeFactory implements SchemeFactory {
      public connection_getCatalog_resultStandardScheme getScheme() {
        return new connection_getCatalog_resultStandardScheme();
      }
    }

    private static class connection_getCatalog_resultStandardScheme extends StandardScheme<connection_getCatalog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getCatalog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new CCSQLException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getCatalog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getCatalog_resultTupleSchemeFactory implements SchemeFactory {
      public connection_getCatalog_resultTupleScheme getScheme() {
        return new connection_getCatalog_resultTupleScheme();
      }
    }

    private static class connection_getCatalog_resultTupleScheme extends TupleScheme<connection_getCatalog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getCatalog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getCatalog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new CCSQLException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class connection_setSchema_args implements org.apache.thrift.TBase<connection_setSchema_args, connection_setSchema_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_setSchema_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_setSchema_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("schema", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_setSchema_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_setSchema_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required
    public String schema; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection"),
      SCHEMA((short)2, "schema");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          case 2: // SCHEMA
            return SCHEMA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      tmpMap.put(_Fields.SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("schema", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_setSchema_args.class, metaDataMap);
    }

    public connection_setSchema_args() {
    }

    public connection_setSchema_args(
      CCConnection connection,
      String schema)
    {
      this();
      this.connection = connection;
      this.schema = schema;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_setSchema_args(connection_setSchema_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
      if (other.isSetSchema()) {
        this.schema = other.schema;
      }
    }

    public connection_setSchema_args deepCopy() {
      return new connection_setSchema_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
      this.schema = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_setSchema_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public String getSchema() {
      return this.schema;
    }

    public connection_setSchema_args setSchema(String schema) {
      this.schema = schema;
      return this;
    }

    public void unsetSchema() {
      this.schema = null;
    }

    /** Returns true if field schema is set (has been assigned a value) and false otherwise */
    public boolean isSetSchema() {
      return this.schema != null;
    }

    public void setSchemaIsSet(boolean value) {
      if (!value) {
        this.schema = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      case SCHEMA:
        if (value == null) {
          unsetSchema();
        } else {
          setSchema((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      case SCHEMA:
        return getSchema();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      case SCHEMA:
        return isSetSchema();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_setSchema_args)
        return this.equals((connection_setSchema_args)that);
      return false;
    }

    public boolean equals(connection_setSchema_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      boolean this_present_schema = true && this.isSetSchema();
      boolean that_present_schema = true && that.isSetSchema();
      if (this_present_schema || that_present_schema) {
        if (!(this_present_schema && that_present_schema))
          return false;
        if (!this.schema.equals(that.schema))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_setSchema_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSchema()).compareTo(other.isSetSchema());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchema()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema, other.schema);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_setSchema_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schema:");
      if (this.schema == null) {
        sb.append("null");
      } else {
        sb.append(this.schema);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_setSchema_argsStandardSchemeFactory implements SchemeFactory {
      public connection_setSchema_argsStandardScheme getScheme() {
        return new connection_setSchema_argsStandardScheme();
      }
    }

    private static class connection_setSchema_argsStandardScheme extends StandardScheme<connection_setSchema_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_setSchema_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCHEMA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schema = iprot.readString();
                struct.setSchemaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_setSchema_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.schema != null) {
          oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
          oprot.writeString(struct.schema);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_setSchema_argsTupleSchemeFactory implements SchemeFactory {
      public connection_setSchema_argsTupleScheme getScheme() {
        return new connection_setSchema_argsTupleScheme();
      }
    }

    private static class connection_setSchema_argsTupleScheme extends TupleScheme<connection_setSchema_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_setSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        if (struct.isSetSchema()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
        if (struct.isSetSchema()) {
          oprot.writeString(struct.schema);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_setSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.schema = iprot.readString();
          struct.setSchemaIsSet(true);
        }
      }
    }

  }

  public static class connection_setSchema_result implements org.apache.thrift.TBase<connection_setSchema_result, connection_setSchema_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_setSchema_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_setSchema_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_setSchema_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_setSchema_resultTupleSchemeFactory());
    }

    public CCSQLException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_setSchema_result.class, metaDataMap);
    }

    public connection_setSchema_result() {
    }

    public connection_setSchema_result(
      CCSQLException ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_setSchema_result(connection_setSchema_result other) {
      if (other.isSetOuch()) {
        this.ouch = new CCSQLException(other.ouch);
      }
    }

    public connection_setSchema_result deepCopy() {
      return new connection_setSchema_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public CCSQLException getOuch() {
      return this.ouch;
    }

    public connection_setSchema_result setOuch(CCSQLException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((CCSQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_setSchema_result)
        return this.equals((connection_setSchema_result)that);
      return false;
    }

    public boolean equals(connection_setSchema_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_setSchema_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_setSchema_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_setSchema_resultStandardSchemeFactory implements SchemeFactory {
      public connection_setSchema_resultStandardScheme getScheme() {
        return new connection_setSchema_resultStandardScheme();
      }
    }

    private static class connection_setSchema_resultStandardScheme extends StandardScheme<connection_setSchema_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_setSchema_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new CCSQLException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_setSchema_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_setSchema_resultTupleSchemeFactory implements SchemeFactory {
      public connection_setSchema_resultTupleScheme getScheme() {
        return new connection_setSchema_resultTupleScheme();
      }
    }

    private static class connection_setSchema_resultTupleScheme extends TupleScheme<connection_setSchema_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_setSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_setSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new CCSQLException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class connection_getSchema_args implements org.apache.thrift.TBase<connection_getSchema_args, connection_getSchema_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getSchema_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getSchema_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getSchema_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getSchema_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getSchema_args.class, metaDataMap);
    }

    public connection_getSchema_args() {
    }

    public connection_getSchema_args(
      CCConnection connection)
    {
      this();
      this.connection = connection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getSchema_args(connection_getSchema_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
    }

    public connection_getSchema_args deepCopy() {
      return new connection_getSchema_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_getSchema_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getSchema_args)
        return this.equals((connection_getSchema_args)that);
      return false;
    }

    public boolean equals(connection_getSchema_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getSchema_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getSchema_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getSchema_argsStandardSchemeFactory implements SchemeFactory {
      public connection_getSchema_argsStandardScheme getScheme() {
        return new connection_getSchema_argsStandardScheme();
      }
    }

    private static class connection_getSchema_argsStandardScheme extends StandardScheme<connection_getSchema_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getSchema_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getSchema_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getSchema_argsTupleSchemeFactory implements SchemeFactory {
      public connection_getSchema_argsTupleScheme getScheme() {
        return new connection_getSchema_argsTupleScheme();
      }
    }

    private static class connection_getSchema_argsTupleScheme extends TupleScheme<connection_getSchema_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
      }
    }

  }

  public static class connection_getSchema_result implements org.apache.thrift.TBase<connection_getSchema_result, connection_getSchema_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getSchema_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getSchema_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getSchema_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getSchema_resultTupleSchemeFactory());
    }

    public String success; // required
    public CCSQLException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getSchema_result.class, metaDataMap);
    }

    public connection_getSchema_result() {
    }

    public connection_getSchema_result(
      String success,
      CCSQLException ouch)
    {
      this();
      this.success = success;
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getSchema_result(connection_getSchema_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetOuch()) {
        this.ouch = new CCSQLException(other.ouch);
      }
    }

    public connection_getSchema_result deepCopy() {
      return new connection_getSchema_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public connection_getSchema_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CCSQLException getOuch() {
      return this.ouch;
    }

    public connection_getSchema_result setOuch(CCSQLException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((CCSQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getSchema_result)
        return this.equals((connection_getSchema_result)that);
      return false;
    }

    public boolean equals(connection_getSchema_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getSchema_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getSchema_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getSchema_resultStandardSchemeFactory implements SchemeFactory {
      public connection_getSchema_resultStandardScheme getScheme() {
        return new connection_getSchema_resultStandardScheme();
      }
    }

    private static class connection_getSchema_resultStandardScheme extends StandardScheme<connection_getSchema_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getSchema_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new CCSQLException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getSchema_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getSchema_resultTupleSchemeFactory implements SchemeFactory {
      public connection_getSchema_resultTupleScheme getScheme() {
        return new connection_getSchema_resultTupleScheme();
      }
    }

    private static class connection_getSchema_resultTupleScheme extends TupleScheme<connection_getSchema_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new CCSQLException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class connection_getCatalogSeparator_args implements org.apache.thrift.TBase<connection_getCatalogSeparator_args, connection_getCatalogSeparator_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getCatalogSeparator_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getCatalogSeparator_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getCatalogSeparator_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getCatalogSeparator_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getCatalogSeparator_args.class, metaDataMap);
    }

    public connection_getCatalogSeparator_args() {
    }

    public connection_getCatalogSeparator_args(
      CCConnection connection)
    {
      this();
      this.connection = connection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getCatalogSeparator_args(connection_getCatalogSeparator_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
    }

    public connection_getCatalogSeparator_args deepCopy() {
      return new connection_getCatalogSeparator_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_getCatalogSeparator_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getCatalogSeparator_args)
        return this.equals((connection_getCatalogSeparator_args)that);
      return false;
    }

    public boolean equals(connection_getCatalogSeparator_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getCatalogSeparator_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getCatalogSeparator_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getCatalogSeparator_argsStandardSchemeFactory implements SchemeFactory {
      public connection_getCatalogSeparator_argsStandardScheme getScheme() {
        return new connection_getCatalogSeparator_argsStandardScheme();
      }
    }

    private static class connection_getCatalogSeparator_argsStandardScheme extends StandardScheme<connection_getCatalogSeparator_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getCatalogSeparator_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getCatalogSeparator_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getCatalogSeparator_argsTupleSchemeFactory implements SchemeFactory {
      public connection_getCatalogSeparator_argsTupleScheme getScheme() {
        return new connection_getCatalogSeparator_argsTupleScheme();
      }
    }

    private static class connection_getCatalogSeparator_argsTupleScheme extends TupleScheme<connection_getCatalogSeparator_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getCatalogSeparator_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getCatalogSeparator_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
      }
    }

  }

  public static class connection_getCatalogSeparator_result implements org.apache.thrift.TBase<connection_getCatalogSeparator_result, connection_getCatalogSeparator_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getCatalogSeparator_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getCatalogSeparator_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getCatalogSeparator_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getCatalogSeparator_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getCatalogSeparator_result.class, metaDataMap);
    }

    public connection_getCatalogSeparator_result() {
    }

    public connection_getCatalogSeparator_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getCatalogSeparator_result(connection_getCatalogSeparator_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public connection_getCatalogSeparator_result deepCopy() {
      return new connection_getCatalogSeparator_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public connection_getCatalogSeparator_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getCatalogSeparator_result)
        return this.equals((connection_getCatalogSeparator_result)that);
      return false;
    }

    public boolean equals(connection_getCatalogSeparator_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getCatalogSeparator_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getCatalogSeparator_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getCatalogSeparator_resultStandardSchemeFactory implements SchemeFactory {
      public connection_getCatalogSeparator_resultStandardScheme getScheme() {
        return new connection_getCatalogSeparator_resultStandardScheme();
      }
    }

    private static class connection_getCatalogSeparator_resultStandardScheme extends StandardScheme<connection_getCatalogSeparator_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getCatalogSeparator_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getCatalogSeparator_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getCatalogSeparator_resultTupleSchemeFactory implements SchemeFactory {
      public connection_getCatalogSeparator_resultTupleScheme getScheme() {
        return new connection_getCatalogSeparator_resultTupleScheme();
      }
    }

    private static class connection_getCatalogSeparator_resultTupleScheme extends TupleScheme<connection_getCatalogSeparator_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getCatalogSeparator_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getCatalogSeparator_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class connection_getCatalogTerm_args implements org.apache.thrift.TBase<connection_getCatalogTerm_args, connection_getCatalogTerm_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getCatalogTerm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getCatalogTerm_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getCatalogTerm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getCatalogTerm_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getCatalogTerm_args.class, metaDataMap);
    }

    public connection_getCatalogTerm_args() {
    }

    public connection_getCatalogTerm_args(
      CCConnection connection)
    {
      this();
      this.connection = connection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getCatalogTerm_args(connection_getCatalogTerm_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
    }

    public connection_getCatalogTerm_args deepCopy() {
      return new connection_getCatalogTerm_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_getCatalogTerm_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getCatalogTerm_args)
        return this.equals((connection_getCatalogTerm_args)that);
      return false;
    }

    public boolean equals(connection_getCatalogTerm_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getCatalogTerm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getCatalogTerm_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getCatalogTerm_argsStandardSchemeFactory implements SchemeFactory {
      public connection_getCatalogTerm_argsStandardScheme getScheme() {
        return new connection_getCatalogTerm_argsStandardScheme();
      }
    }

    private static class connection_getCatalogTerm_argsStandardScheme extends StandardScheme<connection_getCatalogTerm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getCatalogTerm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getCatalogTerm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getCatalogTerm_argsTupleSchemeFactory implements SchemeFactory {
      public connection_getCatalogTerm_argsTupleScheme getScheme() {
        return new connection_getCatalogTerm_argsTupleScheme();
      }
    }

    private static class connection_getCatalogTerm_argsTupleScheme extends TupleScheme<connection_getCatalogTerm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getCatalogTerm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getCatalogTerm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
      }
    }

  }

  public static class connection_getCatalogTerm_result implements org.apache.thrift.TBase<connection_getCatalogTerm_result, connection_getCatalogTerm_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getCatalogTerm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getCatalogTerm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getCatalogTerm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getCatalogTerm_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getCatalogTerm_result.class, metaDataMap);
    }

    public connection_getCatalogTerm_result() {
    }

    public connection_getCatalogTerm_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getCatalogTerm_result(connection_getCatalogTerm_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public connection_getCatalogTerm_result deepCopy() {
      return new connection_getCatalogTerm_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public connection_getCatalogTerm_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getCatalogTerm_result)
        return this.equals((connection_getCatalogTerm_result)that);
      return false;
    }

    public boolean equals(connection_getCatalogTerm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getCatalogTerm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getCatalogTerm_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getCatalogTerm_resultStandardSchemeFactory implements SchemeFactory {
      public connection_getCatalogTerm_resultStandardScheme getScheme() {
        return new connection_getCatalogTerm_resultStandardScheme();
      }
    }

    private static class connection_getCatalogTerm_resultStandardScheme extends StandardScheme<connection_getCatalogTerm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getCatalogTerm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getCatalogTerm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getCatalogTerm_resultTupleSchemeFactory implements SchemeFactory {
      public connection_getCatalogTerm_resultTupleScheme getScheme() {
        return new connection_getCatalogTerm_resultTupleScheme();
      }
    }

    private static class connection_getCatalogTerm_resultTupleScheme extends TupleScheme<connection_getCatalogTerm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getCatalogTerm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getCatalogTerm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class connection_getSchemaTerm_args implements org.apache.thrift.TBase<connection_getSchemaTerm_args, connection_getSchemaTerm_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getSchemaTerm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getSchemaTerm_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getSchemaTerm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getSchemaTerm_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getSchemaTerm_args.class, metaDataMap);
    }

    public connection_getSchemaTerm_args() {
    }

    public connection_getSchemaTerm_args(
      CCConnection connection)
    {
      this();
      this.connection = connection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getSchemaTerm_args(connection_getSchemaTerm_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
    }

    public connection_getSchemaTerm_args deepCopy() {
      return new connection_getSchemaTerm_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_getSchemaTerm_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getSchemaTerm_args)
        return this.equals((connection_getSchemaTerm_args)that);
      return false;
    }

    public boolean equals(connection_getSchemaTerm_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getSchemaTerm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getSchemaTerm_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getSchemaTerm_argsStandardSchemeFactory implements SchemeFactory {
      public connection_getSchemaTerm_argsStandardScheme getScheme() {
        return new connection_getSchemaTerm_argsStandardScheme();
      }
    }

    private static class connection_getSchemaTerm_argsStandardScheme extends StandardScheme<connection_getSchemaTerm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getSchemaTerm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getSchemaTerm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getSchemaTerm_argsTupleSchemeFactory implements SchemeFactory {
      public connection_getSchemaTerm_argsTupleScheme getScheme() {
        return new connection_getSchemaTerm_argsTupleScheme();
      }
    }

    private static class connection_getSchemaTerm_argsTupleScheme extends TupleScheme<connection_getSchemaTerm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getSchemaTerm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getSchemaTerm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
      }
    }

  }

  public static class connection_getSchemaTerm_result implements org.apache.thrift.TBase<connection_getSchemaTerm_result, connection_getSchemaTerm_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getSchemaTerm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getSchemaTerm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getSchemaTerm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getSchemaTerm_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getSchemaTerm_result.class, metaDataMap);
    }

    public connection_getSchemaTerm_result() {
    }

    public connection_getSchemaTerm_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getSchemaTerm_result(connection_getSchemaTerm_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public connection_getSchemaTerm_result deepCopy() {
      return new connection_getSchemaTerm_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public connection_getSchemaTerm_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getSchemaTerm_result)
        return this.equals((connection_getSchemaTerm_result)that);
      return false;
    }

    public boolean equals(connection_getSchemaTerm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getSchemaTerm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getSchemaTerm_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getSchemaTerm_resultStandardSchemeFactory implements SchemeFactory {
      public connection_getSchemaTerm_resultStandardScheme getScheme() {
        return new connection_getSchemaTerm_resultStandardScheme();
      }
    }

    private static class connection_getSchemaTerm_resultStandardScheme extends StandardScheme<connection_getSchemaTerm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getSchemaTerm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getSchemaTerm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getSchemaTerm_resultTupleSchemeFactory implements SchemeFactory {
      public connection_getSchemaTerm_resultTupleScheme getScheme() {
        return new connection_getSchemaTerm_resultTupleScheme();
      }
    }

    private static class connection_getSchemaTerm_resultTupleScheme extends TupleScheme<connection_getSchemaTerm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getSchemaTerm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getSchemaTerm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class connection_getCatalogs_args implements org.apache.thrift.TBase<connection_getCatalogs_args, connection_getCatalogs_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getCatalogs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getCatalogs_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getCatalogs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getCatalogs_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getCatalogs_args.class, metaDataMap);
    }

    public connection_getCatalogs_args() {
    }

    public connection_getCatalogs_args(
      CCConnection connection)
    {
      this();
      this.connection = connection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getCatalogs_args(connection_getCatalogs_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
    }

    public connection_getCatalogs_args deepCopy() {
      return new connection_getCatalogs_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_getCatalogs_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getCatalogs_args)
        return this.equals((connection_getCatalogs_args)that);
      return false;
    }

    public boolean equals(connection_getCatalogs_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getCatalogs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getCatalogs_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getCatalogs_argsStandardSchemeFactory implements SchemeFactory {
      public connection_getCatalogs_argsStandardScheme getScheme() {
        return new connection_getCatalogs_argsStandardScheme();
      }
    }

    private static class connection_getCatalogs_argsStandardScheme extends StandardScheme<connection_getCatalogs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getCatalogs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getCatalogs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getCatalogs_argsTupleSchemeFactory implements SchemeFactory {
      public connection_getCatalogs_argsTupleScheme getScheme() {
        return new connection_getCatalogs_argsTupleScheme();
      }
    }

    private static class connection_getCatalogs_argsTupleScheme extends TupleScheme<connection_getCatalogs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getCatalogs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getCatalogs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
      }
    }

  }

  public static class connection_getCatalogs_result implements org.apache.thrift.TBase<connection_getCatalogs_result, connection_getCatalogs_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getCatalogs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getCatalogs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getCatalogs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getCatalogs_resultTupleSchemeFactory());
    }

    public CCResultSet success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCResultSet.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getCatalogs_result.class, metaDataMap);
    }

    public connection_getCatalogs_result() {
    }

    public connection_getCatalogs_result(
      CCResultSet success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getCatalogs_result(connection_getCatalogs_result other) {
      if (other.isSetSuccess()) {
        this.success = new CCResultSet(other.success);
      }
    }

    public connection_getCatalogs_result deepCopy() {
      return new connection_getCatalogs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CCResultSet getSuccess() {
      return this.success;
    }

    public connection_getCatalogs_result setSuccess(CCResultSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CCResultSet)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getCatalogs_result)
        return this.equals((connection_getCatalogs_result)that);
      return false;
    }

    public boolean equals(connection_getCatalogs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getCatalogs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getCatalogs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getCatalogs_resultStandardSchemeFactory implements SchemeFactory {
      public connection_getCatalogs_resultStandardScheme getScheme() {
        return new connection_getCatalogs_resultStandardScheme();
      }
    }

    private static class connection_getCatalogs_resultStandardScheme extends StandardScheme<connection_getCatalogs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getCatalogs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CCResultSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getCatalogs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getCatalogs_resultTupleSchemeFactory implements SchemeFactory {
      public connection_getCatalogs_resultTupleScheme getScheme() {
        return new connection_getCatalogs_resultTupleScheme();
      }
    }

    private static class connection_getCatalogs_resultTupleScheme extends TupleScheme<connection_getCatalogs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getCatalogs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getCatalogs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CCResultSet();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class connection_getSchemas_args implements org.apache.thrift.TBase<connection_getSchemas_args, connection_getSchemas_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getSchemas_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getSchemas_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SCHEMA_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("schemaPattern", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getSchemas_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getSchemas_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required
    public String catalog; // required
    public String schemaPattern; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection"),
      CATALOG((short)2, "catalog"),
      SCHEMA_PATTERN((short)3, "schemaPattern");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          case 2: // CATALOG
            return CATALOG;
          case 3: // SCHEMA_PATTERN
            return SCHEMA_PATTERN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      tmpMap.put(_Fields.CATALOG, new org.apache.thrift.meta_data.FieldMetaData("catalog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHEMA_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("schemaPattern", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getSchemas_args.class, metaDataMap);
    }

    public connection_getSchemas_args() {
    }

    public connection_getSchemas_args(
      CCConnection connection,
      String catalog,
      String schemaPattern)
    {
      this();
      this.connection = connection;
      this.catalog = catalog;
      this.schemaPattern = schemaPattern;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getSchemas_args(connection_getSchemas_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
      if (other.isSetCatalog()) {
        this.catalog = other.catalog;
      }
      if (other.isSetSchemaPattern()) {
        this.schemaPattern = other.schemaPattern;
      }
    }

    public connection_getSchemas_args deepCopy() {
      return new connection_getSchemas_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
      this.catalog = null;
      this.schemaPattern = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_getSchemas_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public String getCatalog() {
      return this.catalog;
    }

    public connection_getSchemas_args setCatalog(String catalog) {
      this.catalog = catalog;
      return this;
    }

    public void unsetCatalog() {
      this.catalog = null;
    }

    /** Returns true if field catalog is set (has been assigned a value) and false otherwise */
    public boolean isSetCatalog() {
      return this.catalog != null;
    }

    public void setCatalogIsSet(boolean value) {
      if (!value) {
        this.catalog = null;
      }
    }

    public String getSchemaPattern() {
      return this.schemaPattern;
    }

    public connection_getSchemas_args setSchemaPattern(String schemaPattern) {
      this.schemaPattern = schemaPattern;
      return this;
    }

    public void unsetSchemaPattern() {
      this.schemaPattern = null;
    }

    /** Returns true if field schemaPattern is set (has been assigned a value) and false otherwise */
    public boolean isSetSchemaPattern() {
      return this.schemaPattern != null;
    }

    public void setSchemaPatternIsSet(boolean value) {
      if (!value) {
        this.schemaPattern = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      case CATALOG:
        if (value == null) {
          unsetCatalog();
        } else {
          setCatalog((String)value);
        }
        break;

      case SCHEMA_PATTERN:
        if (value == null) {
          unsetSchemaPattern();
        } else {
          setSchemaPattern((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      case CATALOG:
        return getCatalog();

      case SCHEMA_PATTERN:
        return getSchemaPattern();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      case CATALOG:
        return isSetCatalog();
      case SCHEMA_PATTERN:
        return isSetSchemaPattern();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getSchemas_args)
        return this.equals((connection_getSchemas_args)that);
      return false;
    }

    public boolean equals(connection_getSchemas_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      boolean this_present_catalog = true && this.isSetCatalog();
      boolean that_present_catalog = true && that.isSetCatalog();
      if (this_present_catalog || that_present_catalog) {
        if (!(this_present_catalog && that_present_catalog))
          return false;
        if (!this.catalog.equals(that.catalog))
          return false;
      }

      boolean this_present_schemaPattern = true && this.isSetSchemaPattern();
      boolean that_present_schemaPattern = true && that.isSetSchemaPattern();
      if (this_present_schemaPattern || that_present_schemaPattern) {
        if (!(this_present_schemaPattern && that_present_schemaPattern))
          return false;
        if (!this.schemaPattern.equals(that.schemaPattern))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getSchemas_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCatalog()).compareTo(other.isSetCatalog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCatalog()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog, other.catalog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSchemaPattern()).compareTo(other.isSetSchemaPattern());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchemaPattern()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemaPattern, other.schemaPattern);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getSchemas_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("catalog:");
      if (this.catalog == null) {
        sb.append("null");
      } else {
        sb.append(this.catalog);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schemaPattern:");
      if (this.schemaPattern == null) {
        sb.append("null");
      } else {
        sb.append(this.schemaPattern);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getSchemas_argsStandardSchemeFactory implements SchemeFactory {
      public connection_getSchemas_argsStandardScheme getScheme() {
        return new connection_getSchemas_argsStandardScheme();
      }
    }

    private static class connection_getSchemas_argsStandardScheme extends StandardScheme<connection_getSchemas_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getSchemas_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATALOG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.catalog = iprot.readString();
                struct.setCatalogIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SCHEMA_PATTERN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schemaPattern = iprot.readString();
                struct.setSchemaPatternIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getSchemas_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.catalog != null) {
          oprot.writeFieldBegin(CATALOG_FIELD_DESC);
          oprot.writeString(struct.catalog);
          oprot.writeFieldEnd();
        }
        if (struct.schemaPattern != null) {
          oprot.writeFieldBegin(SCHEMA_PATTERN_FIELD_DESC);
          oprot.writeString(struct.schemaPattern);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getSchemas_argsTupleSchemeFactory implements SchemeFactory {
      public connection_getSchemas_argsTupleScheme getScheme() {
        return new connection_getSchemas_argsTupleScheme();
      }
    }

    private static class connection_getSchemas_argsTupleScheme extends TupleScheme<connection_getSchemas_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getSchemas_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        if (struct.isSetCatalog()) {
          optionals.set(1);
        }
        if (struct.isSetSchemaPattern()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
        if (struct.isSetCatalog()) {
          oprot.writeString(struct.catalog);
        }
        if (struct.isSetSchemaPattern()) {
          oprot.writeString(struct.schemaPattern);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getSchemas_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.catalog = iprot.readString();
          struct.setCatalogIsSet(true);
        }
        if (incoming.get(2)) {
          struct.schemaPattern = iprot.readString();
          struct.setSchemaPatternIsSet(true);
        }
      }
    }

  }

  public static class connection_getSchemas_result implements org.apache.thrift.TBase<connection_getSchemas_result, connection_getSchemas_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getSchemas_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getSchemas_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getSchemas_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getSchemas_resultTupleSchemeFactory());
    }

    public CCResultSet success; // required
    public CCSQLException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCResultSet.class)));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getSchemas_result.class, metaDataMap);
    }

    public connection_getSchemas_result() {
    }

    public connection_getSchemas_result(
      CCResultSet success,
      CCSQLException ouch)
    {
      this();
      this.success = success;
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getSchemas_result(connection_getSchemas_result other) {
      if (other.isSetSuccess()) {
        this.success = new CCResultSet(other.success);
      }
      if (other.isSetOuch()) {
        this.ouch = new CCSQLException(other.ouch);
      }
    }

    public connection_getSchemas_result deepCopy() {
      return new connection_getSchemas_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch = null;
    }

    public CCResultSet getSuccess() {
      return this.success;
    }

    public connection_getSchemas_result setSuccess(CCResultSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CCSQLException getOuch() {
      return this.ouch;
    }

    public connection_getSchemas_result setOuch(CCSQLException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CCResultSet)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((CCSQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getSchemas_result)
        return this.equals((connection_getSchemas_result)that);
      return false;
    }

    public boolean equals(connection_getSchemas_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getSchemas_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getSchemas_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getSchemas_resultStandardSchemeFactory implements SchemeFactory {
      public connection_getSchemas_resultStandardScheme getScheme() {
        return new connection_getSchemas_resultStandardScheme();
      }
    }

    private static class connection_getSchemas_resultStandardScheme extends StandardScheme<connection_getSchemas_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getSchemas_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CCResultSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new CCSQLException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getSchemas_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getSchemas_resultTupleSchemeFactory implements SchemeFactory {
      public connection_getSchemas_resultTupleScheme getScheme() {
        return new connection_getSchemas_resultTupleScheme();
      }
    }

    private static class connection_getSchemas_resultTupleScheme extends TupleScheme<connection_getSchemas_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getSchemas_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getSchemas_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CCResultSet();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new CCSQLException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class connection_getTables_args implements org.apache.thrift.TBase<connection_getTables_args, connection_getTables_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getTables_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getTables_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SCHEMA_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("schemaPattern", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNamePattern", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("types", org.apache.thrift.protocol.TType.LIST, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getTables_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getTables_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required
    public String catalog; // required
    public String schemaPattern; // required
    public String tableNamePattern; // required
    public List<String> types; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection"),
      CATALOG((short)2, "catalog"),
      SCHEMA_PATTERN((short)3, "schemaPattern"),
      TABLE_NAME_PATTERN((short)4, "tableNamePattern"),
      TYPES((short)5, "types");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          case 2: // CATALOG
            return CATALOG;
          case 3: // SCHEMA_PATTERN
            return SCHEMA_PATTERN;
          case 4: // TABLE_NAME_PATTERN
            return TABLE_NAME_PATTERN;
          case 5: // TYPES
            return TYPES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      tmpMap.put(_Fields.CATALOG, new org.apache.thrift.meta_data.FieldMetaData("catalog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHEMA_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("schemaPattern", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAME_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("tableNamePattern", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPES, new org.apache.thrift.meta_data.FieldMetaData("types", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getTables_args.class, metaDataMap);
    }

    public connection_getTables_args() {
    }

    public connection_getTables_args(
      CCConnection connection,
      String catalog,
      String schemaPattern,
      String tableNamePattern,
      List<String> types)
    {
      this();
      this.connection = connection;
      this.catalog = catalog;
      this.schemaPattern = schemaPattern;
      this.tableNamePattern = tableNamePattern;
      this.types = types;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getTables_args(connection_getTables_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
      if (other.isSetCatalog()) {
        this.catalog = other.catalog;
      }
      if (other.isSetSchemaPattern()) {
        this.schemaPattern = other.schemaPattern;
      }
      if (other.isSetTableNamePattern()) {
        this.tableNamePattern = other.tableNamePattern;
      }
      if (other.isSetTypes()) {
        List<String> __this__types = new ArrayList<String>(other.types);
        this.types = __this__types;
      }
    }

    public connection_getTables_args deepCopy() {
      return new connection_getTables_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
      this.catalog = null;
      this.schemaPattern = null;
      this.tableNamePattern = null;
      this.types = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_getTables_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public String getCatalog() {
      return this.catalog;
    }

    public connection_getTables_args setCatalog(String catalog) {
      this.catalog = catalog;
      return this;
    }

    public void unsetCatalog() {
      this.catalog = null;
    }

    /** Returns true if field catalog is set (has been assigned a value) and false otherwise */
    public boolean isSetCatalog() {
      return this.catalog != null;
    }

    public void setCatalogIsSet(boolean value) {
      if (!value) {
        this.catalog = null;
      }
    }

    public String getSchemaPattern() {
      return this.schemaPattern;
    }

    public connection_getTables_args setSchemaPattern(String schemaPattern) {
      this.schemaPattern = schemaPattern;
      return this;
    }

    public void unsetSchemaPattern() {
      this.schemaPattern = null;
    }

    /** Returns true if field schemaPattern is set (has been assigned a value) and false otherwise */
    public boolean isSetSchemaPattern() {
      return this.schemaPattern != null;
    }

    public void setSchemaPatternIsSet(boolean value) {
      if (!value) {
        this.schemaPattern = null;
      }
    }

    public String getTableNamePattern() {
      return this.tableNamePattern;
    }

    public connection_getTables_args setTableNamePattern(String tableNamePattern) {
      this.tableNamePattern = tableNamePattern;
      return this;
    }

    public void unsetTableNamePattern() {
      this.tableNamePattern = null;
    }

    /** Returns true if field tableNamePattern is set (has been assigned a value) and false otherwise */
    public boolean isSetTableNamePattern() {
      return this.tableNamePattern != null;
    }

    public void setTableNamePatternIsSet(boolean value) {
      if (!value) {
        this.tableNamePattern = null;
      }
    }

    public int getTypesSize() {
      return (this.types == null) ? 0 : this.types.size();
    }

    public java.util.Iterator<String> getTypesIterator() {
      return (this.types == null) ? null : this.types.iterator();
    }

    public void addToTypes(String elem) {
      if (this.types == null) {
        this.types = new ArrayList<String>();
      }
      this.types.add(elem);
    }

    public List<String> getTypes() {
      return this.types;
    }

    public connection_getTables_args setTypes(List<String> types) {
      this.types = types;
      return this;
    }

    public void unsetTypes() {
      this.types = null;
    }

    /** Returns true if field types is set (has been assigned a value) and false otherwise */
    public boolean isSetTypes() {
      return this.types != null;
    }

    public void setTypesIsSet(boolean value) {
      if (!value) {
        this.types = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      case CATALOG:
        if (value == null) {
          unsetCatalog();
        } else {
          setCatalog((String)value);
        }
        break;

      case SCHEMA_PATTERN:
        if (value == null) {
          unsetSchemaPattern();
        } else {
          setSchemaPattern((String)value);
        }
        break;

      case TABLE_NAME_PATTERN:
        if (value == null) {
          unsetTableNamePattern();
        } else {
          setTableNamePattern((String)value);
        }
        break;

      case TYPES:
        if (value == null) {
          unsetTypes();
        } else {
          setTypes((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      case CATALOG:
        return getCatalog();

      case SCHEMA_PATTERN:
        return getSchemaPattern();

      case TABLE_NAME_PATTERN:
        return getTableNamePattern();

      case TYPES:
        return getTypes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      case CATALOG:
        return isSetCatalog();
      case SCHEMA_PATTERN:
        return isSetSchemaPattern();
      case TABLE_NAME_PATTERN:
        return isSetTableNamePattern();
      case TYPES:
        return isSetTypes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getTables_args)
        return this.equals((connection_getTables_args)that);
      return false;
    }

    public boolean equals(connection_getTables_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      boolean this_present_catalog = true && this.isSetCatalog();
      boolean that_present_catalog = true && that.isSetCatalog();
      if (this_present_catalog || that_present_catalog) {
        if (!(this_present_catalog && that_present_catalog))
          return false;
        if (!this.catalog.equals(that.catalog))
          return false;
      }

      boolean this_present_schemaPattern = true && this.isSetSchemaPattern();
      boolean that_present_schemaPattern = true && that.isSetSchemaPattern();
      if (this_present_schemaPattern || that_present_schemaPattern) {
        if (!(this_present_schemaPattern && that_present_schemaPattern))
          return false;
        if (!this.schemaPattern.equals(that.schemaPattern))
          return false;
      }

      boolean this_present_tableNamePattern = true && this.isSetTableNamePattern();
      boolean that_present_tableNamePattern = true && that.isSetTableNamePattern();
      if (this_present_tableNamePattern || that_present_tableNamePattern) {
        if (!(this_present_tableNamePattern && that_present_tableNamePattern))
          return false;
        if (!this.tableNamePattern.equals(that.tableNamePattern))
          return false;
      }

      boolean this_present_types = true && this.isSetTypes();
      boolean that_present_types = true && that.isSetTypes();
      if (this_present_types || that_present_types) {
        if (!(this_present_types && that_present_types))
          return false;
        if (!this.types.equals(that.types))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getTables_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCatalog()).compareTo(other.isSetCatalog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCatalog()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog, other.catalog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSchemaPattern()).compareTo(other.isSetSchemaPattern());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchemaPattern()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemaPattern, other.schemaPattern);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableNamePattern()).compareTo(other.isSetTableNamePattern());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableNamePattern()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNamePattern, other.tableNamePattern);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypes()).compareTo(other.isSetTypes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.types, other.types);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getTables_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("catalog:");
      if (this.catalog == null) {
        sb.append("null");
      } else {
        sb.append(this.catalog);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schemaPattern:");
      if (this.schemaPattern == null) {
        sb.append("null");
      } else {
        sb.append(this.schemaPattern);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableNamePattern:");
      if (this.tableNamePattern == null) {
        sb.append("null");
      } else {
        sb.append(this.tableNamePattern);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("types:");
      if (this.types == null) {
        sb.append("null");
      } else {
        sb.append(this.types);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getTables_argsStandardSchemeFactory implements SchemeFactory {
      public connection_getTables_argsStandardScheme getScheme() {
        return new connection_getTables_argsStandardScheme();
      }
    }

    private static class connection_getTables_argsStandardScheme extends StandardScheme<connection_getTables_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getTables_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATALOG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.catalog = iprot.readString();
                struct.setCatalogIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SCHEMA_PATTERN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schemaPattern = iprot.readString();
                struct.setSchemaPatternIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TABLE_NAME_PATTERN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableNamePattern = iprot.readString();
                struct.setTableNamePatternIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TYPES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.types = new ArrayList<String>(_list42.size);
                  for (int _i43 = 0; _i43 < _list42.size; ++_i43)
                  {
                    String _elem44;
                    _elem44 = iprot.readString();
                    struct.types.add(_elem44);
                  }
                  iprot.readListEnd();
                }
                struct.setTypesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getTables_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.catalog != null) {
          oprot.writeFieldBegin(CATALOG_FIELD_DESC);
          oprot.writeString(struct.catalog);
          oprot.writeFieldEnd();
        }
        if (struct.schemaPattern != null) {
          oprot.writeFieldBegin(SCHEMA_PATTERN_FIELD_DESC);
          oprot.writeString(struct.schemaPattern);
          oprot.writeFieldEnd();
        }
        if (struct.tableNamePattern != null) {
          oprot.writeFieldBegin(TABLE_NAME_PATTERN_FIELD_DESC);
          oprot.writeString(struct.tableNamePattern);
          oprot.writeFieldEnd();
        }
        if (struct.types != null) {
          oprot.writeFieldBegin(TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.types.size()));
            for (String _iter45 : struct.types)
            {
              oprot.writeString(_iter45);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getTables_argsTupleSchemeFactory implements SchemeFactory {
      public connection_getTables_argsTupleScheme getScheme() {
        return new connection_getTables_argsTupleScheme();
      }
    }

    private static class connection_getTables_argsTupleScheme extends TupleScheme<connection_getTables_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getTables_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        if (struct.isSetCatalog()) {
          optionals.set(1);
        }
        if (struct.isSetSchemaPattern()) {
          optionals.set(2);
        }
        if (struct.isSetTableNamePattern()) {
          optionals.set(3);
        }
        if (struct.isSetTypes()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
        if (struct.isSetCatalog()) {
          oprot.writeString(struct.catalog);
        }
        if (struct.isSetSchemaPattern()) {
          oprot.writeString(struct.schemaPattern);
        }
        if (struct.isSetTableNamePattern()) {
          oprot.writeString(struct.tableNamePattern);
        }
        if (struct.isSetTypes()) {
          {
            oprot.writeI32(struct.types.size());
            for (String _iter46 : struct.types)
            {
              oprot.writeString(_iter46);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getTables_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.catalog = iprot.readString();
          struct.setCatalogIsSet(true);
        }
        if (incoming.get(2)) {
          struct.schemaPattern = iprot.readString();
          struct.setSchemaPatternIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tableNamePattern = iprot.readString();
          struct.setTableNamePatternIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.types = new ArrayList<String>(_list47.size);
            for (int _i48 = 0; _i48 < _list47.size; ++_i48)
            {
              String _elem49;
              _elem49 = iprot.readString();
              struct.types.add(_elem49);
            }
          }
          struct.setTypesIsSet(true);
        }
      }
    }

  }

  public static class connection_getTables_result implements org.apache.thrift.TBase<connection_getTables_result, connection_getTables_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getTables_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getTables_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getTables_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getTables_resultTupleSchemeFactory());
    }

    public CCResultSet success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCResultSet.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getTables_result.class, metaDataMap);
    }

    public connection_getTables_result() {
    }

    public connection_getTables_result(
      CCResultSet success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getTables_result(connection_getTables_result other) {
      if (other.isSetSuccess()) {
        this.success = new CCResultSet(other.success);
      }
    }

    public connection_getTables_result deepCopy() {
      return new connection_getTables_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CCResultSet getSuccess() {
      return this.success;
    }

    public connection_getTables_result setSuccess(CCResultSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CCResultSet)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getTables_result)
        return this.equals((connection_getTables_result)that);
      return false;
    }

    public boolean equals(connection_getTables_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getTables_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getTables_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getTables_resultStandardSchemeFactory implements SchemeFactory {
      public connection_getTables_resultStandardScheme getScheme() {
        return new connection_getTables_resultStandardScheme();
      }
    }

    private static class connection_getTables_resultStandardScheme extends StandardScheme<connection_getTables_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getTables_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CCResultSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getTables_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getTables_resultTupleSchemeFactory implements SchemeFactory {
      public connection_getTables_resultTupleScheme getScheme() {
        return new connection_getTables_resultTupleScheme();
      }
    }

    private static class connection_getTables_resultTupleScheme extends TupleScheme<connection_getTables_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getTables_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getTables_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CCResultSet();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class connection_getColumns_args implements org.apache.thrift.TBase<connection_getColumns_args, connection_getColumns_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getColumns_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getColumns_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SCHEMA_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("schemaPattern", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNamePattern", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField COLUMN_NAME_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("columnNamePattern", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getColumns_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getColumns_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required
    public String catalog; // required
    public String schemaPattern; // required
    public String tableNamePattern; // required
    public String columnNamePattern; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection"),
      CATALOG((short)2, "catalog"),
      SCHEMA_PATTERN((short)3, "schemaPattern"),
      TABLE_NAME_PATTERN((short)4, "tableNamePattern"),
      COLUMN_NAME_PATTERN((short)5, "columnNamePattern");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          case 2: // CATALOG
            return CATALOG;
          case 3: // SCHEMA_PATTERN
            return SCHEMA_PATTERN;
          case 4: // TABLE_NAME_PATTERN
            return TABLE_NAME_PATTERN;
          case 5: // COLUMN_NAME_PATTERN
            return COLUMN_NAME_PATTERN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      tmpMap.put(_Fields.CATALOG, new org.apache.thrift.meta_data.FieldMetaData("catalog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHEMA_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("schemaPattern", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAME_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("tableNamePattern", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMN_NAME_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("columnNamePattern", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getColumns_args.class, metaDataMap);
    }

    public connection_getColumns_args() {
    }

    public connection_getColumns_args(
      CCConnection connection,
      String catalog,
      String schemaPattern,
      String tableNamePattern,
      String columnNamePattern)
    {
      this();
      this.connection = connection;
      this.catalog = catalog;
      this.schemaPattern = schemaPattern;
      this.tableNamePattern = tableNamePattern;
      this.columnNamePattern = columnNamePattern;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getColumns_args(connection_getColumns_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
      if (other.isSetCatalog()) {
        this.catalog = other.catalog;
      }
      if (other.isSetSchemaPattern()) {
        this.schemaPattern = other.schemaPattern;
      }
      if (other.isSetTableNamePattern()) {
        this.tableNamePattern = other.tableNamePattern;
      }
      if (other.isSetColumnNamePattern()) {
        this.columnNamePattern = other.columnNamePattern;
      }
    }

    public connection_getColumns_args deepCopy() {
      return new connection_getColumns_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
      this.catalog = null;
      this.schemaPattern = null;
      this.tableNamePattern = null;
      this.columnNamePattern = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_getColumns_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public String getCatalog() {
      return this.catalog;
    }

    public connection_getColumns_args setCatalog(String catalog) {
      this.catalog = catalog;
      return this;
    }

    public void unsetCatalog() {
      this.catalog = null;
    }

    /** Returns true if field catalog is set (has been assigned a value) and false otherwise */
    public boolean isSetCatalog() {
      return this.catalog != null;
    }

    public void setCatalogIsSet(boolean value) {
      if (!value) {
        this.catalog = null;
      }
    }

    public String getSchemaPattern() {
      return this.schemaPattern;
    }

    public connection_getColumns_args setSchemaPattern(String schemaPattern) {
      this.schemaPattern = schemaPattern;
      return this;
    }

    public void unsetSchemaPattern() {
      this.schemaPattern = null;
    }

    /** Returns true if field schemaPattern is set (has been assigned a value) and false otherwise */
    public boolean isSetSchemaPattern() {
      return this.schemaPattern != null;
    }

    public void setSchemaPatternIsSet(boolean value) {
      if (!value) {
        this.schemaPattern = null;
      }
    }

    public String getTableNamePattern() {
      return this.tableNamePattern;
    }

    public connection_getColumns_args setTableNamePattern(String tableNamePattern) {
      this.tableNamePattern = tableNamePattern;
      return this;
    }

    public void unsetTableNamePattern() {
      this.tableNamePattern = null;
    }

    /** Returns true if field tableNamePattern is set (has been assigned a value) and false otherwise */
    public boolean isSetTableNamePattern() {
      return this.tableNamePattern != null;
    }

    public void setTableNamePatternIsSet(boolean value) {
      if (!value) {
        this.tableNamePattern = null;
      }
    }

    public String getColumnNamePattern() {
      return this.columnNamePattern;
    }

    public connection_getColumns_args setColumnNamePattern(String columnNamePattern) {
      this.columnNamePattern = columnNamePattern;
      return this;
    }

    public void unsetColumnNamePattern() {
      this.columnNamePattern = null;
    }

    /** Returns true if field columnNamePattern is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnNamePattern() {
      return this.columnNamePattern != null;
    }

    public void setColumnNamePatternIsSet(boolean value) {
      if (!value) {
        this.columnNamePattern = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      case CATALOG:
        if (value == null) {
          unsetCatalog();
        } else {
          setCatalog((String)value);
        }
        break;

      case SCHEMA_PATTERN:
        if (value == null) {
          unsetSchemaPattern();
        } else {
          setSchemaPattern((String)value);
        }
        break;

      case TABLE_NAME_PATTERN:
        if (value == null) {
          unsetTableNamePattern();
        } else {
          setTableNamePattern((String)value);
        }
        break;

      case COLUMN_NAME_PATTERN:
        if (value == null) {
          unsetColumnNamePattern();
        } else {
          setColumnNamePattern((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      case CATALOG:
        return getCatalog();

      case SCHEMA_PATTERN:
        return getSchemaPattern();

      case TABLE_NAME_PATTERN:
        return getTableNamePattern();

      case COLUMN_NAME_PATTERN:
        return getColumnNamePattern();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      case CATALOG:
        return isSetCatalog();
      case SCHEMA_PATTERN:
        return isSetSchemaPattern();
      case TABLE_NAME_PATTERN:
        return isSetTableNamePattern();
      case COLUMN_NAME_PATTERN:
        return isSetColumnNamePattern();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getColumns_args)
        return this.equals((connection_getColumns_args)that);
      return false;
    }

    public boolean equals(connection_getColumns_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      boolean this_present_catalog = true && this.isSetCatalog();
      boolean that_present_catalog = true && that.isSetCatalog();
      if (this_present_catalog || that_present_catalog) {
        if (!(this_present_catalog && that_present_catalog))
          return false;
        if (!this.catalog.equals(that.catalog))
          return false;
      }

      boolean this_present_schemaPattern = true && this.isSetSchemaPattern();
      boolean that_present_schemaPattern = true && that.isSetSchemaPattern();
      if (this_present_schemaPattern || that_present_schemaPattern) {
        if (!(this_present_schemaPattern && that_present_schemaPattern))
          return false;
        if (!this.schemaPattern.equals(that.schemaPattern))
          return false;
      }

      boolean this_present_tableNamePattern = true && this.isSetTableNamePattern();
      boolean that_present_tableNamePattern = true && that.isSetTableNamePattern();
      if (this_present_tableNamePattern || that_present_tableNamePattern) {
        if (!(this_present_tableNamePattern && that_present_tableNamePattern))
          return false;
        if (!this.tableNamePattern.equals(that.tableNamePattern))
          return false;
      }

      boolean this_present_columnNamePattern = true && this.isSetColumnNamePattern();
      boolean that_present_columnNamePattern = true && that.isSetColumnNamePattern();
      if (this_present_columnNamePattern || that_present_columnNamePattern) {
        if (!(this_present_columnNamePattern && that_present_columnNamePattern))
          return false;
        if (!this.columnNamePattern.equals(that.columnNamePattern))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getColumns_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCatalog()).compareTo(other.isSetCatalog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCatalog()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog, other.catalog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSchemaPattern()).compareTo(other.isSetSchemaPattern());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchemaPattern()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemaPattern, other.schemaPattern);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableNamePattern()).compareTo(other.isSetTableNamePattern());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableNamePattern()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNamePattern, other.tableNamePattern);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnNamePattern()).compareTo(other.isSetColumnNamePattern());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnNamePattern()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnNamePattern, other.columnNamePattern);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getColumns_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("catalog:");
      if (this.catalog == null) {
        sb.append("null");
      } else {
        sb.append(this.catalog);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schemaPattern:");
      if (this.schemaPattern == null) {
        sb.append("null");
      } else {
        sb.append(this.schemaPattern);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableNamePattern:");
      if (this.tableNamePattern == null) {
        sb.append("null");
      } else {
        sb.append(this.tableNamePattern);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnNamePattern:");
      if (this.columnNamePattern == null) {
        sb.append("null");
      } else {
        sb.append(this.columnNamePattern);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getColumns_argsStandardSchemeFactory implements SchemeFactory {
      public connection_getColumns_argsStandardScheme getScheme() {
        return new connection_getColumns_argsStandardScheme();
      }
    }

    private static class connection_getColumns_argsStandardScheme extends StandardScheme<connection_getColumns_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getColumns_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATALOG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.catalog = iprot.readString();
                struct.setCatalogIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SCHEMA_PATTERN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schemaPattern = iprot.readString();
                struct.setSchemaPatternIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TABLE_NAME_PATTERN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableNamePattern = iprot.readString();
                struct.setTableNamePatternIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // COLUMN_NAME_PATTERN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.columnNamePattern = iprot.readString();
                struct.setColumnNamePatternIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getColumns_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.catalog != null) {
          oprot.writeFieldBegin(CATALOG_FIELD_DESC);
          oprot.writeString(struct.catalog);
          oprot.writeFieldEnd();
        }
        if (struct.schemaPattern != null) {
          oprot.writeFieldBegin(SCHEMA_PATTERN_FIELD_DESC);
          oprot.writeString(struct.schemaPattern);
          oprot.writeFieldEnd();
        }
        if (struct.tableNamePattern != null) {
          oprot.writeFieldBegin(TABLE_NAME_PATTERN_FIELD_DESC);
          oprot.writeString(struct.tableNamePattern);
          oprot.writeFieldEnd();
        }
        if (struct.columnNamePattern != null) {
          oprot.writeFieldBegin(COLUMN_NAME_PATTERN_FIELD_DESC);
          oprot.writeString(struct.columnNamePattern);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getColumns_argsTupleSchemeFactory implements SchemeFactory {
      public connection_getColumns_argsTupleScheme getScheme() {
        return new connection_getColumns_argsTupleScheme();
      }
    }

    private static class connection_getColumns_argsTupleScheme extends TupleScheme<connection_getColumns_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getColumns_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        if (struct.isSetCatalog()) {
          optionals.set(1);
        }
        if (struct.isSetSchemaPattern()) {
          optionals.set(2);
        }
        if (struct.isSetTableNamePattern()) {
          optionals.set(3);
        }
        if (struct.isSetColumnNamePattern()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
        if (struct.isSetCatalog()) {
          oprot.writeString(struct.catalog);
        }
        if (struct.isSetSchemaPattern()) {
          oprot.writeString(struct.schemaPattern);
        }
        if (struct.isSetTableNamePattern()) {
          oprot.writeString(struct.tableNamePattern);
        }
        if (struct.isSetColumnNamePattern()) {
          oprot.writeString(struct.columnNamePattern);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getColumns_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.catalog = iprot.readString();
          struct.setCatalogIsSet(true);
        }
        if (incoming.get(2)) {
          struct.schemaPattern = iprot.readString();
          struct.setSchemaPatternIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tableNamePattern = iprot.readString();
          struct.setTableNamePatternIsSet(true);
        }
        if (incoming.get(4)) {
          struct.columnNamePattern = iprot.readString();
          struct.setColumnNamePatternIsSet(true);
        }
      }
    }

  }

  public static class connection_getColumns_result implements org.apache.thrift.TBase<connection_getColumns_result, connection_getColumns_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getColumns_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getColumns_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getColumns_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getColumns_resultTupleSchemeFactory());
    }

    public CCResultSet success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCResultSet.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getColumns_result.class, metaDataMap);
    }

    public connection_getColumns_result() {
    }

    public connection_getColumns_result(
      CCResultSet success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getColumns_result(connection_getColumns_result other) {
      if (other.isSetSuccess()) {
        this.success = new CCResultSet(other.success);
      }
    }

    public connection_getColumns_result deepCopy() {
      return new connection_getColumns_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CCResultSet getSuccess() {
      return this.success;
    }

    public connection_getColumns_result setSuccess(CCResultSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CCResultSet)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getColumns_result)
        return this.equals((connection_getColumns_result)that);
      return false;
    }

    public boolean equals(connection_getColumns_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getColumns_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getColumns_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getColumns_resultStandardSchemeFactory implements SchemeFactory {
      public connection_getColumns_resultStandardScheme getScheme() {
        return new connection_getColumns_resultStandardScheme();
      }
    }

    private static class connection_getColumns_resultStandardScheme extends StandardScheme<connection_getColumns_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getColumns_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CCResultSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getColumns_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getColumns_resultTupleSchemeFactory implements SchemeFactory {
      public connection_getColumns_resultTupleScheme getScheme() {
        return new connection_getColumns_resultTupleScheme();
      }
    }

    private static class connection_getColumns_resultTupleScheme extends TupleScheme<connection_getColumns_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getColumns_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getColumns_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CCResultSet();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class connection_getSQLKeywords_args implements org.apache.thrift.TBase<connection_getSQLKeywords_args, connection_getSQLKeywords_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getSQLKeywords_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getSQLKeywords_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getSQLKeywords_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getSQLKeywords_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getSQLKeywords_args.class, metaDataMap);
    }

    public connection_getSQLKeywords_args() {
    }

    public connection_getSQLKeywords_args(
      CCConnection connection)
    {
      this();
      this.connection = connection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getSQLKeywords_args(connection_getSQLKeywords_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
    }

    public connection_getSQLKeywords_args deepCopy() {
      return new connection_getSQLKeywords_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_getSQLKeywords_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getSQLKeywords_args)
        return this.equals((connection_getSQLKeywords_args)that);
      return false;
    }

    public boolean equals(connection_getSQLKeywords_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getSQLKeywords_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getSQLKeywords_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getSQLKeywords_argsStandardSchemeFactory implements SchemeFactory {
      public connection_getSQLKeywords_argsStandardScheme getScheme() {
        return new connection_getSQLKeywords_argsStandardScheme();
      }
    }

    private static class connection_getSQLKeywords_argsStandardScheme extends StandardScheme<connection_getSQLKeywords_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getSQLKeywords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getSQLKeywords_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getSQLKeywords_argsTupleSchemeFactory implements SchemeFactory {
      public connection_getSQLKeywords_argsTupleScheme getScheme() {
        return new connection_getSQLKeywords_argsTupleScheme();
      }
    }

    private static class connection_getSQLKeywords_argsTupleScheme extends TupleScheme<connection_getSQLKeywords_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getSQLKeywords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getSQLKeywords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
      }
    }

  }

  public static class connection_getSQLKeywords_result implements org.apache.thrift.TBase<connection_getSQLKeywords_result, connection_getSQLKeywords_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getSQLKeywords_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getSQLKeywords_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getSQLKeywords_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getSQLKeywords_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getSQLKeywords_result.class, metaDataMap);
    }

    public connection_getSQLKeywords_result() {
    }

    public connection_getSQLKeywords_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getSQLKeywords_result(connection_getSQLKeywords_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public connection_getSQLKeywords_result deepCopy() {
      return new connection_getSQLKeywords_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public connection_getSQLKeywords_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getSQLKeywords_result)
        return this.equals((connection_getSQLKeywords_result)that);
      return false;
    }

    public boolean equals(connection_getSQLKeywords_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getSQLKeywords_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getSQLKeywords_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getSQLKeywords_resultStandardSchemeFactory implements SchemeFactory {
      public connection_getSQLKeywords_resultStandardScheme getScheme() {
        return new connection_getSQLKeywords_resultStandardScheme();
      }
    }

    private static class connection_getSQLKeywords_resultStandardScheme extends StandardScheme<connection_getSQLKeywords_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getSQLKeywords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getSQLKeywords_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getSQLKeywords_resultTupleSchemeFactory implements SchemeFactory {
      public connection_getSQLKeywords_resultTupleScheme getScheme() {
        return new connection_getSQLKeywords_resultTupleScheme();
      }
    }

    private static class connection_getSQLKeywords_resultTupleScheme extends TupleScheme<connection_getSQLKeywords_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getSQLKeywords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getSQLKeywords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class connection_getTableTypes_args implements org.apache.thrift.TBase<connection_getTableTypes_args, connection_getTableTypes_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getTableTypes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getTableTypes_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getTableTypes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getTableTypes_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getTableTypes_args.class, metaDataMap);
    }

    public connection_getTableTypes_args() {
    }

    public connection_getTableTypes_args(
      CCConnection connection)
    {
      this();
      this.connection = connection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getTableTypes_args(connection_getTableTypes_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
    }

    public connection_getTableTypes_args deepCopy() {
      return new connection_getTableTypes_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_getTableTypes_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getTableTypes_args)
        return this.equals((connection_getTableTypes_args)that);
      return false;
    }

    public boolean equals(connection_getTableTypes_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getTableTypes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getTableTypes_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getTableTypes_argsStandardSchemeFactory implements SchemeFactory {
      public connection_getTableTypes_argsStandardScheme getScheme() {
        return new connection_getTableTypes_argsStandardScheme();
      }
    }

    private static class connection_getTableTypes_argsStandardScheme extends StandardScheme<connection_getTableTypes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getTableTypes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getTableTypes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getTableTypes_argsTupleSchemeFactory implements SchemeFactory {
      public connection_getTableTypes_argsTupleScheme getScheme() {
        return new connection_getTableTypes_argsTupleScheme();
      }
    }

    private static class connection_getTableTypes_argsTupleScheme extends TupleScheme<connection_getTableTypes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getTableTypes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getTableTypes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
      }
    }

  }

  public static class connection_getTableTypes_result implements org.apache.thrift.TBase<connection_getTableTypes_result, connection_getTableTypes_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getTableTypes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getTableTypes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getTableTypes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getTableTypes_resultTupleSchemeFactory());
    }

    public CCResultSet success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCResultSet.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getTableTypes_result.class, metaDataMap);
    }

    public connection_getTableTypes_result() {
    }

    public connection_getTableTypes_result(
      CCResultSet success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getTableTypes_result(connection_getTableTypes_result other) {
      if (other.isSetSuccess()) {
        this.success = new CCResultSet(other.success);
      }
    }

    public connection_getTableTypes_result deepCopy() {
      return new connection_getTableTypes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CCResultSet getSuccess() {
      return this.success;
    }

    public connection_getTableTypes_result setSuccess(CCResultSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CCResultSet)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getTableTypes_result)
        return this.equals((connection_getTableTypes_result)that);
      return false;
    }

    public boolean equals(connection_getTableTypes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getTableTypes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getTableTypes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getTableTypes_resultStandardSchemeFactory implements SchemeFactory {
      public connection_getTableTypes_resultStandardScheme getScheme() {
        return new connection_getTableTypes_resultStandardScheme();
      }
    }

    private static class connection_getTableTypes_resultStandardScheme extends StandardScheme<connection_getTableTypes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getTableTypes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CCResultSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getTableTypes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getTableTypes_resultTupleSchemeFactory implements SchemeFactory {
      public connection_getTableTypes_resultTupleScheme getScheme() {
        return new connection_getTableTypes_resultTupleScheme();
      }
    }

    private static class connection_getTableTypes_resultTupleScheme extends TupleScheme<connection_getTableTypes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getTableTypes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getTableTypes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CCResultSet();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class connection_getTypeInfo_args implements org.apache.thrift.TBase<connection_getTypeInfo_args, connection_getTypeInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getTypeInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getTypeInfo_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getTypeInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getTypeInfo_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getTypeInfo_args.class, metaDataMap);
    }

    public connection_getTypeInfo_args() {
    }

    public connection_getTypeInfo_args(
      CCConnection connection)
    {
      this();
      this.connection = connection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getTypeInfo_args(connection_getTypeInfo_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
    }

    public connection_getTypeInfo_args deepCopy() {
      return new connection_getTypeInfo_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public connection_getTypeInfo_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getTypeInfo_args)
        return this.equals((connection_getTypeInfo_args)that);
      return false;
    }

    public boolean equals(connection_getTypeInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getTypeInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getTypeInfo_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getTypeInfo_argsStandardSchemeFactory implements SchemeFactory {
      public connection_getTypeInfo_argsStandardScheme getScheme() {
        return new connection_getTypeInfo_argsStandardScheme();
      }
    }

    private static class connection_getTypeInfo_argsStandardScheme extends StandardScheme<connection_getTypeInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getTypeInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getTypeInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getTypeInfo_argsTupleSchemeFactory implements SchemeFactory {
      public connection_getTypeInfo_argsTupleScheme getScheme() {
        return new connection_getTypeInfo_argsTupleScheme();
      }
    }

    private static class connection_getTypeInfo_argsTupleScheme extends TupleScheme<connection_getTypeInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getTypeInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getTypeInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
      }
    }

  }

  public static class connection_getTypeInfo_result implements org.apache.thrift.TBase<connection_getTypeInfo_result, connection_getTypeInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<connection_getTypeInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connection_getTypeInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connection_getTypeInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connection_getTypeInfo_resultTupleSchemeFactory());
    }

    public CCResultSet success; // required
    public CCSQLException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCResultSet.class)));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connection_getTypeInfo_result.class, metaDataMap);
    }

    public connection_getTypeInfo_result() {
    }

    public connection_getTypeInfo_result(
      CCResultSet success,
      CCSQLException ouch)
    {
      this();
      this.success = success;
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connection_getTypeInfo_result(connection_getTypeInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new CCResultSet(other.success);
      }
      if (other.isSetOuch()) {
        this.ouch = new CCSQLException(other.ouch);
      }
    }

    public connection_getTypeInfo_result deepCopy() {
      return new connection_getTypeInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch = null;
    }

    public CCResultSet getSuccess() {
      return this.success;
    }

    public connection_getTypeInfo_result setSuccess(CCResultSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CCSQLException getOuch() {
      return this.ouch;
    }

    public connection_getTypeInfo_result setOuch(CCSQLException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CCResultSet)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((CCSQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connection_getTypeInfo_result)
        return this.equals((connection_getTypeInfo_result)that);
      return false;
    }

    public boolean equals(connection_getTypeInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connection_getTypeInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connection_getTypeInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connection_getTypeInfo_resultStandardSchemeFactory implements SchemeFactory {
      public connection_getTypeInfo_resultStandardScheme getScheme() {
        return new connection_getTypeInfo_resultStandardScheme();
      }
    }

    private static class connection_getTypeInfo_resultStandardScheme extends StandardScheme<connection_getTypeInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connection_getTypeInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CCResultSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new CCSQLException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connection_getTypeInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connection_getTypeInfo_resultTupleSchemeFactory implements SchemeFactory {
      public connection_getTypeInfo_resultTupleScheme getScheme() {
        return new connection_getTypeInfo_resultTupleScheme();
      }
    }

    private static class connection_getTypeInfo_resultTupleScheme extends TupleScheme<connection_getTypeInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connection_getTypeInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connection_getTypeInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CCResultSet();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new CCSQLException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class closeConnection_args implements org.apache.thrift.TBase<closeConnection_args, closeConnection_args._Fields>, java.io.Serializable, Cloneable, Comparable<closeConnection_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeConnection_args");

    private static final org.apache.thrift.protocol.TField CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("connection", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeConnection_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeConnection_argsTupleSchemeFactory());
    }

    public CCConnection connection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECTION((short)1, "connection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECTION
            return CONNECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("connection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCConnection.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeConnection_args.class, metaDataMap);
    }

    public closeConnection_args() {
    }

    public closeConnection_args(
      CCConnection connection)
    {
      this();
      this.connection = connection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeConnection_args(closeConnection_args other) {
      if (other.isSetConnection()) {
        this.connection = new CCConnection(other.connection);
      }
    }

    public closeConnection_args deepCopy() {
      return new closeConnection_args(this);
    }

    @Override
    public void clear() {
      this.connection = null;
    }

    public CCConnection getConnection() {
      return this.connection;
    }

    public closeConnection_args setConnection(CCConnection connection) {
      this.connection = connection;
      return this;
    }

    public void unsetConnection() {
      this.connection = null;
    }

    /** Returns true if field connection is set (has been assigned a value) and false otherwise */
    public boolean isSetConnection() {
      return this.connection != null;
    }

    public void setConnectionIsSet(boolean value) {
      if (!value) {
        this.connection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONNECTION:
        if (value == null) {
          unsetConnection();
        } else {
          setConnection((CCConnection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECTION:
        return getConnection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONNECTION:
        return isSetConnection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeConnection_args)
        return this.equals((closeConnection_args)that);
      return false;
    }

    public boolean equals(closeConnection_args that) {
      if (that == null)
        return false;

      boolean this_present_connection = true && this.isSetConnection();
      boolean that_present_connection = true && that.isSetConnection();
      if (this_present_connection || that_present_connection) {
        if (!(this_present_connection && that_present_connection))
          return false;
        if (!this.connection.equals(that.connection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(closeConnection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConnection()).compareTo(other.isSetConnection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection, other.connection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeConnection_args(");
      boolean first = true;

      sb.append("connection:");
      if (this.connection == null) {
        sb.append("null");
      } else {
        sb.append(this.connection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (connection != null) {
        connection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeConnection_argsStandardSchemeFactory implements SchemeFactory {
      public closeConnection_argsStandardScheme getScheme() {
        return new closeConnection_argsStandardScheme();
      }
    }

    private static class closeConnection_argsStandardScheme extends StandardScheme<closeConnection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeConnection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connection = new CCConnection();
                struct.connection.read(iprot);
                struct.setConnectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeConnection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connection != null) {
          oprot.writeFieldBegin(CONNECTION_FIELD_DESC);
          struct.connection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeConnection_argsTupleSchemeFactory implements SchemeFactory {
      public closeConnection_argsTupleScheme getScheme() {
        return new closeConnection_argsTupleScheme();
      }
    }

    private static class closeConnection_argsTupleScheme extends TupleScheme<closeConnection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeConnection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConnection()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConnection()) {
          struct.connection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeConnection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.connection = new CCConnection();
          struct.connection.read(iprot);
          struct.setConnectionIsSet(true);
        }
      }
    }

  }

  public static class closeConnection_result implements org.apache.thrift.TBase<closeConnection_result, closeConnection_result._Fields>, java.io.Serializable, Cloneable, Comparable<closeConnection_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeConnection_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeConnection_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeConnection_resultTupleSchemeFactory());
    }

    public CCSQLException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeConnection_result.class, metaDataMap);
    }

    public closeConnection_result() {
    }

    public closeConnection_result(
      CCSQLException ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeConnection_result(closeConnection_result other) {
      if (other.isSetOuch()) {
        this.ouch = new CCSQLException(other.ouch);
      }
    }

    public closeConnection_result deepCopy() {
      return new closeConnection_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public CCSQLException getOuch() {
      return this.ouch;
    }

    public closeConnection_result setOuch(CCSQLException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((CCSQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeConnection_result)
        return this.equals((closeConnection_result)that);
      return false;
    }

    public boolean equals(closeConnection_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(closeConnection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeConnection_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeConnection_resultStandardSchemeFactory implements SchemeFactory {
      public closeConnection_resultStandardScheme getScheme() {
        return new closeConnection_resultStandardScheme();
      }
    }

    private static class closeConnection_resultStandardScheme extends StandardScheme<closeConnection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeConnection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new CCSQLException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeConnection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeConnection_resultTupleSchemeFactory implements SchemeFactory {
      public closeConnection_resultTupleScheme getScheme() {
        return new closeConnection_resultTupleScheme();
      }
    }

    private static class closeConnection_resultTupleScheme extends TupleScheme<closeConnection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeConnection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeConnection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new CCSQLException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class statement_close_args implements org.apache.thrift.TBase<statement_close_args, statement_close_args._Fields>, java.io.Serializable, Cloneable, Comparable<statement_close_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_close_args");

    private static final org.apache.thrift.protocol.TField STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statement", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_close_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_close_argsTupleSchemeFactory());
    }

    public CCStatement statement; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATEMENT((short)1, "statement");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATEMENT
            return STATEMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("statement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCStatement.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_close_args.class, metaDataMap);
    }

    public statement_close_args() {
    }

    public statement_close_args(
      CCStatement statement)
    {
      this();
      this.statement = statement;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_close_args(statement_close_args other) {
      if (other.isSetStatement()) {
        this.statement = new CCStatement(other.statement);
      }
    }

    public statement_close_args deepCopy() {
      return new statement_close_args(this);
    }

    @Override
    public void clear() {
      this.statement = null;
    }

    public CCStatement getStatement() {
      return this.statement;
    }

    public statement_close_args setStatement(CCStatement statement) {
      this.statement = statement;
      return this;
    }

    public void unsetStatement() {
      this.statement = null;
    }

    /** Returns true if field statement is set (has been assigned a value) and false otherwise */
    public boolean isSetStatement() {
      return this.statement != null;
    }

    public void setStatementIsSet(boolean value) {
      if (!value) {
        this.statement = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATEMENT:
        if (value == null) {
          unsetStatement();
        } else {
          setStatement((CCStatement)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATEMENT:
        return getStatement();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATEMENT:
        return isSetStatement();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_close_args)
        return this.equals((statement_close_args)that);
      return false;
    }

    public boolean equals(statement_close_args that) {
      if (that == null)
        return false;

      boolean this_present_statement = true && this.isSetStatement();
      boolean that_present_statement = true && that.isSetStatement();
      if (this_present_statement || that_present_statement) {
        if (!(this_present_statement && that_present_statement))
          return false;
        if (!this.statement.equals(that.statement))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_close_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStatement()).compareTo(other.isSetStatement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement, other.statement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_close_args(");
      boolean first = true;

      sb.append("statement:");
      if (this.statement == null) {
        sb.append("null");
      } else {
        sb.append(this.statement);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (statement != null) {
        statement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_close_argsStandardSchemeFactory implements SchemeFactory {
      public statement_close_argsStandardScheme getScheme() {
        return new statement_close_argsStandardScheme();
      }
    }

    private static class statement_close_argsStandardScheme extends StandardScheme<statement_close_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_close_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.statement = new CCStatement();
                struct.statement.read(iprot);
                struct.setStatementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_close_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.statement != null) {
          oprot.writeFieldBegin(STATEMENT_FIELD_DESC);
          struct.statement.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_close_argsTupleSchemeFactory implements SchemeFactory {
      public statement_close_argsTupleScheme getScheme() {
        return new statement_close_argsTupleScheme();
      }
    }

    private static class statement_close_argsTupleScheme extends TupleScheme<statement_close_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_close_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatement()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStatement()) {
          struct.statement.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_close_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.statement = new CCStatement();
          struct.statement.read(iprot);
          struct.setStatementIsSet(true);
        }
      }
    }

  }

  public static class statement_close_result implements org.apache.thrift.TBase<statement_close_result, statement_close_result._Fields>, java.io.Serializable, Cloneable, Comparable<statement_close_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_close_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_close_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_close_resultTupleSchemeFactory());
    }

    public CCSQLException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_close_result.class, metaDataMap);
    }

    public statement_close_result() {
    }

    public statement_close_result(
      CCSQLException ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_close_result(statement_close_result other) {
      if (other.isSetOuch()) {
        this.ouch = new CCSQLException(other.ouch);
      }
    }

    public statement_close_result deepCopy() {
      return new statement_close_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public CCSQLException getOuch() {
      return this.ouch;
    }

    public statement_close_result setOuch(CCSQLException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((CCSQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_close_result)
        return this.equals((statement_close_result)that);
      return false;
    }

    public boolean equals(statement_close_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_close_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_close_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_close_resultStandardSchemeFactory implements SchemeFactory {
      public statement_close_resultStandardScheme getScheme() {
        return new statement_close_resultStandardScheme();
      }
    }

    private static class statement_close_resultStandardScheme extends StandardScheme<statement_close_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_close_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new CCSQLException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_close_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_close_resultTupleSchemeFactory implements SchemeFactory {
      public statement_close_resultTupleScheme getScheme() {
        return new statement_close_resultTupleScheme();
      }
    }

    private static class statement_close_resultTupleScheme extends TupleScheme<statement_close_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_close_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_close_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new CCSQLException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class statement_execute_args implements org.apache.thrift.TBase<statement_execute_args, statement_execute_args._Fields>, java.io.Serializable, Cloneable, Comparable<statement_execute_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_execute_args");

    private static final org.apache.thrift.protocol.TField STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statement", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_execute_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_execute_argsTupleSchemeFactory());
    }

    public CCStatement statement; // required
    public String sql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATEMENT((short)1, "statement"),
      SQL((short)2, "sql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATEMENT
            return STATEMENT;
          case 2: // SQL
            return SQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("statement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCStatement.class)));
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_execute_args.class, metaDataMap);
    }

    public statement_execute_args() {
    }

    public statement_execute_args(
      CCStatement statement,
      String sql)
    {
      this();
      this.statement = statement;
      this.sql = sql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_execute_args(statement_execute_args other) {
      if (other.isSetStatement()) {
        this.statement = new CCStatement(other.statement);
      }
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
    }

    public statement_execute_args deepCopy() {
      return new statement_execute_args(this);
    }

    @Override
    public void clear() {
      this.statement = null;
      this.sql = null;
    }

    public CCStatement getStatement() {
      return this.statement;
    }

    public statement_execute_args setStatement(CCStatement statement) {
      this.statement = statement;
      return this;
    }

    public void unsetStatement() {
      this.statement = null;
    }

    /** Returns true if field statement is set (has been assigned a value) and false otherwise */
    public boolean isSetStatement() {
      return this.statement != null;
    }

    public void setStatementIsSet(boolean value) {
      if (!value) {
        this.statement = null;
      }
    }

    public String getSql() {
      return this.sql;
    }

    public statement_execute_args setSql(String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATEMENT:
        if (value == null) {
          unsetStatement();
        } else {
          setStatement((CCStatement)value);
        }
        break;

      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATEMENT:
        return getStatement();

      case SQL:
        return getSql();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATEMENT:
        return isSetStatement();
      case SQL:
        return isSetSql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_execute_args)
        return this.equals((statement_execute_args)that);
      return false;
    }

    public boolean equals(statement_execute_args that) {
      if (that == null)
        return false;

      boolean this_present_statement = true && this.isSetStatement();
      boolean that_present_statement = true && that.isSetStatement();
      if (this_present_statement || that_present_statement) {
        if (!(this_present_statement && that_present_statement))
          return false;
        if (!this.statement.equals(that.statement))
          return false;
      }

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_execute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStatement()).compareTo(other.isSetStatement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement, other.statement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_execute_args(");
      boolean first = true;

      sb.append("statement:");
      if (this.statement == null) {
        sb.append("null");
      } else {
        sb.append(this.statement);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (statement != null) {
        statement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_execute_argsStandardSchemeFactory implements SchemeFactory {
      public statement_execute_argsStandardScheme getScheme() {
        return new statement_execute_argsStandardScheme();
      }
    }

    private static class statement_execute_argsStandardScheme extends StandardScheme<statement_execute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_execute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.statement = new CCStatement();
                struct.statement.read(iprot);
                struct.setStatementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_execute_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.statement != null) {
          oprot.writeFieldBegin(STATEMENT_FIELD_DESC);
          struct.statement.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_execute_argsTupleSchemeFactory implements SchemeFactory {
      public statement_execute_argsTupleScheme getScheme() {
        return new statement_execute_argsTupleScheme();
      }
    }

    private static class statement_execute_argsTupleScheme extends TupleScheme<statement_execute_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_execute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatement()) {
          optionals.set(0);
        }
        if (struct.isSetSql()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStatement()) {
          struct.statement.write(oprot);
        }
        if (struct.isSetSql()) {
          oprot.writeString(struct.sql);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_execute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.statement = new CCStatement();
          struct.statement.read(iprot);
          struct.setStatementIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sql = iprot.readString();
          struct.setSqlIsSet(true);
        }
      }
    }

  }

  public static class statement_execute_result implements org.apache.thrift.TBase<statement_execute_result, statement_execute_result._Fields>, java.io.Serializable, Cloneable, Comparable<statement_execute_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_execute_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_execute_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_execute_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public CCSQLException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_execute_result.class, metaDataMap);
    }

    public statement_execute_result() {
    }

    public statement_execute_result(
      boolean success,
      CCSQLException ouch)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_execute_result(statement_execute_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOuch()) {
        this.ouch = new CCSQLException(other.ouch);
      }
    }

    public statement_execute_result deepCopy() {
      return new statement_execute_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ouch = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public statement_execute_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public CCSQLException getOuch() {
      return this.ouch;
    }

    public statement_execute_result setOuch(CCSQLException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((CCSQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_execute_result)
        return this.equals((statement_execute_result)that);
      return false;
    }

    public boolean equals(statement_execute_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_execute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_execute_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_execute_resultStandardSchemeFactory implements SchemeFactory {
      public statement_execute_resultStandardScheme getScheme() {
        return new statement_execute_resultStandardScheme();
      }
    }

    private static class statement_execute_resultStandardScheme extends StandardScheme<statement_execute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_execute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new CCSQLException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_execute_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_execute_resultTupleSchemeFactory implements SchemeFactory {
      public statement_execute_resultTupleScheme getScheme() {
        return new statement_execute_resultTupleScheme();
      }
    }

    private static class statement_execute_resultTupleScheme extends TupleScheme<statement_execute_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_execute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_execute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new CCSQLException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class statement_executeQuery_args implements org.apache.thrift.TBase<statement_executeQuery_args, statement_executeQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<statement_executeQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_executeQuery_args");

    private static final org.apache.thrift.protocol.TField STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statement", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_executeQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_executeQuery_argsTupleSchemeFactory());
    }

    public CCStatement statement; // required
    public String sql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATEMENT((short)1, "statement"),
      SQL((short)2, "sql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATEMENT
            return STATEMENT;
          case 2: // SQL
            return SQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("statement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCStatement.class)));
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_executeQuery_args.class, metaDataMap);
    }

    public statement_executeQuery_args() {
    }

    public statement_executeQuery_args(
      CCStatement statement,
      String sql)
    {
      this();
      this.statement = statement;
      this.sql = sql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_executeQuery_args(statement_executeQuery_args other) {
      if (other.isSetStatement()) {
        this.statement = new CCStatement(other.statement);
      }
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
    }

    public statement_executeQuery_args deepCopy() {
      return new statement_executeQuery_args(this);
    }

    @Override
    public void clear() {
      this.statement = null;
      this.sql = null;
    }

    public CCStatement getStatement() {
      return this.statement;
    }

    public statement_executeQuery_args setStatement(CCStatement statement) {
      this.statement = statement;
      return this;
    }

    public void unsetStatement() {
      this.statement = null;
    }

    /** Returns true if field statement is set (has been assigned a value) and false otherwise */
    public boolean isSetStatement() {
      return this.statement != null;
    }

    public void setStatementIsSet(boolean value) {
      if (!value) {
        this.statement = null;
      }
    }

    public String getSql() {
      return this.sql;
    }

    public statement_executeQuery_args setSql(String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATEMENT:
        if (value == null) {
          unsetStatement();
        } else {
          setStatement((CCStatement)value);
        }
        break;

      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATEMENT:
        return getStatement();

      case SQL:
        return getSql();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATEMENT:
        return isSetStatement();
      case SQL:
        return isSetSql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_executeQuery_args)
        return this.equals((statement_executeQuery_args)that);
      return false;
    }

    public boolean equals(statement_executeQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_statement = true && this.isSetStatement();
      boolean that_present_statement = true && that.isSetStatement();
      if (this_present_statement || that_present_statement) {
        if (!(this_present_statement && that_present_statement))
          return false;
        if (!this.statement.equals(that.statement))
          return false;
      }

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_executeQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStatement()).compareTo(other.isSetStatement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement, other.statement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_executeQuery_args(");
      boolean first = true;

      sb.append("statement:");
      if (this.statement == null) {
        sb.append("null");
      } else {
        sb.append(this.statement);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (statement != null) {
        statement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_executeQuery_argsStandardSchemeFactory implements SchemeFactory {
      public statement_executeQuery_argsStandardScheme getScheme() {
        return new statement_executeQuery_argsStandardScheme();
      }
    }

    private static class statement_executeQuery_argsStandardScheme extends StandardScheme<statement_executeQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_executeQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.statement = new CCStatement();
                struct.statement.read(iprot);
                struct.setStatementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_executeQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.statement != null) {
          oprot.writeFieldBegin(STATEMENT_FIELD_DESC);
          struct.statement.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_executeQuery_argsTupleSchemeFactory implements SchemeFactory {
      public statement_executeQuery_argsTupleScheme getScheme() {
        return new statement_executeQuery_argsTupleScheme();
      }
    }

    private static class statement_executeQuery_argsTupleScheme extends TupleScheme<statement_executeQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_executeQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatement()) {
          optionals.set(0);
        }
        if (struct.isSetSql()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStatement()) {
          struct.statement.write(oprot);
        }
        if (struct.isSetSql()) {
          oprot.writeString(struct.sql);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_executeQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.statement = new CCStatement();
          struct.statement.read(iprot);
          struct.setStatementIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sql = iprot.readString();
          struct.setSqlIsSet(true);
        }
      }
    }

  }

  public static class statement_executeQuery_result implements org.apache.thrift.TBase<statement_executeQuery_result, statement_executeQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<statement_executeQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_executeQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_executeQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_executeQuery_resultTupleSchemeFactory());
    }

    public CCResultSet success; // required
    public CCSQLException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCResultSet.class)));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_executeQuery_result.class, metaDataMap);
    }

    public statement_executeQuery_result() {
    }

    public statement_executeQuery_result(
      CCResultSet success,
      CCSQLException ouch)
    {
      this();
      this.success = success;
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_executeQuery_result(statement_executeQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = new CCResultSet(other.success);
      }
      if (other.isSetOuch()) {
        this.ouch = new CCSQLException(other.ouch);
      }
    }

    public statement_executeQuery_result deepCopy() {
      return new statement_executeQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch = null;
    }

    public CCResultSet getSuccess() {
      return this.success;
    }

    public statement_executeQuery_result setSuccess(CCResultSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CCSQLException getOuch() {
      return this.ouch;
    }

    public statement_executeQuery_result setOuch(CCSQLException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CCResultSet)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((CCSQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_executeQuery_result)
        return this.equals((statement_executeQuery_result)that);
      return false;
    }

    public boolean equals(statement_executeQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_executeQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_executeQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_executeQuery_resultStandardSchemeFactory implements SchemeFactory {
      public statement_executeQuery_resultStandardScheme getScheme() {
        return new statement_executeQuery_resultStandardScheme();
      }
    }

    private static class statement_executeQuery_resultStandardScheme extends StandardScheme<statement_executeQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_executeQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CCResultSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new CCSQLException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_executeQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_executeQuery_resultTupleSchemeFactory implements SchemeFactory {
      public statement_executeQuery_resultTupleScheme getScheme() {
        return new statement_executeQuery_resultTupleScheme();
      }
    }

    private static class statement_executeQuery_resultTupleScheme extends TupleScheme<statement_executeQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_executeQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_executeQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CCResultSet();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new CCSQLException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class statement_getResultSet_args implements org.apache.thrift.TBase<statement_getResultSet_args, statement_getResultSet_args._Fields>, java.io.Serializable, Cloneable, Comparable<statement_getResultSet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_getResultSet_args");

    private static final org.apache.thrift.protocol.TField STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statement", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_getResultSet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_getResultSet_argsTupleSchemeFactory());
    }

    public CCStatement statement; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATEMENT((short)1, "statement");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATEMENT
            return STATEMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("statement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCStatement.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_getResultSet_args.class, metaDataMap);
    }

    public statement_getResultSet_args() {
    }

    public statement_getResultSet_args(
      CCStatement statement)
    {
      this();
      this.statement = statement;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_getResultSet_args(statement_getResultSet_args other) {
      if (other.isSetStatement()) {
        this.statement = new CCStatement(other.statement);
      }
    }

    public statement_getResultSet_args deepCopy() {
      return new statement_getResultSet_args(this);
    }

    @Override
    public void clear() {
      this.statement = null;
    }

    public CCStatement getStatement() {
      return this.statement;
    }

    public statement_getResultSet_args setStatement(CCStatement statement) {
      this.statement = statement;
      return this;
    }

    public void unsetStatement() {
      this.statement = null;
    }

    /** Returns true if field statement is set (has been assigned a value) and false otherwise */
    public boolean isSetStatement() {
      return this.statement != null;
    }

    public void setStatementIsSet(boolean value) {
      if (!value) {
        this.statement = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATEMENT:
        if (value == null) {
          unsetStatement();
        } else {
          setStatement((CCStatement)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATEMENT:
        return getStatement();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATEMENT:
        return isSetStatement();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_getResultSet_args)
        return this.equals((statement_getResultSet_args)that);
      return false;
    }

    public boolean equals(statement_getResultSet_args that) {
      if (that == null)
        return false;

      boolean this_present_statement = true && this.isSetStatement();
      boolean that_present_statement = true && that.isSetStatement();
      if (this_present_statement || that_present_statement) {
        if (!(this_present_statement && that_present_statement))
          return false;
        if (!this.statement.equals(that.statement))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_getResultSet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStatement()).compareTo(other.isSetStatement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement, other.statement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_getResultSet_args(");
      boolean first = true;

      sb.append("statement:");
      if (this.statement == null) {
        sb.append("null");
      } else {
        sb.append(this.statement);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (statement != null) {
        statement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_getResultSet_argsStandardSchemeFactory implements SchemeFactory {
      public statement_getResultSet_argsStandardScheme getScheme() {
        return new statement_getResultSet_argsStandardScheme();
      }
    }

    private static class statement_getResultSet_argsStandardScheme extends StandardScheme<statement_getResultSet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_getResultSet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.statement = new CCStatement();
                struct.statement.read(iprot);
                struct.setStatementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_getResultSet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.statement != null) {
          oprot.writeFieldBegin(STATEMENT_FIELD_DESC);
          struct.statement.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_getResultSet_argsTupleSchemeFactory implements SchemeFactory {
      public statement_getResultSet_argsTupleScheme getScheme() {
        return new statement_getResultSet_argsTupleScheme();
      }
    }

    private static class statement_getResultSet_argsTupleScheme extends TupleScheme<statement_getResultSet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_getResultSet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatement()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStatement()) {
          struct.statement.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_getResultSet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.statement = new CCStatement();
          struct.statement.read(iprot);
          struct.setStatementIsSet(true);
        }
      }
    }

  }

  public static class statement_getResultSet_result implements org.apache.thrift.TBase<statement_getResultSet_result, statement_getResultSet_result._Fields>, java.io.Serializable, Cloneable, Comparable<statement_getResultSet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_getResultSet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_getResultSet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_getResultSet_resultTupleSchemeFactory());
    }

    public CCResultSet success; // required
    public CCSQLException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCResultSet.class)));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_getResultSet_result.class, metaDataMap);
    }

    public statement_getResultSet_result() {
    }

    public statement_getResultSet_result(
      CCResultSet success,
      CCSQLException ouch)
    {
      this();
      this.success = success;
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_getResultSet_result(statement_getResultSet_result other) {
      if (other.isSetSuccess()) {
        this.success = new CCResultSet(other.success);
      }
      if (other.isSetOuch()) {
        this.ouch = new CCSQLException(other.ouch);
      }
    }

    public statement_getResultSet_result deepCopy() {
      return new statement_getResultSet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch = null;
    }

    public CCResultSet getSuccess() {
      return this.success;
    }

    public statement_getResultSet_result setSuccess(CCResultSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CCSQLException getOuch() {
      return this.ouch;
    }

    public statement_getResultSet_result setOuch(CCSQLException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CCResultSet)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((CCSQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_getResultSet_result)
        return this.equals((statement_getResultSet_result)that);
      return false;
    }

    public boolean equals(statement_getResultSet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_getResultSet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_getResultSet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_getResultSet_resultStandardSchemeFactory implements SchemeFactory {
      public statement_getResultSet_resultStandardScheme getScheme() {
        return new statement_getResultSet_resultStandardScheme();
      }
    }

    private static class statement_getResultSet_resultStandardScheme extends StandardScheme<statement_getResultSet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_getResultSet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CCResultSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new CCSQLException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_getResultSet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_getResultSet_resultTupleSchemeFactory implements SchemeFactory {
      public statement_getResultSet_resultTupleScheme getScheme() {
        return new statement_getResultSet_resultTupleScheme();
      }
    }

    private static class statement_getResultSet_resultTupleScheme extends TupleScheme<statement_getResultSet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_getResultSet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_getResultSet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CCResultSet();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new CCSQLException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class statement_getUpdateCount_args implements org.apache.thrift.TBase<statement_getUpdateCount_args, statement_getUpdateCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<statement_getUpdateCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_getUpdateCount_args");

    private static final org.apache.thrift.protocol.TField STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statement", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_getUpdateCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_getUpdateCount_argsTupleSchemeFactory());
    }

    public CCStatement statement; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATEMENT((short)1, "statement");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATEMENT
            return STATEMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("statement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCStatement.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_getUpdateCount_args.class, metaDataMap);
    }

    public statement_getUpdateCount_args() {
    }

    public statement_getUpdateCount_args(
      CCStatement statement)
    {
      this();
      this.statement = statement;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_getUpdateCount_args(statement_getUpdateCount_args other) {
      if (other.isSetStatement()) {
        this.statement = new CCStatement(other.statement);
      }
    }

    public statement_getUpdateCount_args deepCopy() {
      return new statement_getUpdateCount_args(this);
    }

    @Override
    public void clear() {
      this.statement = null;
    }

    public CCStatement getStatement() {
      return this.statement;
    }

    public statement_getUpdateCount_args setStatement(CCStatement statement) {
      this.statement = statement;
      return this;
    }

    public void unsetStatement() {
      this.statement = null;
    }

    /** Returns true if field statement is set (has been assigned a value) and false otherwise */
    public boolean isSetStatement() {
      return this.statement != null;
    }

    public void setStatementIsSet(boolean value) {
      if (!value) {
        this.statement = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATEMENT:
        if (value == null) {
          unsetStatement();
        } else {
          setStatement((CCStatement)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATEMENT:
        return getStatement();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATEMENT:
        return isSetStatement();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_getUpdateCount_args)
        return this.equals((statement_getUpdateCount_args)that);
      return false;
    }

    public boolean equals(statement_getUpdateCount_args that) {
      if (that == null)
        return false;

      boolean this_present_statement = true && this.isSetStatement();
      boolean that_present_statement = true && that.isSetStatement();
      if (this_present_statement || that_present_statement) {
        if (!(this_present_statement && that_present_statement))
          return false;
        if (!this.statement.equals(that.statement))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_getUpdateCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStatement()).compareTo(other.isSetStatement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement, other.statement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_getUpdateCount_args(");
      boolean first = true;

      sb.append("statement:");
      if (this.statement == null) {
        sb.append("null");
      } else {
        sb.append(this.statement);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (statement != null) {
        statement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_getUpdateCount_argsStandardSchemeFactory implements SchemeFactory {
      public statement_getUpdateCount_argsStandardScheme getScheme() {
        return new statement_getUpdateCount_argsStandardScheme();
      }
    }

    private static class statement_getUpdateCount_argsStandardScheme extends StandardScheme<statement_getUpdateCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_getUpdateCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.statement = new CCStatement();
                struct.statement.read(iprot);
                struct.setStatementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_getUpdateCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.statement != null) {
          oprot.writeFieldBegin(STATEMENT_FIELD_DESC);
          struct.statement.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_getUpdateCount_argsTupleSchemeFactory implements SchemeFactory {
      public statement_getUpdateCount_argsTupleScheme getScheme() {
        return new statement_getUpdateCount_argsTupleScheme();
      }
    }

    private static class statement_getUpdateCount_argsTupleScheme extends TupleScheme<statement_getUpdateCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_getUpdateCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatement()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStatement()) {
          struct.statement.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_getUpdateCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.statement = new CCStatement();
          struct.statement.read(iprot);
          struct.setStatementIsSet(true);
        }
      }
    }

  }

  public static class statement_getUpdateCount_result implements org.apache.thrift.TBase<statement_getUpdateCount_result, statement_getUpdateCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<statement_getUpdateCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_getUpdateCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_getUpdateCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_getUpdateCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_getUpdateCount_result.class, metaDataMap);
    }

    public statement_getUpdateCount_result() {
    }

    public statement_getUpdateCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_getUpdateCount_result(statement_getUpdateCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public statement_getUpdateCount_result deepCopy() {
      return new statement_getUpdateCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public statement_getUpdateCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_getUpdateCount_result)
        return this.equals((statement_getUpdateCount_result)that);
      return false;
    }

    public boolean equals(statement_getUpdateCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_getUpdateCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_getUpdateCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_getUpdateCount_resultStandardSchemeFactory implements SchemeFactory {
      public statement_getUpdateCount_resultStandardScheme getScheme() {
        return new statement_getUpdateCount_resultStandardScheme();
      }
    }

    private static class statement_getUpdateCount_resultStandardScheme extends StandardScheme<statement_getUpdateCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_getUpdateCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_getUpdateCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_getUpdateCount_resultTupleSchemeFactory implements SchemeFactory {
      public statement_getUpdateCount_resultTupleScheme getScheme() {
        return new statement_getUpdateCount_resultTupleScheme();
      }
    }

    private static class statement_getUpdateCount_resultTupleScheme extends TupleScheme<statement_getUpdateCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_getUpdateCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_getUpdateCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class statement_getResultSetType_args implements org.apache.thrift.TBase<statement_getResultSetType_args, statement_getResultSetType_args._Fields>, java.io.Serializable, Cloneable, Comparable<statement_getResultSetType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_getResultSetType_args");

    private static final org.apache.thrift.protocol.TField STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statement", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_getResultSetType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_getResultSetType_argsTupleSchemeFactory());
    }

    public CCStatement statement; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATEMENT((short)1, "statement");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATEMENT
            return STATEMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("statement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCStatement.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_getResultSetType_args.class, metaDataMap);
    }

    public statement_getResultSetType_args() {
    }

    public statement_getResultSetType_args(
      CCStatement statement)
    {
      this();
      this.statement = statement;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_getResultSetType_args(statement_getResultSetType_args other) {
      if (other.isSetStatement()) {
        this.statement = new CCStatement(other.statement);
      }
    }

    public statement_getResultSetType_args deepCopy() {
      return new statement_getResultSetType_args(this);
    }

    @Override
    public void clear() {
      this.statement = null;
    }

    public CCStatement getStatement() {
      return this.statement;
    }

    public statement_getResultSetType_args setStatement(CCStatement statement) {
      this.statement = statement;
      return this;
    }

    public void unsetStatement() {
      this.statement = null;
    }

    /** Returns true if field statement is set (has been assigned a value) and false otherwise */
    public boolean isSetStatement() {
      return this.statement != null;
    }

    public void setStatementIsSet(boolean value) {
      if (!value) {
        this.statement = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATEMENT:
        if (value == null) {
          unsetStatement();
        } else {
          setStatement((CCStatement)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATEMENT:
        return getStatement();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATEMENT:
        return isSetStatement();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_getResultSetType_args)
        return this.equals((statement_getResultSetType_args)that);
      return false;
    }

    public boolean equals(statement_getResultSetType_args that) {
      if (that == null)
        return false;

      boolean this_present_statement = true && this.isSetStatement();
      boolean that_present_statement = true && that.isSetStatement();
      if (this_present_statement || that_present_statement) {
        if (!(this_present_statement && that_present_statement))
          return false;
        if (!this.statement.equals(that.statement))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_getResultSetType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStatement()).compareTo(other.isSetStatement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement, other.statement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_getResultSetType_args(");
      boolean first = true;

      sb.append("statement:");
      if (this.statement == null) {
        sb.append("null");
      } else {
        sb.append(this.statement);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (statement != null) {
        statement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_getResultSetType_argsStandardSchemeFactory implements SchemeFactory {
      public statement_getResultSetType_argsStandardScheme getScheme() {
        return new statement_getResultSetType_argsStandardScheme();
      }
    }

    private static class statement_getResultSetType_argsStandardScheme extends StandardScheme<statement_getResultSetType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_getResultSetType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.statement = new CCStatement();
                struct.statement.read(iprot);
                struct.setStatementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_getResultSetType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.statement != null) {
          oprot.writeFieldBegin(STATEMENT_FIELD_DESC);
          struct.statement.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_getResultSetType_argsTupleSchemeFactory implements SchemeFactory {
      public statement_getResultSetType_argsTupleScheme getScheme() {
        return new statement_getResultSetType_argsTupleScheme();
      }
    }

    private static class statement_getResultSetType_argsTupleScheme extends TupleScheme<statement_getResultSetType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_getResultSetType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatement()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStatement()) {
          struct.statement.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_getResultSetType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.statement = new CCStatement();
          struct.statement.read(iprot);
          struct.setStatementIsSet(true);
        }
      }
    }

  }

  public static class statement_getResultSetType_result implements org.apache.thrift.TBase<statement_getResultSetType_result, statement_getResultSetType_result._Fields>, java.io.Serializable, Cloneable, Comparable<statement_getResultSetType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_getResultSetType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_getResultSetType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_getResultSetType_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_getResultSetType_result.class, metaDataMap);
    }

    public statement_getResultSetType_result() {
    }

    public statement_getResultSetType_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_getResultSetType_result(statement_getResultSetType_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public statement_getResultSetType_result deepCopy() {
      return new statement_getResultSetType_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public statement_getResultSetType_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_getResultSetType_result)
        return this.equals((statement_getResultSetType_result)that);
      return false;
    }

    public boolean equals(statement_getResultSetType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_getResultSetType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_getResultSetType_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_getResultSetType_resultStandardSchemeFactory implements SchemeFactory {
      public statement_getResultSetType_resultStandardScheme getScheme() {
        return new statement_getResultSetType_resultStandardScheme();
      }
    }

    private static class statement_getResultSetType_resultStandardScheme extends StandardScheme<statement_getResultSetType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_getResultSetType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_getResultSetType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_getResultSetType_resultTupleSchemeFactory implements SchemeFactory {
      public statement_getResultSetType_resultTupleScheme getScheme() {
        return new statement_getResultSetType_resultTupleScheme();
      }
    }

    private static class statement_getResultSetType_resultTupleScheme extends TupleScheme<statement_getResultSetType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_getResultSetType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_getResultSetType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class statement_cancel_args implements org.apache.thrift.TBase<statement_cancel_args, statement_cancel_args._Fields>, java.io.Serializable, Cloneable, Comparable<statement_cancel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_cancel_args");

    private static final org.apache.thrift.protocol.TField STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statement", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_cancel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_cancel_argsTupleSchemeFactory());
    }

    public CCStatement statement; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATEMENT((short)1, "statement");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATEMENT
            return STATEMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("statement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCStatement.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_cancel_args.class, metaDataMap);
    }

    public statement_cancel_args() {
    }

    public statement_cancel_args(
      CCStatement statement)
    {
      this();
      this.statement = statement;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_cancel_args(statement_cancel_args other) {
      if (other.isSetStatement()) {
        this.statement = new CCStatement(other.statement);
      }
    }

    public statement_cancel_args deepCopy() {
      return new statement_cancel_args(this);
    }

    @Override
    public void clear() {
      this.statement = null;
    }

    public CCStatement getStatement() {
      return this.statement;
    }

    public statement_cancel_args setStatement(CCStatement statement) {
      this.statement = statement;
      return this;
    }

    public void unsetStatement() {
      this.statement = null;
    }

    /** Returns true if field statement is set (has been assigned a value) and false otherwise */
    public boolean isSetStatement() {
      return this.statement != null;
    }

    public void setStatementIsSet(boolean value) {
      if (!value) {
        this.statement = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATEMENT:
        if (value == null) {
          unsetStatement();
        } else {
          setStatement((CCStatement)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATEMENT:
        return getStatement();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATEMENT:
        return isSetStatement();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_cancel_args)
        return this.equals((statement_cancel_args)that);
      return false;
    }

    public boolean equals(statement_cancel_args that) {
      if (that == null)
        return false;

      boolean this_present_statement = true && this.isSetStatement();
      boolean that_present_statement = true && that.isSetStatement();
      if (this_present_statement || that_present_statement) {
        if (!(this_present_statement && that_present_statement))
          return false;
        if (!this.statement.equals(that.statement))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_cancel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStatement()).compareTo(other.isSetStatement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement, other.statement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_cancel_args(");
      boolean first = true;

      sb.append("statement:");
      if (this.statement == null) {
        sb.append("null");
      } else {
        sb.append(this.statement);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (statement != null) {
        statement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_cancel_argsStandardSchemeFactory implements SchemeFactory {
      public statement_cancel_argsStandardScheme getScheme() {
        return new statement_cancel_argsStandardScheme();
      }
    }

    private static class statement_cancel_argsStandardScheme extends StandardScheme<statement_cancel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_cancel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.statement = new CCStatement();
                struct.statement.read(iprot);
                struct.setStatementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_cancel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.statement != null) {
          oprot.writeFieldBegin(STATEMENT_FIELD_DESC);
          struct.statement.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_cancel_argsTupleSchemeFactory implements SchemeFactory {
      public statement_cancel_argsTupleScheme getScheme() {
        return new statement_cancel_argsTupleScheme();
      }
    }

    private static class statement_cancel_argsTupleScheme extends TupleScheme<statement_cancel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_cancel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatement()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStatement()) {
          struct.statement.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_cancel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.statement = new CCStatement();
          struct.statement.read(iprot);
          struct.setStatementIsSet(true);
        }
      }
    }

  }

  public static class statement_cancel_result implements org.apache.thrift.TBase<statement_cancel_result, statement_cancel_result._Fields>, java.io.Serializable, Cloneable, Comparable<statement_cancel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_cancel_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_cancel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_cancel_resultTupleSchemeFactory());
    }

    public CCSQLException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_cancel_result.class, metaDataMap);
    }

    public statement_cancel_result() {
    }

    public statement_cancel_result(
      CCSQLException ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_cancel_result(statement_cancel_result other) {
      if (other.isSetOuch()) {
        this.ouch = new CCSQLException(other.ouch);
      }
    }

    public statement_cancel_result deepCopy() {
      return new statement_cancel_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public CCSQLException getOuch() {
      return this.ouch;
    }

    public statement_cancel_result setOuch(CCSQLException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((CCSQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_cancel_result)
        return this.equals((statement_cancel_result)that);
      return false;
    }

    public boolean equals(statement_cancel_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_cancel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_cancel_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_cancel_resultStandardSchemeFactory implements SchemeFactory {
      public statement_cancel_resultStandardScheme getScheme() {
        return new statement_cancel_resultStandardScheme();
      }
    }

    private static class statement_cancel_resultStandardScheme extends StandardScheme<statement_cancel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_cancel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new CCSQLException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_cancel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_cancel_resultTupleSchemeFactory implements SchemeFactory {
      public statement_cancel_resultTupleScheme getScheme() {
        return new statement_cancel_resultTupleScheme();
      }
    }

    private static class statement_cancel_resultTupleScheme extends TupleScheme<statement_cancel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_cancel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_cancel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new CCSQLException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class statement_getWarnings_args implements org.apache.thrift.TBase<statement_getWarnings_args, statement_getWarnings_args._Fields>, java.io.Serializable, Cloneable, Comparable<statement_getWarnings_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_getWarnings_args");

    private static final org.apache.thrift.protocol.TField STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statement", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_getWarnings_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_getWarnings_argsTupleSchemeFactory());
    }

    public CCStatement statement; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATEMENT((short)1, "statement");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATEMENT
            return STATEMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("statement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCStatement.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_getWarnings_args.class, metaDataMap);
    }

    public statement_getWarnings_args() {
    }

    public statement_getWarnings_args(
      CCStatement statement)
    {
      this();
      this.statement = statement;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_getWarnings_args(statement_getWarnings_args other) {
      if (other.isSetStatement()) {
        this.statement = new CCStatement(other.statement);
      }
    }

    public statement_getWarnings_args deepCopy() {
      return new statement_getWarnings_args(this);
    }

    @Override
    public void clear() {
      this.statement = null;
    }

    public CCStatement getStatement() {
      return this.statement;
    }

    public statement_getWarnings_args setStatement(CCStatement statement) {
      this.statement = statement;
      return this;
    }

    public void unsetStatement() {
      this.statement = null;
    }

    /** Returns true if field statement is set (has been assigned a value) and false otherwise */
    public boolean isSetStatement() {
      return this.statement != null;
    }

    public void setStatementIsSet(boolean value) {
      if (!value) {
        this.statement = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATEMENT:
        if (value == null) {
          unsetStatement();
        } else {
          setStatement((CCStatement)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATEMENT:
        return getStatement();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATEMENT:
        return isSetStatement();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_getWarnings_args)
        return this.equals((statement_getWarnings_args)that);
      return false;
    }

    public boolean equals(statement_getWarnings_args that) {
      if (that == null)
        return false;

      boolean this_present_statement = true && this.isSetStatement();
      boolean that_present_statement = true && that.isSetStatement();
      if (this_present_statement || that_present_statement) {
        if (!(this_present_statement && that_present_statement))
          return false;
        if (!this.statement.equals(that.statement))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_getWarnings_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStatement()).compareTo(other.isSetStatement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement, other.statement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_getWarnings_args(");
      boolean first = true;

      sb.append("statement:");
      if (this.statement == null) {
        sb.append("null");
      } else {
        sb.append(this.statement);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (statement != null) {
        statement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_getWarnings_argsStandardSchemeFactory implements SchemeFactory {
      public statement_getWarnings_argsStandardScheme getScheme() {
        return new statement_getWarnings_argsStandardScheme();
      }
    }

    private static class statement_getWarnings_argsStandardScheme extends StandardScheme<statement_getWarnings_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_getWarnings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.statement = new CCStatement();
                struct.statement.read(iprot);
                struct.setStatementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_getWarnings_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.statement != null) {
          oprot.writeFieldBegin(STATEMENT_FIELD_DESC);
          struct.statement.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_getWarnings_argsTupleSchemeFactory implements SchemeFactory {
      public statement_getWarnings_argsTupleScheme getScheme() {
        return new statement_getWarnings_argsTupleScheme();
      }
    }

    private static class statement_getWarnings_argsTupleScheme extends TupleScheme<statement_getWarnings_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_getWarnings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatement()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStatement()) {
          struct.statement.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_getWarnings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.statement = new CCStatement();
          struct.statement.read(iprot);
          struct.setStatementIsSet(true);
        }
      }
    }

  }

  public static class statement_getWarnings_result implements org.apache.thrift.TBase<statement_getWarnings_result, statement_getWarnings_result._Fields>, java.io.Serializable, Cloneable, Comparable<statement_getWarnings_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_getWarnings_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_getWarnings_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_getWarnings_resultTupleSchemeFactory());
    }

    public statement_getWarnings_return success; // required
    public CCSQLException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, statement_getWarnings_return.class)));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_getWarnings_result.class, metaDataMap);
    }

    public statement_getWarnings_result() {
    }

    public statement_getWarnings_result(
      statement_getWarnings_return success,
      CCSQLException ouch)
    {
      this();
      this.success = success;
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_getWarnings_result(statement_getWarnings_result other) {
      if (other.isSetSuccess()) {
        this.success = new statement_getWarnings_return(other.success);
      }
      if (other.isSetOuch()) {
        this.ouch = new CCSQLException(other.ouch);
      }
    }

    public statement_getWarnings_result deepCopy() {
      return new statement_getWarnings_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch = null;
    }

    public statement_getWarnings_return getSuccess() {
      return this.success;
    }

    public statement_getWarnings_result setSuccess(statement_getWarnings_return success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CCSQLException getOuch() {
      return this.ouch;
    }

    public statement_getWarnings_result setOuch(CCSQLException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((statement_getWarnings_return)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((CCSQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_getWarnings_result)
        return this.equals((statement_getWarnings_result)that);
      return false;
    }

    public boolean equals(statement_getWarnings_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_getWarnings_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_getWarnings_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_getWarnings_resultStandardSchemeFactory implements SchemeFactory {
      public statement_getWarnings_resultStandardScheme getScheme() {
        return new statement_getWarnings_resultStandardScheme();
      }
    }

    private static class statement_getWarnings_resultStandardScheme extends StandardScheme<statement_getWarnings_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_getWarnings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new statement_getWarnings_return();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new CCSQLException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_getWarnings_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_getWarnings_resultTupleSchemeFactory implements SchemeFactory {
      public statement_getWarnings_resultTupleScheme getScheme() {
        return new statement_getWarnings_resultTupleScheme();
      }
    }

    private static class statement_getWarnings_resultTupleScheme extends TupleScheme<statement_getWarnings_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_getWarnings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_getWarnings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new statement_getWarnings_return();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new CCSQLException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class statement_clearWarnings_args implements org.apache.thrift.TBase<statement_clearWarnings_args, statement_clearWarnings_args._Fields>, java.io.Serializable, Cloneable, Comparable<statement_clearWarnings_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_clearWarnings_args");

    private static final org.apache.thrift.protocol.TField STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statement", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_clearWarnings_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_clearWarnings_argsTupleSchemeFactory());
    }

    public CCStatement statement; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATEMENT((short)1, "statement");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATEMENT
            return STATEMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("statement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCStatement.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_clearWarnings_args.class, metaDataMap);
    }

    public statement_clearWarnings_args() {
    }

    public statement_clearWarnings_args(
      CCStatement statement)
    {
      this();
      this.statement = statement;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_clearWarnings_args(statement_clearWarnings_args other) {
      if (other.isSetStatement()) {
        this.statement = new CCStatement(other.statement);
      }
    }

    public statement_clearWarnings_args deepCopy() {
      return new statement_clearWarnings_args(this);
    }

    @Override
    public void clear() {
      this.statement = null;
    }

    public CCStatement getStatement() {
      return this.statement;
    }

    public statement_clearWarnings_args setStatement(CCStatement statement) {
      this.statement = statement;
      return this;
    }

    public void unsetStatement() {
      this.statement = null;
    }

    /** Returns true if field statement is set (has been assigned a value) and false otherwise */
    public boolean isSetStatement() {
      return this.statement != null;
    }

    public void setStatementIsSet(boolean value) {
      if (!value) {
        this.statement = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATEMENT:
        if (value == null) {
          unsetStatement();
        } else {
          setStatement((CCStatement)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATEMENT:
        return getStatement();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATEMENT:
        return isSetStatement();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_clearWarnings_args)
        return this.equals((statement_clearWarnings_args)that);
      return false;
    }

    public boolean equals(statement_clearWarnings_args that) {
      if (that == null)
        return false;

      boolean this_present_statement = true && this.isSetStatement();
      boolean that_present_statement = true && that.isSetStatement();
      if (this_present_statement || that_present_statement) {
        if (!(this_present_statement && that_present_statement))
          return false;
        if (!this.statement.equals(that.statement))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_clearWarnings_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStatement()).compareTo(other.isSetStatement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement, other.statement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_clearWarnings_args(");
      boolean first = true;

      sb.append("statement:");
      if (this.statement == null) {
        sb.append("null");
      } else {
        sb.append(this.statement);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (statement != null) {
        statement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_clearWarnings_argsStandardSchemeFactory implements SchemeFactory {
      public statement_clearWarnings_argsStandardScheme getScheme() {
        return new statement_clearWarnings_argsStandardScheme();
      }
    }

    private static class statement_clearWarnings_argsStandardScheme extends StandardScheme<statement_clearWarnings_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_clearWarnings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.statement = new CCStatement();
                struct.statement.read(iprot);
                struct.setStatementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_clearWarnings_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.statement != null) {
          oprot.writeFieldBegin(STATEMENT_FIELD_DESC);
          struct.statement.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_clearWarnings_argsTupleSchemeFactory implements SchemeFactory {
      public statement_clearWarnings_argsTupleScheme getScheme() {
        return new statement_clearWarnings_argsTupleScheme();
      }
    }

    private static class statement_clearWarnings_argsTupleScheme extends TupleScheme<statement_clearWarnings_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_clearWarnings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatement()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStatement()) {
          struct.statement.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_clearWarnings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.statement = new CCStatement();
          struct.statement.read(iprot);
          struct.setStatementIsSet(true);
        }
      }
    }

  }

  public static class statement_clearWarnings_result implements org.apache.thrift.TBase<statement_clearWarnings_result, statement_clearWarnings_result._Fields>, java.io.Serializable, Cloneable, Comparable<statement_clearWarnings_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_clearWarnings_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_clearWarnings_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_clearWarnings_resultTupleSchemeFactory());
    }

    public CCSQLException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_clearWarnings_result.class, metaDataMap);
    }

    public statement_clearWarnings_result() {
    }

    public statement_clearWarnings_result(
      CCSQLException ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_clearWarnings_result(statement_clearWarnings_result other) {
      if (other.isSetOuch()) {
        this.ouch = new CCSQLException(other.ouch);
      }
    }

    public statement_clearWarnings_result deepCopy() {
      return new statement_clearWarnings_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public CCSQLException getOuch() {
      return this.ouch;
    }

    public statement_clearWarnings_result setOuch(CCSQLException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((CCSQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_clearWarnings_result)
        return this.equals((statement_clearWarnings_result)that);
      return false;
    }

    public boolean equals(statement_clearWarnings_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_clearWarnings_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_clearWarnings_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_clearWarnings_resultStandardSchemeFactory implements SchemeFactory {
      public statement_clearWarnings_resultStandardScheme getScheme() {
        return new statement_clearWarnings_resultStandardScheme();
      }
    }

    private static class statement_clearWarnings_resultStandardScheme extends StandardScheme<statement_clearWarnings_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_clearWarnings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new CCSQLException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_clearWarnings_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_clearWarnings_resultTupleSchemeFactory implements SchemeFactory {
      public statement_clearWarnings_resultTupleScheme getScheme() {
        return new statement_clearWarnings_resultTupleScheme();
      }
    }

    private static class statement_clearWarnings_resultTupleScheme extends TupleScheme<statement_clearWarnings_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_clearWarnings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_clearWarnings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new CCSQLException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class statement_getMaxRows_args implements org.apache.thrift.TBase<statement_getMaxRows_args, statement_getMaxRows_args._Fields>, java.io.Serializable, Cloneable, Comparable<statement_getMaxRows_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_getMaxRows_args");

    private static final org.apache.thrift.protocol.TField STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statement", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_getMaxRows_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_getMaxRows_argsTupleSchemeFactory());
    }

    public CCStatement statement; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATEMENT((short)1, "statement");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATEMENT
            return STATEMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("statement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCStatement.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_getMaxRows_args.class, metaDataMap);
    }

    public statement_getMaxRows_args() {
    }

    public statement_getMaxRows_args(
      CCStatement statement)
    {
      this();
      this.statement = statement;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_getMaxRows_args(statement_getMaxRows_args other) {
      if (other.isSetStatement()) {
        this.statement = new CCStatement(other.statement);
      }
    }

    public statement_getMaxRows_args deepCopy() {
      return new statement_getMaxRows_args(this);
    }

    @Override
    public void clear() {
      this.statement = null;
    }

    public CCStatement getStatement() {
      return this.statement;
    }

    public statement_getMaxRows_args setStatement(CCStatement statement) {
      this.statement = statement;
      return this;
    }

    public void unsetStatement() {
      this.statement = null;
    }

    /** Returns true if field statement is set (has been assigned a value) and false otherwise */
    public boolean isSetStatement() {
      return this.statement != null;
    }

    public void setStatementIsSet(boolean value) {
      if (!value) {
        this.statement = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATEMENT:
        if (value == null) {
          unsetStatement();
        } else {
          setStatement((CCStatement)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATEMENT:
        return getStatement();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATEMENT:
        return isSetStatement();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_getMaxRows_args)
        return this.equals((statement_getMaxRows_args)that);
      return false;
    }

    public boolean equals(statement_getMaxRows_args that) {
      if (that == null)
        return false;

      boolean this_present_statement = true && this.isSetStatement();
      boolean that_present_statement = true && that.isSetStatement();
      if (this_present_statement || that_present_statement) {
        if (!(this_present_statement && that_present_statement))
          return false;
        if (!this.statement.equals(that.statement))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_getMaxRows_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStatement()).compareTo(other.isSetStatement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement, other.statement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_getMaxRows_args(");
      boolean first = true;

      sb.append("statement:");
      if (this.statement == null) {
        sb.append("null");
      } else {
        sb.append(this.statement);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (statement != null) {
        statement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_getMaxRows_argsStandardSchemeFactory implements SchemeFactory {
      public statement_getMaxRows_argsStandardScheme getScheme() {
        return new statement_getMaxRows_argsStandardScheme();
      }
    }

    private static class statement_getMaxRows_argsStandardScheme extends StandardScheme<statement_getMaxRows_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_getMaxRows_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.statement = new CCStatement();
                struct.statement.read(iprot);
                struct.setStatementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_getMaxRows_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.statement != null) {
          oprot.writeFieldBegin(STATEMENT_FIELD_DESC);
          struct.statement.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_getMaxRows_argsTupleSchemeFactory implements SchemeFactory {
      public statement_getMaxRows_argsTupleScheme getScheme() {
        return new statement_getMaxRows_argsTupleScheme();
      }
    }

    private static class statement_getMaxRows_argsTupleScheme extends TupleScheme<statement_getMaxRows_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_getMaxRows_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatement()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStatement()) {
          struct.statement.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_getMaxRows_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.statement = new CCStatement();
          struct.statement.read(iprot);
          struct.setStatementIsSet(true);
        }
      }
    }

  }

  public static class statement_getMaxRows_result implements org.apache.thrift.TBase<statement_getMaxRows_result, statement_getMaxRows_result._Fields>, java.io.Serializable, Cloneable, Comparable<statement_getMaxRows_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_getMaxRows_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_getMaxRows_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_getMaxRows_resultTupleSchemeFactory());
    }

    public int success; // required
    public CCSQLException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_getMaxRows_result.class, metaDataMap);
    }

    public statement_getMaxRows_result() {
    }

    public statement_getMaxRows_result(
      int success,
      CCSQLException ouch)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_getMaxRows_result(statement_getMaxRows_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOuch()) {
        this.ouch = new CCSQLException(other.ouch);
      }
    }

    public statement_getMaxRows_result deepCopy() {
      return new statement_getMaxRows_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ouch = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public statement_getMaxRows_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public CCSQLException getOuch() {
      return this.ouch;
    }

    public statement_getMaxRows_result setOuch(CCSQLException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((CCSQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_getMaxRows_result)
        return this.equals((statement_getMaxRows_result)that);
      return false;
    }

    public boolean equals(statement_getMaxRows_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_getMaxRows_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_getMaxRows_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_getMaxRows_resultStandardSchemeFactory implements SchemeFactory {
      public statement_getMaxRows_resultStandardScheme getScheme() {
        return new statement_getMaxRows_resultStandardScheme();
      }
    }

    private static class statement_getMaxRows_resultStandardScheme extends StandardScheme<statement_getMaxRows_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_getMaxRows_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new CCSQLException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_getMaxRows_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_getMaxRows_resultTupleSchemeFactory implements SchemeFactory {
      public statement_getMaxRows_resultTupleScheme getScheme() {
        return new statement_getMaxRows_resultTupleScheme();
      }
    }

    private static class statement_getMaxRows_resultTupleScheme extends TupleScheme<statement_getMaxRows_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_getMaxRows_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_getMaxRows_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new CCSQLException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class statement_setMaxRows_args implements org.apache.thrift.TBase<statement_setMaxRows_args, statement_setMaxRows_args._Fields>, java.io.Serializable, Cloneable, Comparable<statement_setMaxRows_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_setMaxRows_args");

    private static final org.apache.thrift.protocol.TField STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statement", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("max", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_setMaxRows_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_setMaxRows_argsTupleSchemeFactory());
    }

    public CCStatement statement; // required
    public int max; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATEMENT((short)1, "statement"),
      MAX((short)2, "max");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATEMENT
            return STATEMENT;
          case 2: // MAX
            return MAX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MAX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("statement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CCStatement.class)));
      tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("max", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_setMaxRows_args.class, metaDataMap);
    }

    public statement_setMaxRows_args() {
    }

    public statement_setMaxRows_args(
      CCStatement statement,
      int max)
    {
      this();
      this.statement = statement;
      this.max = max;
      setMaxIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_setMaxRows_args(statement_setMaxRows_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetStatement()) {
        this.statement = new CCStatement(other.statement);
      }
      this.max = other.max;
    }

    public statement_setMaxRows_args deepCopy() {
      return new statement_setMaxRows_args(this);
    }

    @Override
    public void clear() {
      this.statement = null;
      setMaxIsSet(false);
      this.max = 0;
    }

    public CCStatement getStatement() {
      return this.statement;
    }

    public statement_setMaxRows_args setStatement(CCStatement statement) {
      this.statement = statement;
      return this;
    }

    public void unsetStatement() {
      this.statement = null;
    }

    /** Returns true if field statement is set (has been assigned a value) and false otherwise */
    public boolean isSetStatement() {
      return this.statement != null;
    }

    public void setStatementIsSet(boolean value) {
      if (!value) {
        this.statement = null;
      }
    }

    public int getMax() {
      return this.max;
    }

    public statement_setMaxRows_args setMax(int max) {
      this.max = max;
      setMaxIsSet(true);
      return this;
    }

    public void unsetMax() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_ISSET_ID);
    }

    /** Returns true if field max is set (has been assigned a value) and false otherwise */
    public boolean isSetMax() {
      return EncodingUtils.testBit(__isset_bitfield, __MAX_ISSET_ID);
    }

    public void setMaxIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATEMENT:
        if (value == null) {
          unsetStatement();
        } else {
          setStatement((CCStatement)value);
        }
        break;

      case MAX:
        if (value == null) {
          unsetMax();
        } else {
          setMax((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATEMENT:
        return getStatement();

      case MAX:
        return Integer.valueOf(getMax());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATEMENT:
        return isSetStatement();
      case MAX:
        return isSetMax();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_setMaxRows_args)
        return this.equals((statement_setMaxRows_args)that);
      return false;
    }

    public boolean equals(statement_setMaxRows_args that) {
      if (that == null)
        return false;

      boolean this_present_statement = true && this.isSetStatement();
      boolean that_present_statement = true && that.isSetStatement();
      if (this_present_statement || that_present_statement) {
        if (!(this_present_statement && that_present_statement))
          return false;
        if (!this.statement.equals(that.statement))
          return false;
      }

      boolean this_present_max = true;
      boolean that_present_max = true;
      if (this_present_max || that_present_max) {
        if (!(this_present_max && that_present_max))
          return false;
        if (this.max != that.max)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_setMaxRows_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStatement()).compareTo(other.isSetStatement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement, other.statement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMax()).compareTo(other.isSetMax());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMax()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max, other.max);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_setMaxRows_args(");
      boolean first = true;

      sb.append("statement:");
      if (this.statement == null) {
        sb.append("null");
      } else {
        sb.append(this.statement);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("max:");
      sb.append(this.max);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (statement != null) {
        statement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_setMaxRows_argsStandardSchemeFactory implements SchemeFactory {
      public statement_setMaxRows_argsStandardScheme getScheme() {
        return new statement_setMaxRows_argsStandardScheme();
      }
    }

    private static class statement_setMaxRows_argsStandardScheme extends StandardScheme<statement_setMaxRows_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_setMaxRows_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.statement = new CCStatement();
                struct.statement.read(iprot);
                struct.setStatementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MAX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.max = iprot.readI32();
                struct.setMaxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_setMaxRows_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.statement != null) {
          oprot.writeFieldBegin(STATEMENT_FIELD_DESC);
          struct.statement.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MAX_FIELD_DESC);
        oprot.writeI32(struct.max);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_setMaxRows_argsTupleSchemeFactory implements SchemeFactory {
      public statement_setMaxRows_argsTupleScheme getScheme() {
        return new statement_setMaxRows_argsTupleScheme();
      }
    }

    private static class statement_setMaxRows_argsTupleScheme extends TupleScheme<statement_setMaxRows_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_setMaxRows_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatement()) {
          optionals.set(0);
        }
        if (struct.isSetMax()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStatement()) {
          struct.statement.write(oprot);
        }
        if (struct.isSetMax()) {
          oprot.writeI32(struct.max);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_setMaxRows_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.statement = new CCStatement();
          struct.statement.read(iprot);
          struct.setStatementIsSet(true);
        }
        if (incoming.get(1)) {
          struct.max = iprot.readI32();
          struct.setMaxIsSet(true);
        }
      }
    }

  }

  public static class statement_setMaxRows_result implements org.apache.thrift.TBase<statement_setMaxRows_result, statement_setMaxRows_result._Fields>, java.io.Serializable, Cloneable, Comparable<statement_setMaxRows_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statement_setMaxRows_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statement_setMaxRows_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statement_setMaxRows_resultTupleSchemeFactory());
    }

    public CCSQLException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statement_setMaxRows_result.class, metaDataMap);
    }

    public statement_setMaxRows_result() {
    }

    public statement_setMaxRows_result(
      CCSQLException ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statement_setMaxRows_result(statement_setMaxRows_result other) {
      if (other.isSetOuch()) {
        this.ouch = new CCSQLException(other.ouch);
      }
    }

    public statement_setMaxRows_result deepCopy() {
      return new statement_setMaxRows_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public CCSQLException getOuch() {
      return this.ouch;
    }

    public statement_setMaxRows_result setOuch(CCSQLException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((CCSQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statement_setMaxRows_result)
        return this.equals((statement_setMaxRows_result)that);
      return false;
    }

    public boolean equals(statement_setMaxRows_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statement_setMaxRows_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statement_setMaxRows_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statement_setMaxRows_resultStandardSchemeFactory implements SchemeFactory {
      public statement_setMaxRows_resultStandardScheme getScheme() {
        return new statement_setMaxRows_resultStandardScheme();
      }
    }

    private static class statement_setMaxRows_resultStandardScheme extends StandardScheme<statement_setMaxRows_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statement_setMaxRows_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new CCSQLException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statement_setMaxRows_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statement_setMaxRows_resultTupleSchemeFactory implements SchemeFactory {
      public statement_setMaxRows_resultTupleScheme getScheme() {
        return new statement_setMaxRows_resultTupleScheme();
      }
    }

    private static class statement_setMaxRows_resultTupleScheme extends TupleScheme<statement_setMaxRows_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statement_setMaxRows_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statement_setMaxRows_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new CCSQLException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

}
